{
	"repo": "https://github.com/junit-team/junit5.git",
	"file": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
	"method": {
		"longName": "private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase);",
		"startLine": 99,
		"methodName": "discoverRoot",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "private"
	},
	"history": {
		"d5c0b1cca585ea7cef809db5377f5ee6b31cf630": {
			"type": "Ybodychange",
			"commitMessage": "Introduce custom logging façade for JUL\n\nThis commit introduces a custom logging façade for Java Util Logging (JUL) to be used internally within the framework.\n\nIssue: #834\n",
			"commitDate": "2017-09-08, 6:26 AM",
			"commitName": "d5c0b1cca585ea7cef809db5377f5ee6b31cf630",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-08-14, 2:24 PM",
			"commitNameOld": "583ef858522084a4bb939c53860135228764cb37",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 24.67,
			"commitsBetweenForRepo": 79,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,27 +1,27 @@\n \tprivate Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tfor (TestEngine testEngine : this.testEngines) {\n \t\t\t// @formatter:off\n \t\t\tboolean engineIsExcluded = discoveryRequest.getEngineFilters().stream()\n \t\t\t\t\t.map(engineFilter -> engineFilter.apply(testEngine))\n \t\t\t\t\t.anyMatch(FilterResult::excluded);\n \t\t\t// @formatter:on\n \n \t\t\tif (engineIsExcluded) {\n-\t\t\t\tlogger.fine(() -> String.format(\n+\t\t\t\tlogger.debug(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to an EngineFilter in phase '%s'.\",\n \t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n-\t\t\tlogger.fine(() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase,\n+\t\t\tlogger.debug(() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \n \t\t\tOptional<TestDescriptor> engineRoot = discoverEngineRoot(testEngine, discoveryRequest);\n \t\t\tengineRoot.ifPresent(rootDescriptor -> root.add(testEngine, rootDescriptor));\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"583ef858522084a4bb939c53860135228764cb37": {
			"type": "Ybodychange",
			"commitMessage": "Use consistent Logger field name across code base\n",
			"commitDate": "2017-08-14, 2:24 PM",
			"commitName": "583ef858522084a4bb939c53860135228764cb37",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-06-18, 6:53 AM",
			"commitNameOld": "d438a975feaa869a334794ac10082699c1dae1ca",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 57.31,
			"commitsBetweenForRepo": 268,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,27 +1,27 @@\n \tprivate Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tfor (TestEngine testEngine : this.testEngines) {\n \t\t\t// @formatter:off\n \t\t\tboolean engineIsExcluded = discoveryRequest.getEngineFilters().stream()\n \t\t\t\t\t.map(engineFilter -> engineFilter.apply(testEngine))\n \t\t\t\t\t.anyMatch(FilterResult::excluded);\n \t\t\t// @formatter:on\n \n \t\t\tif (engineIsExcluded) {\n-\t\t\t\tLOG.fine(() -> String.format(\n+\t\t\t\tlogger.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to an EngineFilter in phase '%s'.\",\n \t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n-\t\t\tLOG.fine(() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase,\n+\t\t\tlogger.fine(() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \n \t\t\tOptional<TestDescriptor> engineRoot = discoverEngineRoot(testEngine, discoveryRequest);\n \t\t\tengineRoot.ifPresent(rootDescriptor -> root.add(testEngine, rootDescriptor));\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d438a975feaa869a334794ac10082699c1dae1ca": {
			"type": "Ybodychange",
			"commitMessage": "Reintroduce pruning in DefaultLauncher\n\nPruning in `DefaultLauncher` is actually necessary, because it applies\n`PostDiscoveryFilters` (e.g. tags) and then needs to remove empty\ncontainers that will not register dynamic tests from the `TestPlan`.\n\nIssue: #732\n",
			"commitDate": "2017-06-18, 6:53 AM",
			"commitName": "d438a975feaa869a334794ac10082699c1dae1ca",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-06-18, 5:54 AM",
			"commitNameOld": "936a919111e688079af5d6a5eee36bb2373e931d",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.04,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,26 +1,27 @@\n \tprivate Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tfor (TestEngine testEngine : this.testEngines) {\n \t\t\t// @formatter:off\n \t\t\tboolean engineIsExcluded = discoveryRequest.getEngineFilters().stream()\n \t\t\t\t\t.map(engineFilter -> engineFilter.apply(testEngine))\n \t\t\t\t\t.anyMatch(FilterResult::excluded);\n \t\t\t// @formatter:on\n \n \t\t\tif (engineIsExcluded) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to an EngineFilter in phase '%s'.\",\n \t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \n \t\t\tOptional<TestDescriptor> engineRoot = discoverEngineRoot(testEngine, discoveryRequest);\n \t\t\tengineRoot.ifPresent(rootDescriptor -> root.add(testEngine, rootDescriptor));\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n+\t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"936a919111e688079af5d6a5eee36bb2373e931d": {
			"type": "Ybodychange",
			"commitMessage": "DefaultLauncher no longer prunes TestDescriptor trees\n\nCloses #732.\n",
			"commitDate": "2017-06-18, 5:54 AM",
			"commitName": "936a919111e688079af5d6a5eee36bb2373e931d",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-04-15, 7:03 AM",
			"commitNameOld": "88a41f5e87f3a7c58443a88a14d4e1fc503cfc8c",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 63.95,
			"commitsBetweenForRepo": 114,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,27 +1,26 @@\n \tprivate Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tfor (TestEngine testEngine : this.testEngines) {\n \t\t\t// @formatter:off\n \t\t\tboolean engineIsExcluded = discoveryRequest.getEngineFilters().stream()\n \t\t\t\t\t.map(engineFilter -> engineFilter.apply(testEngine))\n \t\t\t\t\t.anyMatch(FilterResult::excluded);\n \t\t\t// @formatter:on\n \n \t\t\tif (engineIsExcluded) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to an EngineFilter in phase '%s'.\",\n \t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \n \t\t\tOptional<TestDescriptor> engineRoot = discoverEngineRoot(testEngine, discoveryRequest);\n \t\t\tengineRoot.ifPresent(rootDescriptor -> root.add(testEngine, rootDescriptor));\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n-\t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"8ca326a0b7a664a38ed489bd4a69470b9391063d": {
			"type": "Ybodychange",
			"commitMessage": "Route throwable handling through a single method\n\nChange logger \"org.junit.platform.launcher.core.DefaultLauncher\" to\nlevel=\"error\" while testing the platform.\nUpdate M5 release notes.\n",
			"commitDate": "2017-04-15, 3:27 AM",
			"commitName": "8ca326a0b7a664a38ed489bd4a69470b9391063d",
			"commitAuthor": "Christian Stein",
			"commitDateOld": "2017-04-15, 3:27 AM",
			"commitNameOld": "2eef1f0dbbcd9a3fad2d00a65b37a39d97a079cb",
			"commitAuthorOld": "Christian Stein",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,27 +1,27 @@\n \tprivate Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tfor (TestEngine testEngine : this.testEngines) {\n \t\t\t// @formatter:off\n \t\t\tboolean engineIsExcluded = discoveryRequest.getEngineFilters().stream()\n \t\t\t\t\t.map(engineFilter -> engineFilter.apply(testEngine))\n \t\t\t\t\t.anyMatch(FilterResult::excluded);\n \t\t\t// @formatter:on\n \n \t\t\tif (engineIsExcluded) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to an EngineFilter in phase '%s'.\",\n \t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \n-\t\t\tOptional<TestDescriptor> engineRoot = discoverRoot(testEngine, discoveryRequest);\n+\t\t\tOptional<TestDescriptor> engineRoot = discoverEngineRoot(testEngine, discoveryRequest);\n \t\t\tengineRoot.ifPresent(rootDescriptor -> root.add(testEngine, rootDescriptor));\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c49b423f2d1c723a3724597049810416a91f5cba": {
			"type": "Ybodychange",
			"commitMessage": "Handle exceptions in test discovery phase\n\nState: work-in-progress\n\nAddresses: #750\n",
			"commitDate": "2017-04-15, 3:27 AM",
			"commitName": "c49b423f2d1c723a3724597049810416a91f5cba",
			"commitAuthor": "Christian Stein",
			"commitDateOld": "2017-03-19, 9:33 AM",
			"commitNameOld": "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4",
			"commitAuthorOld": "Christian Stein",
			"daysBetweenCommits": 26.75,
			"commitsBetweenForRepo": 119,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,32 +1,27 @@\n \tprivate Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tfor (TestEngine testEngine : this.testEngines) {\n \t\t\t// @formatter:off\n \t\t\tboolean engineIsExcluded = discoveryRequest.getEngineFilters().stream()\n \t\t\t\t\t.map(engineFilter -> engineFilter.apply(testEngine))\n \t\t\t\t\t.anyMatch(FilterResult::excluded);\n \t\t\t// @formatter:on\n \n \t\t\tif (engineIsExcluded) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to an EngineFilter in phase '%s'.\",\n \t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \n-\t\t\tUniqueId uniqueEngineId = UniqueId.forEngine(testEngine.getId());\n-\t\t\tTestDescriptor engineRoot = testEngine.discover(discoveryRequest, uniqueEngineId);\n-\t\t\tPreconditions.notNull(engineRoot,\n-\t\t\t\t() -> String.format(\n-\t\t\t\t\t\"The discover() method for TestEngine with ID '%s' must return a non-null root TestDescriptor.\",\n-\t\t\t\t\ttestEngine.getId()));\n-\t\t\troot.add(testEngine, engineRoot);\n+\t\t\tOptional<TestDescriptor> engineRoot = discoverRoot(testEngine, discoveryRequest);\n+\t\t\tengineRoot.ifPresent(rootDescriptor -> root.add(testEngine, rootDescriptor));\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c88bd40fc19d16022abd5ee9bd4cc287b67afff9": {
			"type": "Ybodychange",
			"commitMessage": "Include TestEngine ID in exception message in DefaultLauncher\n\nIssue: #429\n",
			"commitDate": "2016-07-25, 10:47 AM",
			"commitName": "c88bd40fc19d16022abd5ee9bd4cc287b67afff9",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-07-25, 10:32 AM",
			"commitNameOld": "483222d5853c2df6d9df7f8ea0868ef9c82b5901",
			"commitAuthorOld": "Steve Moyer",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,30 +1,32 @@\n \tprivate Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tfor (TestEngine testEngine : this.testEngines) {\n \t\t\t// @formatter:off\n \t\t\tboolean engineIsExcluded = discoveryRequest.getEngineFilters().stream()\n \t\t\t\t\t.map(engineFilter -> engineFilter.apply(testEngine))\n \t\t\t\t\t.anyMatch(FilterResult::excluded);\n \t\t\t// @formatter:on\n \n \t\t\tif (engineIsExcluded) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to an EngineFilter in phase '%s'.\",\n \t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \n \t\t\tUniqueId uniqueEngineId = UniqueId.forEngine(testEngine.getId());\n \t\t\tTestDescriptor engineRoot = testEngine.discover(discoveryRequest, uniqueEngineId);\n \t\t\tPreconditions.notNull(engineRoot,\n-\t\t\t\t\"The discover() method must return at least the engine's TestDescriptor.\");\n+\t\t\t\t() -> String.format(\n+\t\t\t\t\t\"The discover() method for TestEngine with ID '%s' must return a non-null root TestDescriptor.\",\n+\t\t\t\t\ttestEngine.getId()));\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"483222d5853c2df6d9df7f8ea0868ef9c82b5901": {
			"type": "Ybodychange",
			"commitMessage": "Eliminated NPE caused when TestEngine's discover() method returns null. (#429)\n\n",
			"commitDate": "2016-07-25, 10:32 AM",
			"commitName": "483222d5853c2df6d9df7f8ea0868ef9c82b5901",
			"commitAuthor": "Steve Moyer",
			"commitDateOld": "2016-06-30, 12:53 PM",
			"commitNameOld": "402c756a056e13f5f49634616d87b1333e3c211e",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 24.9,
			"commitsBetweenForRepo": 87,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,30 @@\n \tprivate Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tfor (TestEngine testEngine : this.testEngines) {\n \t\t\t// @formatter:off\n \t\t\tboolean engineIsExcluded = discoveryRequest.getEngineFilters().stream()\n \t\t\t\t\t.map(engineFilter -> engineFilter.apply(testEngine))\n \t\t\t\t\t.anyMatch(FilterResult::excluded);\n \t\t\t// @formatter:on\n \n \t\t\tif (engineIsExcluded) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to an EngineFilter in phase '%s'.\",\n \t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \n \t\t\tUniqueId uniqueEngineId = UniqueId.forEngine(testEngine.getId());\n \t\t\tTestDescriptor engineRoot = testEngine.discover(discoveryRequest, uniqueEngineId);\n+\t\t\tPreconditions.notNull(engineRoot,\n+\t\t\t\t\"The discover() method must return at least the engine's TestDescriptor.\");\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"402c756a056e13f5f49634616d87b1333e3c211e": {
			"type": "Yparameterchange",
			"commitMessage": "Rename TestDiscoveryRequest to LauncherDiscoveryRequest\n",
			"commitDate": "2016-06-30, 12:53 PM",
			"commitName": "402c756a056e13f5f49634616d87b1333e3c211e",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-06-20, 4:43 AM",
			"commitNameOld": "f05183091a62cbbd58df338fc58f599f7994ec74",
			"commitAuthorOld": "JUnit Team",
			"daysBetweenCommits": 10.34,
			"commitsBetweenForRepo": 87,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,28 @@\n-\tprivate Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n+\tprivate Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tfor (TestEngine testEngine : this.testEngines) {\n \t\t\t// @formatter:off\n \t\t\tboolean engineIsExcluded = discoveryRequest.getEngineFilters().stream()\n \t\t\t\t\t.map(engineFilter -> engineFilter.apply(testEngine))\n \t\t\t\t\t.anyMatch(FilterResult::excluded);\n \t\t\t// @formatter:on\n \n \t\t\tif (engineIsExcluded) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to an EngineFilter in phase '%s'.\",\n \t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \n \t\t\tUniqueId uniqueEngineId = UniqueId.forEngine(testEngine.getId());\n \t\t\tTestDescriptor engineRoot = testEngine.discover(discoveryRequest, uniqueEngineId);\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[discoveryRequest-TestDiscoveryRequest, phase-String]",
				"newValue": "[discoveryRequest-LauncherDiscoveryRequest, phase-String]"
			}
		},
		"4972eb58d680a30e8fbd1ffb6cdc6477bef83374": {
			"type": "Yfilerename",
			"commitMessage": "Rename all JUnit 5 artifacts to platform, jupiter, & vintage\n\nIssue: #286\n",
			"commitDate": "2016-06-20, 1:59 AM",
			"commitName": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2016-06-19, 11:04 AM",
			"commitNameOld": "e5b7300ba40a0420e310d463a63ea4c10cc8d9b9",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.62,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
				"newPath": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java"
			}
		},
		"4537bec58804c392a8bce296dced0337c8ec1a8d": {
			"type": "Yfilerename",
			"commitMessage": "Rename remaining org.junit.gen5 base packages to org.junit.platform\n\nIssue: #286\n",
			"commitDate": "2016-06-19, 10:22 AM",
			"commitName": "4537bec58804c392a8bce296dced0337c8ec1a8d",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2016-06-19, 9:25 AM",
			"commitNameOld": "4dd821ac0cf681f17f14e1dcd383b10c99104e70",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.04,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/core/DefaultLauncher.java",
				"newPath": "junit-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java"
			}
		},
		"e273d6681b96509b0bd35916a82fcfada21f18c6": {
			"type": "Yfilerename",
			"commitMessage": "Rename launcher.main package to launcher.core\n",
			"commitDate": "2016-06-18, 2:26 PM",
			"commitName": "e273d6681b96509b0bd35916a82fcfada21f18c6",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2016-06-18, 2:19 PM",
			"commitNameOld": "d4fca2b705b1f05312a59e71d37853e15632c437",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
				"newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/core/DefaultLauncher.java"
			}
		},
		"c1f6fc7c8a7dbdf120b7447c96c9b81751b8a96b": {
			"type": "Ybodychange",
			"commitMessage": "Overhaul required/excluded engine filter support\n\nPrior to this commit, the `EngineIdFilter` could only be used to\nrequire a single `TestEngine` within the entire test plan.\n\nThis commit addresses this issue and revises our `TestEngine` filtering\nsupport in the following ways.\n\n- Renamed `EngineIdFilter` to `EngineFilter`\n- `EngineFilter` now applies to `TestEngine` instead of `String`\n- Converted `requireEngineId(String)` to `requireEngines(String...)`\n- Introduced `excludeEngines(String...)`\n\nCloses: #291\n",
			"commitDate": "2016-06-04, 11:41 AM",
			"commitName": "c1f6fc7c8a7dbdf120b7447c96c9b81751b8a96b",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-28, 6:55 AM",
			"commitNameOld": "d75683776656e7781919bec097971cbae38c5d9d",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 7.2,
			"commitsBetweenForRepo": 79,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,28 @@\n \tprivate Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tfor (TestEngine testEngine : this.testEngines) {\n-\t\t\tfinal String engineId = testEngine.getId();\n+\t\t\t// @formatter:off\n+\t\t\tboolean engineIsExcluded = discoveryRequest.getEngineFilters().stream()\n+\t\t\t\t\t.map(engineFilter -> engineFilter.apply(testEngine))\n+\t\t\t\t\t.anyMatch(FilterResult::excluded);\n+\t\t\t// @formatter:on\n \n-\t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n-\t\t\t\tengineIdFilter -> engineIdFilter.apply(engineId)).anyMatch(FilterResult::excluded)) {\n+\t\t\tif (engineIsExcluded) {\n \t\t\t\tLOG.fine(() -> String.format(\n-\t\t\t\t\t\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\", engineId, phase));\n+\t\t\t\t\t\"Test discovery for engine '%s' was skipped due to an EngineFilter in phase '%s'.\",\n+\t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n-\t\t\tLOG.fine(\n-\t\t\t\t() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase, engineId));\n+\t\t\tLOG.fine(() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase,\n+\t\t\t\ttestEngine.getId()));\n \n \t\t\tUniqueId uniqueEngineId = UniqueId.forEngine(testEngine.getId());\n \t\t\tTestDescriptor engineRoot = testEngine.discover(discoveryRequest, uniqueEngineId);\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d75683776656e7781919bec097971cbae38c5d9d": {
			"type": "Ybodychange",
			"commitMessage": "Rename Filter.filter() to Filter.apply()\n",
			"commitDate": "2016-05-28, 6:55 AM",
			"commitName": "d75683776656e7781919bec097971cbae38c5d9d",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-28, 6:26 AM",
			"commitNameOld": "5f6f33a074e8469211e5d648a4f98a3628be18a1",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n \tprivate Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tfor (TestEngine testEngine : this.testEngines) {\n \t\t\tfinal String engineId = testEngine.getId();\n \n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n-\t\t\t\tengineIdFilter -> engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n+\t\t\t\tengineIdFilter -> engineIdFilter.apply(engineId)).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\", engineId, phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(\n \t\t\t\t() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase, engineId));\n \n \t\t\tUniqueId uniqueEngineId = UniqueId.forEngine(testEngine.getId());\n \t\t\tTestDescriptor engineRoot = testEngine.discover(discoveryRequest, uniqueEngineId);\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"875b6ea55d22a6b5e7d734974d7d710fb05825a1": {
			"type": "Ybodychange",
			"commitMessage": "Fail immediately if no test engines are detected\n\nIssue: #264\n",
			"commitDate": "2016-05-13, 8:49 AM",
			"commitName": "875b6ea55d22a6b5e7d734974d7d710fb05825a1",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-03-18, 1:05 AM",
			"commitNameOld": "0ffade04d33544837b126ae868da1ec087d113e3",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 56.32,
			"commitsBetweenForRepo": 150,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n \tprivate Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tfor (TestEngine testEngine : this.testEngines) {\n \t\t\tfinal String engineId = testEngine.getId();\n \n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\", engineId, phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(\n-\t\t\t\t() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase, engineId));\n+\t\t\t\t() -> String.format(\"Discovering tests during Launcher %s phase in engine '%s'.\", phase, engineId));\n \n \t\t\tUniqueId uniqueEngineId = UniqueId.forEngine(testEngine.getId());\n \t\t\tTestDescriptor engineRoot = testEngine.discover(discoveryRequest, uniqueEngineId);\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0ffade04d33544837b126ae868da1ec087d113e3": {
			"type": "Ybodychange",
			"commitMessage": "#190 DefaultLauncher uses engine.discover(request, uniqueId)\n",
			"commitDate": "2016-03-18, 1:05 AM",
			"commitName": "0ffade04d33544837b126ae868da1ec087d113e3",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2016-03-10, 11:31 AM",
			"commitNameOld": "7a4e5ff5338a68a68cd8072a235fb5ee19ba2f85",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 7.52,
			"commitsBetweenForRepo": 72,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,22 +1,24 @@\n \tprivate Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tfor (TestEngine testEngine : this.testEngines) {\n \t\t\tfinal String engineId = testEngine.getId();\n \n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\", engineId, phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(\n \t\t\t\t() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase, engineId));\n-\t\t\tTestDescriptor engineRoot = testEngine.discover(discoveryRequest);\n+\n+\t\t\tUniqueId uniqueEngineId = UniqueId.forEngine(testEngine.getId());\n+\t\t\tTestDescriptor engineRoot = testEngine.discover(discoveryRequest, uniqueEngineId);\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"7a4e5ff5338a68a68cd8072a235fb5ee19ba2f85": {
			"type": "Ybodychange",
			"commitMessage": "Polish DefaultLauncher implementation\n",
			"commitDate": "2016-03-10, 11:31 AM",
			"commitName": "7a4e5ff5338a68a68cd8072a235fb5ee19ba2f85",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-03-10, 10:49 AM",
			"commitNameOld": "9ce6fbe62ab7eda318f2ecb9cc5f91a18dce39d3",
			"commitAuthorOld": "Stefan Birkner",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,22 +1,22 @@\n \tprivate Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n-\t\tfor (TestEngine testEngine : testEngines) {\n+\t\tfor (TestEngine testEngine : this.testEngines) {\n \t\t\tfinal String engineId = testEngine.getId();\n \n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\", engineId, phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(\n \t\t\t\t() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase, engineId));\n \t\t\tTestDescriptor engineRoot = testEngine.discover(discoveryRequest);\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9ce6fbe62ab7eda318f2ecb9cc5f91a18dce39d3": {
			"type": "Ybodychange",
			"commitMessage": "Engines for DefaultLauncher must have different ids.\n\nA DefaultLauncher with TestEngines that have equal ids is unusable. It\nfails to discover or execute tests. Hence it should not be possible to\ncreate such a launcher.\n",
			"commitDate": "2016-03-10, 10:49 AM",
			"commitName": "9ce6fbe62ab7eda318f2ecb9cc5f91a18dce39d3",
			"commitAuthor": "Stefan Birkner",
			"commitDateOld": "2016-03-09, 3:08 PM",
			"commitNameOld": "f696254e2bc57a53a1d64e7a3bb6754d655eb7d7",
			"commitAuthorOld": "Stefan Birkner",
			"daysBetweenCommits": 0.82,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,29 +1,22 @@\n \tprivate Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n-\t\tSet<String> uniqueEngineIds = new HashSet<>();\n-\n \t\tfor (TestEngine testEngine : testEngines) {\n \t\t\tfinal String engineId = testEngine.getId();\n \n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\", engineId, phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n-\t\t\tif (!uniqueEngineIds.add(engineId)) {\n-\t\t\t\tthrow new JUnitException(\n-\t\t\t\t\tString.format(\"Failure in launcher: multiple engines with the same ID [%s].\", engineId));\n-\t\t\t}\n-\n \t\t\tLOG.fine(\n \t\t\t\t() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase, engineId));\n \t\t\tTestDescriptor engineRoot = testEngine.discover(discoveryRequest);\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"2be5dd432541041b0d023d2f535287b7f7a2b882": {
			"type": "Ybodychange",
			"commitMessage": "Rename to discover() for consistency with Launcher\n",
			"commitDate": "2016-01-22, 4:14 AM",
			"commitName": "2be5dd432541041b0d023d2f535287b7f7a2b882",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2016-01-22, 2:32 AM",
			"commitNameOld": "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.07,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,29 +1,29 @@\n \tprivate Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tSet<String> uniqueEngineIds = new HashSet<>();\n \n \t\tfor (TestEngine testEngine : testEngines) {\n \t\t\tfinal String engineId = testEngine.getId();\n \n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\", engineId, phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tif (!uniqueEngineIds.add(engineId)) {\n \t\t\t\tthrow new JUnitException(\n \t\t\t\t\tString.format(\"Failure in launcher: multiple engines with the same ID [%s].\", engineId));\n \t\t\t}\n \n \t\t\tLOG.fine(\n \t\t\t\t() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase, engineId));\n-\t\t\tTestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);\n+\t\t\tTestDescriptor engineRoot = testEngine.discover(discoveryRequest);\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0": {
			"type": "Ybodychange",
			"commitMessage": "Simplify DefaultLauncher, remove TestEngineRegistry interface\n",
			"commitDate": "2016-01-22, 2:32 AM",
			"commitName": "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2016-01-22, 2:26 AM",
			"commitNameOld": "1f209b6b9e9c66c4931f34a5d83df8e11c1d6dea",
			"commitAuthorOld": "Matthias Merdes",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,30 +1,29 @@\n \tprivate Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \n \t\tSet<String> uniqueEngineIds = new HashSet<>();\n \n-\t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n+\t\tfor (TestEngine testEngine : testEngines) {\n \t\t\tfinal String engineId = testEngine.getId();\n \n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(() -> String.format(\n \t\t\t\t\t\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\", engineId, phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tif (!uniqueEngineIds.add(engineId)) {\n-\t\t\t\tthrow new JUnitException(String.format(\n-\t\t\t\t\t\"Failure in launcher: TestEngineRegistry [%s] returned multiple engines with the same ID [%s].\",\n-\t\t\t\t\ttestEngineRegistry.getClass().getName(), engineId));\n+\t\t\t\tthrow new JUnitException(\n+\t\t\t\t\tString.format(\"Failure in launcher: multiple engines with the same ID [%s].\", engineId));\n \t\t\t}\n \n \t\t\tLOG.fine(\n \t\t\t\t() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase, engineId));\n \t\t\tTestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"bc1770895674f4b22c7db1068d2b33b3699f9aa8": {
			"type": "Ybodychange",
			"commitMessage": "Ensure uniqueness of engine IDs in DefaultLauncher\n\nIssue: #104\n",
			"commitDate": "2016-01-20, 11:58 AM",
			"commitName": "bc1770895674f4b22c7db1068d2b33b3699f9aa8",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-01-20, 11:33 AM",
			"commitNameOld": "05293050d0bd019c08237dab82e6c3b57df18a4e",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,30 @@\n \tprivate Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n+\n+\t\tSet<String> uniqueEngineIds = new HashSet<>();\n+\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n+\t\t\tfinal String engineId = testEngine.getId();\n+\n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n-\t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n-\t\t\t\tLOG.fine(\n-\t\t\t\t\t() -> String.format(\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\",\n-\t\t\t\t\t\ttestEngine.getId(), phase));\n+\t\t\t\tengineIdFilter -> engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n+\t\t\t\tLOG.fine(() -> String.format(\n+\t\t\t\t\t\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\", engineId, phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n-\t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n-\t\t\t\ttestEngine.getId()));\n+\t\t\tif (!uniqueEngineIds.add(engineId)) {\n+\t\t\t\tthrow new JUnitException(String.format(\n+\t\t\t\t\t\"Failure in launcher: TestEngineRegistry [%s] returned multiple engines with the same ID [%s].\",\n+\t\t\t\t\ttestEngineRegistry.getClass().getName(), engineId));\n+\t\t\t}\n+\n+\t\t\tLOG.fine(\n+\t\t\t\t() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase, engineId));\n \t\t\tTestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33": {
			"type": "Yfilerename",
			"commitMessage": "Rename JUnit5Launcher to DefaultLauncher\n\nIssue: #129\n",
			"commitDate": "2016-01-20, 9:52 AM",
			"commitName": "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-01-20, 9:47 AM",
			"commitNameOld": "a2e588e96c3a763553d764d5c35a44b9eea41d75",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/JUnit5Launcher.java",
				"newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java"
			}
		},
		"a2e588e96c3a763553d764d5c35a44b9eea41d75": {
			"type": "Yfilerename",
			"commitMessage": "Convert Launcher class into an interface\n\nThis commit coverts the existing Launcher class into an interface and\nrenames the existing implementation to JUnit5Launcher.\n\nIn addition, this commit renames DiscoveryRequestBuilder to\nTestDiscoveryRequestBuilder.\n\nIssue: #129\n",
			"commitDate": "2016-01-20, 9:47 AM",
			"commitName": "a2e588e96c3a763553d764d5c35a44b9eea41d75",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2016-01-20, 9:27 AM",
			"commitNameOld": "027bc980ad0a17a6130013aeec068296606bbfef",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java",
				"newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/JUnit5Launcher.java"
			}
		},
		"795066436d5b33a32375cd421a9241f1b1d0499d": {
			"type": "Ybodychange",
			"commitMessage": "#54: removed method from DiscoveryRequest\nmade DiscoveryRequest package private\n",
			"commitDate": "2016-01-19, 2:26 AM",
			"commitName": "795066436d5b33a32375cd421a9241f1b1d0499d",
			"commitAuthor": "Matthias Merdes",
			"commitDateOld": "2016-01-19, 1:32 AM",
			"commitNameOld": "57b07e0594875902399805d6e41514f03a4b2f31",
			"commitAuthorOld": "Matthias Merdes",
			"daysBetweenCommits": 0.04,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,20 @@\n \tprivate Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(\n \t\t\t\t\t() -> String.format(\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\",\n \t\t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \t\t\tTestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n-\t\troot.applyFilters(discoveryRequest);\n+\t\troot.applyPostDiscoveryFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"57b07e0594875902399805d6e41514f03a4b2f31": {
			"type": "Yparameterchange",
			"commitMessage": "#54: Extracted new interface TestDiscoveryRequest from DiscoveryRequest and adapted usages\n",
			"commitDate": "2016-01-19, 1:32 AM",
			"commitName": "57b07e0594875902399805d6e41514f03a4b2f31",
			"commitAuthor": "Matthias Merdes",
			"commitDateOld": "2016-01-18, 8:34 AM",
			"commitNameOld": "961fd47344c55d21907607ec9672df6d4f3d2362",
			"commitAuthorOld": "Stefan Bechtold",
			"daysBetweenCommits": 0.71,
			"commitsBetweenForRepo": 8,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,20 @@\n-\tprivate Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n+\tprivate Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(\n \t\t\t\t\t() -> String.format(\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\",\n \t\t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \t\t\tTestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[discoveryRequest-DiscoveryRequest, phase-String]",
				"newValue": "[discoveryRequest-TestDiscoveryRequest, phase-String]"
			}
		},
		"961fd47344c55d21907607ec9672df6d4f3d2362": {
			"type": "Yfilerename",
			"commitMessage": "Encapsulate Launcher with its support classes into main package\n\nIssue: #54\n",
			"commitDate": "2016-01-18, 8:34 AM",
			"commitName": "961fd47344c55d21907607ec9672df6d4f3d2362",
			"commitAuthor": "Stefan Bechtold",
			"commitDateOld": "2016-01-18, 7:56 AM",
			"commitNameOld": "93397066597b7ca8af35a77b9559bdc079d4f5d5",
			"commitAuthorOld": "Stefan Bechtold",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
				"newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java"
			}
		},
		"ab12dc85ce90a941531d666e658dfaa0834fda31": {
			"type": "Ybodychange",
			"commitMessage": "Remove EngineAwareTestDescriptor\n\nIssue: #54\n",
			"commitDate": "2016-01-18, 7:03 AM",
			"commitName": "ab12dc85ce90a941531d666e658dfaa0834fda31",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2016-01-18, 6:57 AM",
			"commitNameOld": "9da25e126d174ba6e6ae02596afa538a7cafe17b",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,20 @@\n \tprivate Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n \t\tRoot root = new Root();\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(\n \t\t\t\t\t() -> String.format(\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\",\n \t\t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n-\t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);\n+\t\t\tTestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);\n \t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9da25e126d174ba6e6ae02596afa538a7cafe17b": {
			"type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
			"commitMessage": "Remove RootTestDescriptor node from TestPlan\n\nIssue: #54\n",
			"commitDate": "2016-01-18, 6:57 AM",
			"commitName": "9da25e126d174ba6e6ae02596afa538a7cafe17b",
			"commitAuthor": "Marc Philipp",
			"subchanges": [
				{
					"type": "Yrename",
					"commitMessage": "Remove RootTestDescriptor node from TestPlan\n\nIssue: #54\n",
					"commitDate": "2016-01-18, 6:57 AM",
					"commitName": "9da25e126d174ba6e6ae02596afa538a7cafe17b",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2016-01-17, 8:10 PM",
					"commitNameOld": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
					"commitAuthorOld": "Stefan Bechtold",
					"daysBetweenCommits": 0.45,
					"commitsBetweenForRepo": 11,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,20 +1,20 @@\n-\tprivate RootTestDescriptor discoverRootDescriptor(DiscoveryRequest discoveryRequest, String phase) {\n-\t\tRootTestDescriptor root = new RootTestDescriptor();\n+\tprivate Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n+\t\tRoot root = new Root();\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(\n \t\t\t\t\t() -> String.format(\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\",\n \t\t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);\n-\t\t\troot.addChild(engineRoot);\n+\t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "discoverRootDescriptor",
						"newValue": "discoverRoot"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "Remove RootTestDescriptor node from TestPlan\n\nIssue: #54\n",
					"commitDate": "2016-01-18, 6:57 AM",
					"commitName": "9da25e126d174ba6e6ae02596afa538a7cafe17b",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2016-01-17, 8:10 PM",
					"commitNameOld": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
					"commitAuthorOld": "Stefan Bechtold",
					"daysBetweenCommits": 0.45,
					"commitsBetweenForRepo": 11,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,20 +1,20 @@\n-\tprivate RootTestDescriptor discoverRootDescriptor(DiscoveryRequest discoveryRequest, String phase) {\n-\t\tRootTestDescriptor root = new RootTestDescriptor();\n+\tprivate Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n+\t\tRoot root = new Root();\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(\n \t\t\t\t\t() -> String.format(\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\",\n \t\t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);\n-\t\t\troot.addChild(engineRoot);\n+\t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "RootTestDescriptor",
						"newValue": "Root"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Remove RootTestDescriptor node from TestPlan\n\nIssue: #54\n",
					"commitDate": "2016-01-18, 6:57 AM",
					"commitName": "9da25e126d174ba6e6ae02596afa538a7cafe17b",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2016-01-17, 8:10 PM",
					"commitNameOld": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
					"commitAuthorOld": "Stefan Bechtold",
					"daysBetweenCommits": 0.45,
					"commitsBetweenForRepo": 11,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,20 +1,20 @@\n-\tprivate RootTestDescriptor discoverRootDescriptor(DiscoveryRequest discoveryRequest, String phase) {\n-\t\tRootTestDescriptor root = new RootTestDescriptor();\n+\tprivate Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n+\t\tRoot root = new Root();\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n \t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(\n \t\t\t\t\t() -> String.format(\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\",\n \t\t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);\n-\t\t\troot.addChild(engineRoot);\n+\t\t\troot.add(testEngine, engineRoot);\n \t\t}\n \t\troot.applyFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"9162134ee3dfc3e80a45d08e32fdbf8ed06e87be": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Provide better names for the test plan specification\n\n- Replaced all occurrences of specification with discovery request\n- Replaced all occurrences of specification element with selector\n- Renamed package \"org.junit.gen5.engine.specification\"\n             into \"org.junit.gen5.engine.discoveryrequest\"\n\nIssue: #116\n",
			"commitDate": "2016-01-17, 8:10 PM",
			"commitName": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
			"commitAuthor": "Stefan Bechtold",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Provide better names for the test plan specification\n\n- Replaced all occurrences of specification with discovery request\n- Replaced all occurrences of specification element with selector\n- Renamed package \"org.junit.gen5.engine.specification\"\n             into \"org.junit.gen5.engine.discoveryrequest\"\n\nIssue: #116\n",
					"commitDate": "2016-01-17, 8:10 PM",
					"commitName": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
					"commitAuthor": "Stefan Bechtold",
					"commitDateOld": "2016-01-17, 7:24 PM",
					"commitNameOld": "82ff8d2c1bf2426f25b7ac2d9617fa25a2a312b5",
					"commitAuthorOld": "Stefan Bechtold",
					"daysBetweenCommits": 0.03,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,20 +1,20 @@\n-\tprivate RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n+\tprivate RootTestDescriptor discoverRootDescriptor(DiscoveryRequest discoveryRequest, String phase) {\n \t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n-\t\t\tif (specification.getEngineIdFilters().stream().map(\n+\t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(\n \t\t\t\t\t() -> String.format(\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\",\n \t\t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n-\t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(specification);\n+\t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);\n \t\t\troot.addChild(engineRoot);\n \t\t}\n-\t\troot.applyFilters(specification);\n+\t\troot.applyFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[specification-DiscoveryRequest, phase-String]",
						"newValue": "[discoveryRequest-DiscoveryRequest, phase-String]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Provide better names for the test plan specification\n\n- Replaced all occurrences of specification with discovery request\n- Replaced all occurrences of specification element with selector\n- Renamed package \"org.junit.gen5.engine.specification\"\n             into \"org.junit.gen5.engine.discoveryrequest\"\n\nIssue: #116\n",
					"commitDate": "2016-01-17, 8:10 PM",
					"commitName": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
					"commitAuthor": "Stefan Bechtold",
					"commitDateOld": "2016-01-17, 7:24 PM",
					"commitNameOld": "82ff8d2c1bf2426f25b7ac2d9617fa25a2a312b5",
					"commitAuthorOld": "Stefan Bechtold",
					"daysBetweenCommits": 0.03,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,20 +1,20 @@\n-\tprivate RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n+\tprivate RootTestDescriptor discoverRootDescriptor(DiscoveryRequest discoveryRequest, String phase) {\n \t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n-\t\t\tif (specification.getEngineIdFilters().stream().map(\n+\t\t\tif (discoveryRequest.getEngineIdFilters().stream().map(\n \t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(\n \t\t\t\t\t() -> String.format(\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\",\n \t\t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n-\t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(specification);\n+\t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(discoveryRequest);\n \t\t\troot.addChild(engineRoot);\n \t\t}\n-\t\troot.applyFilters(specification);\n+\t\troot.applyFilters(discoveryRequest);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"82ff8d2c1bf2426f25b7ac2d9617fa25a2a312b5": {
			"type": "Ybodychange",
			"commitMessage": "Provide better names for the test plan specification\n\n- Renamed isAccepted() into included()\n- Renamed isFiltered() into excluded()\n\nIssue: #116\n",
			"commitDate": "2016-01-17, 7:24 PM",
			"commitName": "82ff8d2c1bf2426f25b7ac2d9617fa25a2a312b5",
			"commitAuthor": "Stefan Bechtold",
			"commitDateOld": "2016-01-17, 4:50 AM",
			"commitNameOld": "af19db7e5a676b3d7e56c48847b09347866d1fcb",
			"commitAuthorOld": "Stefan Bechtold",
			"daysBetweenCommits": 0.61,
			"commitsBetweenForRepo": 8,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,20 @@\n \tprivate RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n \t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n \t\t\tif (specification.getEngineIdFilters().stream().map(\n-\t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::isDeclined)) {\n+\t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n \t\t\t\tLOG.fine(\n \t\t\t\t\t() -> String.format(\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\",\n \t\t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(specification);\n \t\t\troot.addChild(engineRoot);\n \t\t}\n \t\troot.applyFilters(specification);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"af19db7e5a676b3d7e56c48847b09347866d1fcb": {
			"type": "Ybodychange",
			"commitMessage": "Provide better names for the test plan specification\n\n- Renamed isFiltered() into isDeclined()\n\nIssue: #116\n",
			"commitDate": "2016-01-17, 4:50 AM",
			"commitName": "af19db7e5a676b3d7e56c48847b09347866d1fcb",
			"commitAuthor": "Stefan Bechtold",
			"commitDateOld": "2016-01-16, 12:00 PM",
			"commitNameOld": "b76422c02c3a9eed390c5949764dc8b7fc3e3243",
			"commitAuthorOld": "Stefan Bechtold",
			"daysBetweenCommits": 0.7,
			"commitsBetweenForRepo": 8,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,20 @@\n \tprivate RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n \t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n \t\t\tif (specification.getEngineIdFilters().stream().map(\n-\t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::isFiltered)) {\n+\t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::isDeclined)) {\n \t\t\t\tLOG.fine(\n \t\t\t\t\t() -> String.format(\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\",\n \t\t\t\t\t\ttestEngine.getId(), phase));\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(specification);\n \t\t\troot.addChild(engineRoot);\n \t\t}\n \t\troot.applyFilters(specification);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b76422c02c3a9eed390c5949764dc8b7fc3e3243": {
			"type": "Ybodychange",
			"commitMessage": "Provide better names for the test plan specification\n\n- created EngineIdFilter as a new filter\n- let the Launcher execute the EngineIdFilter\n\nIssue: #116\n",
			"commitDate": "2016-01-16, 12:00 PM",
			"commitName": "b76422c02c3a9eed390c5949764dc8b7fc3e3243",
			"commitAuthor": "Stefan Bechtold",
			"commitDateOld": "2016-01-15, 6:15 AM",
			"commitNameOld": "ad553b10b4b2b1a78c9a0c91a6d50ebb1421ff3f",
			"commitAuthorOld": "Stefan Bechtold",
			"daysBetweenCommits": 1.24,
			"commitsBetweenForRepo": 29,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,20 @@\n \tprivate RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n \t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n+\t\t\tif (specification.getEngineIdFilters().stream().map(\n+\t\t\t\tengineIdFilter -> engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::isFiltered)) {\n+\t\t\t\tLOG.fine(\n+\t\t\t\t\t() -> String.format(\"Test discovery for engine '%s' was skipped due to a filter in phase '%s'.\",\n+\t\t\t\t\t\ttestEngine.getId(), phase));\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(specification);\n \t\t\troot.addChild(engineRoot);\n \t\t}\n \t\troot.applyFilters(specification);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ad553b10b4b2b1a78c9a0c91a6d50ebb1421ff3f": {
			"type": "Yparameterchange",
			"commitMessage": "Provide better names for the test plan specification\n\n- rename class TestPlanSpecification to DiscoveryRequest\n- rename class TestPlanSpecificationElement to DiscoverySelector\n- rename class TestPlanSpecificationElementVisitor to DiscoverySelectorVisitor\n- rename class TestPlanSpecification to DiscoveryRequest\n\nIssue: #116\n",
			"commitDate": "2016-01-15, 6:15 AM",
			"commitName": "ad553b10b4b2b1a78c9a0c91a6d50ebb1421ff3f",
			"commitAuthor": "Stefan Bechtold",
			"commitDateOld": "2016-01-15, 4:37 AM",
			"commitNameOld": "156d244638005cdb0c0e82ee8e6fa987d6092b90",
			"commitAuthorOld": "Stefan Bechtold",
			"daysBetweenCommits": 0.07,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n-\tprivate RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n+\tprivate RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n \t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n \t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(specification);\n \t\t\troot.addChild(engineRoot);\n \t\t}\n \t\troot.applyFilters(specification);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[specification-TestPlanSpecification, phase-String]",
				"newValue": "[specification-DiscoveryRequest, phase-String]"
			}
		},
		"e061fa45d89529edff690f329298c6a061482834": {
			"type": "Ybodychange",
			"commitMessage": "Reduce log level to FINE in Launcher.discoverRootDescriptor()\n\nIssue: #84\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks msg systems ag\n(http://www.msg-systems.com) for supporting the JUnit crowdfunding\ncampaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2016-01-04, 5:54 AM",
			"commitName": "e061fa45d89529edff690f329298c6a061482834",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-01-03, 2:11 PM",
			"commitNameOld": "cfed3cac24530762a6a8b99627b17f5b00ac9260",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.66,
			"commitsBetweenForRepo": 9,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n \tprivate RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n \t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n-\t\t\tLOG.info(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n+\t\t\tLOG.fine(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(specification);\n \t\t\troot.addChild(engineRoot);\n \t\t}\n \t\troot.applyFilters(specification);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"cfed3cac24530762a6a8b99627b17f5b00ac9260": {
			"type": "Ybodychange",
			"commitMessage": "Polish Launcher and TestEngineRegistry APIs and Javadoc\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks msg systems ag\n(http://www.msg-systems.com) for supporting the JUnit crowdfunding\ncampaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2016-01-03, 2:11 PM",
			"commitName": "cfed3cac24530762a6a8b99627b17f5b00ac9260",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-01-03, 1:36 PM",
			"commitNameOld": "d6b17576a2b7e2d1ba28dbef2430c042ad1b887a",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n \tprivate RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n \t\tRootTestDescriptor root = new RootTestDescriptor();\n-\t\tfor (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n-\t\t\tLOG.info(() -> String.format(\"Discovering tests during launcher %s phase in engine %s.\", phase,\n+\t\tfor (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n+\t\t\tLOG.info(() -> String.format(\"Discovering tests during launcher %s phase in engine '%s'.\", phase,\n \t\t\t\ttestEngine.getId()));\n \t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(specification);\n \t\t\troot.addChild(engineRoot);\n \t\t}\n \t\troot.applyFilters(specification);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d6b17576a2b7e2d1ba28dbef2430c042ad1b887a": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Log discovery/execution phase in Launcher.discoverRootDescriptor()\n\nIn order to avoid duplicated, misleading log entries, this commit\nintroduces a new 'phase' parameter in discoverRootDescriptor() so that\nthe seemingly duplicated log entries are discernible from one another.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks msg systems ag\n(http://www.msg-systems.com) for supporting the JUnit crowdfunding\ncampaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2016-01-03, 1:36 PM",
			"commitName": "d6b17576a2b7e2d1ba28dbef2430c042ad1b887a",
			"commitAuthor": "Sam Brannen",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Log discovery/execution phase in Launcher.discoverRootDescriptor()\n\nIn order to avoid duplicated, misleading log entries, this commit\nintroduces a new 'phase' parameter in discoverRootDescriptor() so that\nthe seemingly duplicated log entries are discernible from one another.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks msg systems ag\n(http://www.msg-systems.com) for supporting the JUnit crowdfunding\ncampaign!\n------------------------------------------------------------------------\n",
					"commitDate": "2016-01-03, 1:36 PM",
					"commitName": "d6b17576a2b7e2d1ba28dbef2430c042ad1b887a",
					"commitAuthor": "Sam Brannen",
					"commitDateOld": "2016-01-01, 10:57 AM",
					"commitNameOld": "a6e3e77eeb01b8e6fdc91be3120c6d07af1b5a91",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 2.11,
					"commitsBetweenForRepo": 60,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,11 +1,12 @@\n-\tprivate RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n+\tprivate RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n \t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n-\t\t\tLOG.info(\"Discovering tests in engine \" + testEngine.getId());\n+\t\t\tLOG.info(() -> String.format(\"Discovering tests during launcher %s phase in engine %s.\", phase,\n+\t\t\t\ttestEngine.getId()));\n \t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(specification);\n \t\t\troot.addChild(engineRoot);\n \t\t}\n \t\troot.applyFilters(specification);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[specification-TestPlanSpecification]",
						"newValue": "[specification-TestPlanSpecification, phase-String]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Log discovery/execution phase in Launcher.discoverRootDescriptor()\n\nIn order to avoid duplicated, misleading log entries, this commit\nintroduces a new 'phase' parameter in discoverRootDescriptor() so that\nthe seemingly duplicated log entries are discernible from one another.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks msg systems ag\n(http://www.msg-systems.com) for supporting the JUnit crowdfunding\ncampaign!\n------------------------------------------------------------------------\n",
					"commitDate": "2016-01-03, 1:36 PM",
					"commitName": "d6b17576a2b7e2d1ba28dbef2430c042ad1b887a",
					"commitAuthor": "Sam Brannen",
					"commitDateOld": "2016-01-01, 10:57 AM",
					"commitNameOld": "a6e3e77eeb01b8e6fdc91be3120c6d07af1b5a91",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 2.11,
					"commitsBetweenForRepo": 60,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,11 +1,12 @@\n-\tprivate RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n+\tprivate RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n \t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n-\t\t\tLOG.info(\"Discovering tests in engine \" + testEngine.getId());\n+\t\t\tLOG.info(() -> String.format(\"Discovering tests during launcher %s phase in engine %s.\", phase,\n+\t\t\t\ttestEngine.getId()));\n \t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(specification);\n \t\t\troot.addChild(engineRoot);\n \t\t}\n \t\troot.applyFilters(specification);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"e56fcfc20e3c100cf9e4ed4b142a6a3863c29353": {
			"type": "Ybodychange",
			"commitMessage": "RootTestDescriptor is parent of EngineDescriptors\n\nFixes the tree of TestDescriptors and filtering/pruning.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-18, 7:59 AM",
			"commitName": "e56fcfc20e3c100cf9e4ed4b142a6a3863c29353",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-18, 7:58 AM",
			"commitNameOld": "9f7d082872c4b4109729a3a480f1dedad3083bad",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,11 @@\n \tprivate RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n \t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n \t\t\tLOG.info(\"Discovering tests in engine \" + testEngine.getId());\n-\t\t\tTestDescriptor engineRoot = testEngine.discoverTests(specification);\n-\t\t\troot.addTestDescriptorForEngine(testEngine, engineRoot);\n+\t\t\tEngineAwareTestDescriptor engineRoot = testEngine.discoverTests(specification);\n+\t\t\troot.addChild(engineRoot);\n \t\t}\n \t\troot.applyFilters(specification);\n \t\troot.prune();\n \t\treturn root;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"830b6d5976b6db01dad3866cfb3d54c6216b1252": {
			"type": "Ymultichange(Yrename,Yreturntypechange,Ymodifierchange,Ybodychange)",
			"commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
			"commitDate": "2015-12-08, 2:18 AM",
			"commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
			"commitAuthor": "Marc Philipp",
			"subchanges": [
				{
					"type": "Yrename",
					"commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
					"commitDate": "2015-12-08, 2:18 AM",
					"commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-06, 4:30 AM",
					"commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 1.91,
					"commitsBetweenForRepo": 11,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,11 +1,11 @@\n-\tpublic TestPlan discover(TestPlanSpecification specification) {\n-\t\tTestPlan testPlan = new TestPlan();\n+\tprivate RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n+\t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n \t\t\tLOG.info(\"Discovering tests in engine \" + testEngine.getId());\n-\t\t\tTestDescriptor rootTestDescriptor = testEngine.discoverTests(specification);\n-\t\t\ttestPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n+\t\t\tTestDescriptor engineRoot = testEngine.discoverTests(specification);\n+\t\t\troot.addTestDescriptorForEngine(testEngine, engineRoot);\n \t\t}\n-\t\ttestPlan.applyFilters(specification);\n-\t\ttestPlan.prune();\n-\t\treturn testPlan;\n+\t\troot.applyFilters(specification);\n+\t\troot.prune();\n+\t\treturn root;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "discover",
						"newValue": "discoverRootDescriptor"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
					"commitDate": "2015-12-08, 2:18 AM",
					"commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-06, 4:30 AM",
					"commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 1.91,
					"commitsBetweenForRepo": 11,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,11 +1,11 @@\n-\tpublic TestPlan discover(TestPlanSpecification specification) {\n-\t\tTestPlan testPlan = new TestPlan();\n+\tprivate RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n+\t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n \t\t\tLOG.info(\"Discovering tests in engine \" + testEngine.getId());\n-\t\t\tTestDescriptor rootTestDescriptor = testEngine.discoverTests(specification);\n-\t\t\ttestPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n+\t\t\tTestDescriptor engineRoot = testEngine.discoverTests(specification);\n+\t\t\troot.addTestDescriptorForEngine(testEngine, engineRoot);\n \t\t}\n-\t\ttestPlan.applyFilters(specification);\n-\t\ttestPlan.prune();\n-\t\treturn testPlan;\n+\t\troot.applyFilters(specification);\n+\t\troot.prune();\n+\t\treturn root;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "TestPlan",
						"newValue": "RootTestDescriptor"
					}
				},
				{
					"type": "Ymodifierchange",
					"commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
					"commitDate": "2015-12-08, 2:18 AM",
					"commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-06, 4:30 AM",
					"commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 1.91,
					"commitsBetweenForRepo": 11,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,11 +1,11 @@\n-\tpublic TestPlan discover(TestPlanSpecification specification) {\n-\t\tTestPlan testPlan = new TestPlan();\n+\tprivate RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n+\t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n \t\t\tLOG.info(\"Discovering tests in engine \" + testEngine.getId());\n-\t\t\tTestDescriptor rootTestDescriptor = testEngine.discoverTests(specification);\n-\t\t\ttestPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n+\t\t\tTestDescriptor engineRoot = testEngine.discoverTests(specification);\n+\t\t\troot.addTestDescriptorForEngine(testEngine, engineRoot);\n \t\t}\n-\t\ttestPlan.applyFilters(specification);\n-\t\ttestPlan.prune();\n-\t\treturn testPlan;\n+\t\troot.applyFilters(specification);\n+\t\troot.prune();\n+\t\treturn root;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[public]",
						"newValue": "[private]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
					"commitDate": "2015-12-08, 2:18 AM",
					"commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-06, 4:30 AM",
					"commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 1.91,
					"commitsBetweenForRepo": 11,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,11 +1,11 @@\n-\tpublic TestPlan discover(TestPlanSpecification specification) {\n-\t\tTestPlan testPlan = new TestPlan();\n+\tprivate RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n+\t\tRootTestDescriptor root = new RootTestDescriptor();\n \t\tfor (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n \t\t\tLOG.info(\"Discovering tests in engine \" + testEngine.getId());\n-\t\t\tTestDescriptor rootTestDescriptor = testEngine.discoverTests(specification);\n-\t\t\ttestPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n+\t\t\tTestDescriptor engineRoot = testEngine.discoverTests(specification);\n+\t\t\troot.addTestDescriptorForEngine(testEngine, engineRoot);\n \t\t}\n-\t\ttestPlan.applyFilters(specification);\n-\t\ttestPlan.prune();\n-\t\treturn testPlan;\n+\t\troot.applyFilters(specification);\n+\t\troot.prune();\n+\t\treturn root;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"7dc017fd9255ba302736d9ad1ce778f93e77b573": {
			"type": "Ybodychange",
			"commitMessage": "#49: Test ExecuteTestsTask with DummyTestEngine\n",
			"commitDate": "2015-12-06, 4:30 AM",
			"commitName": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-03, 4:58 AM",
			"commitNameOld": "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8",
			"commitAuthorOld": "Stefan Bechtold",
			"daysBetweenCommits": 2.98,
			"commitsBetweenForRepo": 38,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,11 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n-\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n+\t\tfor (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n \t\t\tLOG.info(\"Discovering tests in engine \" + testEngine.getId());\n \t\t\tTestDescriptor rootTestDescriptor = testEngine.discoverTests(specification);\n \t\t\ttestPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n \t\t}\n \t\ttestPlan.applyFilters(specification);\n \t\ttestPlan.prune();\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8": {
			"type": "Ybodychange",
			"commitMessage": "#29: Refactored the TestEngine API\n- discoveryTests now returns the root testDescriptor and does not take and EngineDescriptor as argument\n- TestPlan holds a mapping for the engines and their corresponding root test descriptor\n",
			"commitDate": "2015-12-03, 4:58 AM",
			"commitName": "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8",
			"commitAuthor": "Stefan Bechtold",
			"commitDateOld": "2015-12-03, 2:42 AM",
			"commitNameOld": "59a0a13262b73c398c05376448aad97e7582384d",
			"commitAuthorOld": "JUnit Team",
			"daysBetweenCommits": 0.09,
			"commitsBetweenForRepo": 7,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,11 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\tLOG.info(\"Discovering tests in engine \" + testEngine.getId());\n-\t\t\tEngineDescriptor engineDescriptor = new EngineDescriptor(testEngine);\n-\t\t\ttestEngine.discoverTests(specification, engineDescriptor);\n-\t\t\ttestPlan.addEngineDescriptor(engineDescriptor);\n+\t\t\tTestDescriptor rootTestDescriptor = testEngine.discoverTests(specification);\n+\t\t\ttestPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n \t\t}\n \t\ttestPlan.applyFilters(specification);\n \t\ttestPlan.prune();\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"849e9afba14e3ea2639dfc985b0fd515a991639a": {
			"type": "Ybodychange",
			"commitMessage": "Fix typo\n",
			"commitDate": "2015-11-22, 2:02 PM",
			"commitName": "849e9afba14e3ea2639dfc985b0fd515a991639a",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2015-11-22, 1:22 PM",
			"commitNameOld": "a6a549c084132d2d1c2d7d46a26b47e48cb4f608",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n-\t\t\tLOG.info(\"Discovering tests in enginge \" + testEngine.getId());\n+\t\t\tLOG.info(\"Discovering tests in engine \" + testEngine.getId());\n \t\t\tEngineDescriptor engineDescriptor = new EngineDescriptor(testEngine);\n \t\t\ttestEngine.discoverTests(specification, engineDescriptor);\n \t\t\ttestPlan.addEngineDescriptor(engineDescriptor);\n \t\t}\n \t\ttestPlan.applyFilters(specification);\n \t\ttestPlan.prune();\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a6a549c084132d2d1c2d7d46a26b47e48cb4f608": {
			"type": "Ybodychange",
			"commitMessage": "Introducing logging in Launcher\n",
			"commitDate": "2015-11-22, 1:22 PM",
			"commitName": "a6a549c084132d2d1c2d7d46a26b47e48cb4f608",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-11-22, 12:58 PM",
			"commitNameOld": "5bb440e06279fd20c98ea617c245141307390274",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,12 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n+\t\t\tLOG.info(\"Discovering tests in enginge \" + testEngine.getId());\n \t\t\tEngineDescriptor engineDescriptor = new EngineDescriptor(testEngine);\n \t\t\ttestEngine.discoverTests(specification, engineDescriptor);\n \t\t\ttestPlan.addEngineDescriptor(engineDescriptor);\n \t\t}\n \t\ttestPlan.applyFilters(specification);\n \t\ttestPlan.prune();\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"49ae3709bdf93aa8c83f5d11476b9c301eb4fc7f": {
			"type": "Ybodychange",
			"commitMessage": "Everything works again. Resolver is still more complicated than necessary.\n",
			"commitDate": "2015-11-09, 6:50 AM",
			"commitName": "49ae3709bdf93aa8c83f5d11476b9c301eb4fc7f",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-11-09, 3:11 AM",
			"commitNameOld": "4a34c1bc27a7ad936639a83ad7e34f89add92c4c",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 0.15,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,11 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\tEngineDescriptor engineDescriptor = new EngineDescriptor(testEngine);\n \t\t\ttestEngine.discoverTests(specification, engineDescriptor);\n-\t\t\tapplyFiltersToEngineDescriptor(specification, engineDescriptor);\n-\t\t\tpruneEngineDescriptor(engineDescriptor);\n \t\t\ttestPlan.addEngineDescriptor(engineDescriptor);\n \t\t}\n+\t\ttestPlan.applyFilters(specification);\n+\t\ttestPlan.prune();\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"4a34c1bc27a7ad936639a83ad7e34f89add92c4c": {
			"type": "Ybodychange",
			"commitMessage": "changed TestEngine interface to only use engineDescriptor.addChild an no more return values.\ncompiles, but lots of tests failing\n",
			"commitDate": "2015-11-09, 3:11 AM",
			"commitName": "4a34c1bc27a7ad936639a83ad7e34f89add92c4c",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-11-08, 1:46 AM",
			"commitNameOld": "1105bef6877be1c036331d5b6d607d5e16c7463b",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 1.06,
			"commitsBetweenForRepo": 7,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,14 +1,11 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\tEngineDescriptor engineDescriptor = new EngineDescriptor(testEngine);\n-\t\t\tCollection<TestDescriptor> testDescriptors = testEngine.discoverTests(specification, engineDescriptor);\n-\t\t\tif (!testDescriptors.isEmpty()) {\n-\t\t\t\tSet<TestDescriptor> descriptorCandidates = findFilteredCandidates(specification, testDescriptors);\n-\t\t\t\tdescriptorCandidates.add(engineDescriptor);\n-\t\t\t\tSet<TestDescriptor> prunedDescriptors = pruneAllWithoutConcreteTests(descriptorCandidates);\n-\t\t\t\ttestPlan.addTestDescriptors(prunedDescriptors);\n-\t\t\t}\n+\t\t\ttestEngine.discoverTests(specification, engineDescriptor);\n+\t\t\tapplyFiltersToEngineDescriptor(specification, engineDescriptor);\n+\t\t\tpruneEngineDescriptor(engineDescriptor);\n+\t\t\ttestPlan.addEngineDescriptor(engineDescriptor);\n \t\t}\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"1105bef6877be1c036331d5b6d607d5e16c7463b": {
			"type": "Ybodychange",
			"commitMessage": "Added lost registration of engineDescriptor after filtering\n",
			"commitDate": "2015-11-08, 1:46 AM",
			"commitName": "1105bef6877be1c036331d5b6d607d5e16c7463b",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-11-07, 10:31 PM",
			"commitNameOld": "e1184f5a171d084f33ddca961836b17dabc63165",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 0.14,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,14 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\tEngineDescriptor engineDescriptor = new EngineDescriptor(testEngine);\n \t\t\tCollection<TestDescriptor> testDescriptors = testEngine.discoverTests(specification, engineDescriptor);\n \t\t\tif (!testDescriptors.isEmpty()) {\n \t\t\t\tSet<TestDescriptor> descriptorCandidates = findFilteredCandidates(specification, testDescriptors);\n+\t\t\t\tdescriptorCandidates.add(engineDescriptor);\n \t\t\t\tSet<TestDescriptor> prunedDescriptors = pruneAllWithoutConcreteTests(descriptorCandidates);\n \t\t\t\ttestPlan.addTestDescriptors(prunedDescriptors);\n \t\t\t}\n \t\t}\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"e1184f5a171d084f33ddca961836b17dabc63165": {
			"type": "Ybodychange",
			"commitMessage": "Fixed tree build in JUnit5\n",
			"commitDate": "2015-11-07, 10:31 PM",
			"commitName": "e1184f5a171d084f33ddca961836b17dabc63165",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-11-07, 1:58 PM",
			"commitNameOld": "cecc46dfd9b0dd931bc8625560cdcd9bced45753",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 0.36,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,13 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\tEngineDescriptor engineDescriptor = new EngineDescriptor(testEngine);\n \t\t\tCollection<TestDescriptor> testDescriptors = testEngine.discoverTests(specification, engineDescriptor);\n \t\t\tif (!testDescriptors.isEmpty()) {\n \t\t\t\tSet<TestDescriptor> descriptorCandidates = findFilteredCandidates(specification, testDescriptors);\n-\t\t\t\tSet<TestDescriptor> descriptorsWithConcreteTests = filterWithoutConcreteTests(descriptorCandidates);\n-\t\t\t\ttestPlan.addTestDescriptors(descriptorsWithConcreteTests);\n+\t\t\t\tSet<TestDescriptor> prunedDescriptors = pruneAllWithoutConcreteTests(descriptorCandidates);\n+\t\t\t\ttestPlan.addTestDescriptors(prunedDescriptors);\n \t\t\t}\n \t\t}\n-\t\t//\t\tSystem.out.println(testPlan.getTestDescriptors().size());\n-\t\t//\t\ttestPlan.getTestDescriptors().forEach(\n-\t\t//\t\t\t\tdescriptor -> {\n-\t\t//\t\t\t\t\tSystem.out.println(descriptor.getUniqueId());\n-\t\t//\t\t\t\t}\n-\t\t//\t\t);\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"cecc46dfd9b0dd931bc8625560cdcd9bced45753": {
			"type": "Ybodychange",
			"commitMessage": "tag filtering basically works. still some strange reporting in IntelliJ test runner.\n",
			"commitDate": "2015-11-07, 1:58 PM",
			"commitName": "cecc46dfd9b0dd931bc8625560cdcd9bced45753",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-11-04, 7:28 AM",
			"commitNameOld": "a150c7c86dcb16500114a601f76f476c06b0a782",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 3.27,
			"commitsBetweenForRepo": 49,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,19 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\tEngineDescriptor engineDescriptor = new EngineDescriptor(testEngine);\n \t\t\tCollection<TestDescriptor> testDescriptors = testEngine.discoverTests(specification, engineDescriptor);\n \t\t\tif (!testDescriptors.isEmpty()) {\n-\t\t\t\ttestPlan.addTestDescriptor(engineDescriptor);\n-\t\t\t\ttestPlan.addTestDescriptors(testDescriptors);\n+\t\t\t\tSet<TestDescriptor> descriptorCandidates = findFilteredCandidates(specification, testDescriptors);\n+\t\t\t\tSet<TestDescriptor> descriptorsWithConcreteTests = filterWithoutConcreteTests(descriptorCandidates);\n+\t\t\t\ttestPlan.addTestDescriptors(descriptorsWithConcreteTests);\n \t\t\t}\n \t\t}\n+\t\t//\t\tSystem.out.println(testPlan.getTestDescriptors().size());\n+\t\t//\t\ttestPlan.getTestDescriptors().forEach(\n+\t\t//\t\t\t\tdescriptor -> {\n+\t\t//\t\t\t\t\tSystem.out.println(descriptor.getUniqueId());\n+\t\t//\t\t\t\t}\n+\t\t//\t\t);\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a150c7c86dcb16500114a601f76f476c06b0a782": {
			"type": "Ybodychange",
			"commitMessage": "resolver can resolve nested classes\n",
			"commitDate": "2015-11-04, 7:28 AM",
			"commitName": "a150c7c86dcb16500114a601f76f476c06b0a782",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-11-03, 1:46 AM",
			"commitNameOld": "0e097640972835e71a625cdee7a9359089cbec78",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 1.24,
			"commitsBetweenForRepo": 24,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n-\t\t\tTestDescriptor engineDescriptor = new EngineDescriptor(testEngine);\n+\t\t\tEngineDescriptor engineDescriptor = new EngineDescriptor(testEngine);\n \t\t\tCollection<TestDescriptor> testDescriptors = testEngine.discoverTests(specification, engineDescriptor);\n \t\t\tif (!testDescriptors.isEmpty()) {\n \t\t\t\ttestPlan.addTestDescriptor(engineDescriptor);\n \t\t\t\ttestPlan.addTestDescriptors(testDescriptors);\n \t\t\t}\n \t\t}\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0e097640972835e71a625cdee7a9359089cbec78": {
			"type": "Ybodychange",
			"commitMessage": "Only add TestDescriptor for engine if non-empty\n\nEmpty Engine nodes confuse Eclipse so much, it\nnever finishes its progress bar.\n",
			"commitDate": "2015-11-03, 1:46 AM",
			"commitName": "0e097640972835e71a625cdee7a9359089cbec78",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-10-31, 4:28 AM",
			"commitNameOld": "623ccd4a73d487ec55e24f8415597910626fd90d",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 2.93,
			"commitsBetweenForRepo": 31,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,9 +1,12 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\tTestDescriptor engineDescriptor = new EngineDescriptor(testEngine);\n-\t\t\ttestPlan.addTestDescriptor(engineDescriptor);\n-\t\t\ttestPlan.addTestDescriptors(testEngine.discoverTests(specification, engineDescriptor));\n+\t\t\tCollection<TestDescriptor> testDescriptors = testEngine.discoverTests(specification, engineDescriptor);\n+\t\t\tif (!testDescriptors.isEmpty()) {\n+\t\t\t\ttestPlan.addTestDescriptor(engineDescriptor);\n+\t\t\t\ttestPlan.addTestDescriptors(testDescriptors);\n+\t\t\t}\n \t\t}\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"623ccd4a73d487ec55e24f8415597910626fd90d": {
			"type": "Ybodychange",
			"commitMessage": "Reintroduced engine descriptor for all engines to enable test runners separation by engine w/o disecting the unique ID\n",
			"commitDate": "2015-10-31, 4:28 AM",
			"commitName": "623ccd4a73d487ec55e24f8415597910626fd90d",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-10-30, 1:41 PM",
			"commitNameOld": "90557f5414831ca924bca50c1591dd348c1c7162",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.62,
			"commitsBetweenForRepo": 8,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,7 +1,9 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n-\t\t\ttestPlan.addTestDescriptors(testEngine.discoverTests(specification));\n+\t\t\tTestDescriptor engineDescriptor = new EngineDescriptor(testEngine);\n+\t\t\ttestPlan.addTestDescriptor(engineDescriptor);\n+\t\t\ttestPlan.addTestDescriptors(testEngine.discoverTests(specification, engineDescriptor));\n \t\t}\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9d0819e13f70c9385836259aabb8077b5240fb2c": {
			"type": "Ybodychange",
			"commitMessage": "Introduced TestExecutionNode for each TestDescriptor\n",
			"commitDate": "2015-10-30, 8:12 AM",
			"commitName": "9d0819e13f70c9385836259aabb8077b5240fb2c",
			"commitAuthor": "Stefan Bechtold",
			"commitDateOld": "2015-10-30, 3:08 AM",
			"commitNameOld": "5b99f734253c15189a88cd5704ec30ded2f24694",
			"commitAuthorOld": "Stefan Bechtold",
			"daysBetweenCommits": 0.21,
			"commitsBetweenForRepo": 17,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,9 +1,7 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n-\t\t\tTestDescriptor engineDescriptor = testEngine.createEngineDescriptor();\n-\t\t\ttestPlan.addTestDescriptor(engineDescriptor);\n-\t\t\ttestPlan.addTestDescriptors(testEngine.discoverTests(specification, engineDescriptor));\n+\t\t\ttestPlan.addTestDescriptors(testEngine.discoverTests(specification));\n \t\t}\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"2faf053a85fd24cb6f65e7b1258d7c507587866c": {
			"type": "Ybodychange",
			"commitMessage": "Rename methods to be more specific\n",
			"commitDate": "2015-10-30, 2:54 AM",
			"commitName": "2faf053a85fd24cb6f65e7b1258d7c507587866c",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-10-30, 2:34 AM",
			"commitNameOld": "b9a89c31681f519fcbe2c0ec5ce474f97aec5240",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,9 +1,9 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\tTestDescriptor engineDescriptor = testEngine.createEngineDescriptor();\n-\t\t\ttestPlan.addTest(engineDescriptor);\n-\t\t\ttestPlan.addTests(testEngine.discoverTests(specification, engineDescriptor));\n+\t\t\ttestPlan.addTestDescriptor(engineDescriptor);\n+\t\t\ttestPlan.addTestDescriptors(testEngine.discoverTests(specification, engineDescriptor));\n \t\t}\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"8edbcf80166518746080a12cecfddc04f2577351": {
			"type": "Ybodychange",
			"commitMessage": "Introduced EngineDescriptor as root for all test descriptors\n",
			"commitDate": "2015-10-29, 8:10 AM",
			"commitName": "8edbcf80166518746080a12cecfddc04f2577351",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-10-29, 6:23 AM",
			"commitNameOld": "487bbff85f6651921a4c4a3520a9e315b0f2b381",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.07,
			"commitsBetweenForRepo": 7,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,7 +1,9 @@\n \tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n-\t\t\ttestPlan.addTests(testEngine.discoverTests(specification));\n+\t\t\tTestDescriptor engineDescriptor = testEngine.createEngineDescriptor();\n+\t\t\ttestPlan.addTest(engineDescriptor);\n+\t\t\ttestPlan.addTests(testEngine.discoverTests(specification, engineDescriptor));\n \t\t}\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"cdaf66815c7308c9d5a430f08c7bc0d790a80534": {
			"type": "Yrename",
			"commitMessage": "Launcher API umgebaut\n",
			"commitDate": "2015-10-28, 6:24 AM",
			"commitName": "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-10-28, 4:12 AM",
			"commitNameOld": "62a0ab3e60e4a1c62c806934158444f901d8e22c",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.09,
			"commitsBetweenForRepo": 6,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,7 +1,7 @@\n-\tpublic TestPlan createTestPlanWithConfiguration(TestPlanSpecification specification) {\n+\tpublic TestPlan discover(TestPlanSpecification specification) {\n \t\tTestPlan testPlan = new TestPlan();\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\ttestPlan.addTests(testEngine.discoverTests(specification));\n \t\t}\n \t\treturn testPlan;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "createTestPlanWithConfiguration",
				"newValue": "discover"
			}
		},
		"2e1ad2e7fc7fbc71b12027f9777bbbd2a7a8667a": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Rename TestPlanConfiguration to TestPlanSpecification\n",
			"commitDate": "2015-10-28, 3:19 AM",
			"commitName": "2e1ad2e7fc7fbc71b12027f9777bbbd2a7a8667a",
			"commitAuthor": "Marc Philipp",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Rename TestPlanConfiguration to TestPlanSpecification\n",
					"commitDate": "2015-10-28, 3:19 AM",
					"commitName": "2e1ad2e7fc7fbc71b12027f9777bbbd2a7a8667a",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-10-28, 2:23 AM",
					"commitNameOld": "db7c029008a0fab7fb6770078c1b54a175c35c6c",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.04,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,7 +1,7 @@\n-  public TestPlan createTestPlanWithConfiguration(TestPlanConfiguration configuration) {\n+  public TestPlan createTestPlanWithConfiguration(TestPlanSpecification specification) {\n     TestPlan testPlan = new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-      testPlan.addTests(testEngine.discoverTests(configuration));\n+      testPlan.addTests(testEngine.discoverTests(specification));\n     }\n     return testPlan;\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[configuration-TestPlanConfiguration]",
						"newValue": "[specification-TestPlanSpecification]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Rename TestPlanConfiguration to TestPlanSpecification\n",
					"commitDate": "2015-10-28, 3:19 AM",
					"commitName": "2e1ad2e7fc7fbc71b12027f9777bbbd2a7a8667a",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-10-28, 2:23 AM",
					"commitNameOld": "db7c029008a0fab7fb6770078c1b54a175c35c6c",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.04,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,7 +1,7 @@\n-  public TestPlan createTestPlanWithConfiguration(TestPlanConfiguration configuration) {\n+  public TestPlan createTestPlanWithConfiguration(TestPlanSpecification specification) {\n     TestPlan testPlan = new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-      testPlan.addTests(testEngine.discoverTests(configuration));\n+      testPlan.addTests(testEngine.discoverTests(specification));\n     }\n     return testPlan;\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"cbf97077bae0db71dc3a7cade28c3b00587a8699": {
			"type": "Yintroduced",
			"commitMessage": "Refactoring to focus implementation of the JUnit framework internals:\n- Removed serializable objects for inter-process communication with tool-integrators\n- Supported different ways to generate test descriptors from configuration\n- Moved Console Launcher (main) to Sample Project\n- Introduced ReflectionUtils for common reflection tasks\n- Added TestListener interface with two implementations\n- Updated the Engine interface to work with TestDescriptors only\n",
			"commitDate": "2015-10-28, 2:23 AM",
			"commitName": "cbf97077bae0db71dc3a7cade28c3b00587a8699",
			"commitAuthor": "Stefan Bechtold",
			"diff": "@@ -0,0 +1,7 @@\n+  public TestPlan createTestPlanWithConfiguration(TestPlanConfiguration configuration) {\n+    TestPlan testPlan = new TestPlan();\n+    for (TestEngine testEngine : lookupAllTestEngines()) {\n+      testPlan.addTests(testEngine.discoverTests(configuration));\n+    }\n+    return testPlan;\n+  }\n\\ No newline at end of file\n"
		}
	},
	"sha": "77cfe71e7f787c59626198e25350545f41e968bd"
}