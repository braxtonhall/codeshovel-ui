{
	"repo": "https://github.com/apache/hadoop.git",
	"file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
	"method": {
		"longName": "private AggregateAppResourceUsage getRunningAggregateAppResourceUsage();",
		"startLine": 1080,
		"methodName": "getRunningAggregateAppResourceUsage",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "private"
	},
	"history": {
		"3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
			"type": "Ybodychange",
			"commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
			"commitDate": "2017-09-12, 9:19 AM",
			"commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
			"commitAuthor": "Daniel Templeton",
			"commitDateOld": "2017-09-12, 9:19 AM",
			"commitNameOld": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
			"commitAuthorOld": "Sunil G",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,25 +1,24 @@\n   private AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n     long currentTimeMillis = System.currentTimeMillis();\n     // Don't walk the whole container list if the resources were computed\n     // recently.\n     if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime)\n         > MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n       Map<String, Long> resourceSecondsMap = new HashMap<>();\n       for (RMContainer rmContainer : this.liveContainers.values()) {\n         long usedMillis = currentTimeMillis - rmContainer.getCreationTime();\n         Resource resource = rmContainer.getContainer().getResource();\n-        for (Map.Entry<String, ResourceInformation> entry : resource\n-            .getResources().entrySet()) {\n+        for (ResourceInformation entry : resource.getResources()) {\n           long value = RMServerUtils\n-              .getOrDefault(resourceSecondsMap, entry.getKey(), 0L);\n-          value += entry.getValue().getValue() * usedMillis\n+              .getOrDefault(resourceSecondsMap, entry.getName(), 0L);\n+          value += entry.getValue() * usedMillis\n               / DateUtils.MILLIS_PER_SECOND;\n-          resourceSecondsMap.put(entry.getKey(), value);\n+          resourceSecondsMap.put(entry.getName(), value);\n         }\n       }\n \n       lastMemoryAggregateAllocationUpdateTime = currentTimeMillis;\n       lastResourceSecondsMap = resourceSecondsMap;\n     }\n     return new AggregateAppResourceUsage(lastResourceSecondsMap);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"dae65f3bef8ffa34d02a37041f1dfdfeeee91845": {
			"type": "Ybodychange",
			"commitMessage": "YARN-6232. Update resource usage and preempted resource calculations to take into account all resource types. Contributed by Varun Vasudev.\n",
			"commitDate": "2017-09-12, 9:19 AM",
			"commitName": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
			"commitAuthor": "Sunil G",
			"commitDateOld": "2017-09-11, 8:52 PM",
			"commitNameOld": "e74d1be04be47969943b0501a4f335b0b5188287",
			"commitAuthorOld": "Wangda Tan",
			"daysBetweenCommits": 0.52,
			"commitsBetweenForRepo": 12,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,23 +1,25 @@\n   private AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n     long currentTimeMillis = System.currentTimeMillis();\n     // Don't walk the whole container list if the resources were computed\n     // recently.\n     if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime)\n         > MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n-      long memorySeconds = 0;\n-      long vcoreSeconds = 0;\n+      Map<String, Long> resourceSecondsMap = new HashMap<>();\n       for (RMContainer rmContainer : this.liveContainers.values()) {\n         long usedMillis = currentTimeMillis - rmContainer.getCreationTime();\n         Resource resource = rmContainer.getContainer().getResource();\n-        memorySeconds += resource.getMemorySize() * usedMillis /\n-            DateUtils.MILLIS_PER_SECOND;\n-        vcoreSeconds += resource.getVirtualCores() * usedMillis  \n-            / DateUtils.MILLIS_PER_SECOND;\n+        for (Map.Entry<String, ResourceInformation> entry : resource\n+            .getResources().entrySet()) {\n+          long value = RMServerUtils\n+              .getOrDefault(resourceSecondsMap, entry.getKey(), 0L);\n+          value += entry.getValue().getValue() * usedMillis\n+              / DateUtils.MILLIS_PER_SECOND;\n+          resourceSecondsMap.put(entry.getKey(), value);\n+        }\n       }\n \n       lastMemoryAggregateAllocationUpdateTime = currentTimeMillis;\n-      lastMemorySeconds = memorySeconds;\n-      lastVcoreSeconds = vcoreSeconds;\n+      lastResourceSecondsMap = resourceSecondsMap;\n     }\n-    return new AggregateAppResourceUsage(lastMemorySeconds, lastVcoreSeconds);\n+    return new AggregateAppResourceUsage(lastResourceSecondsMap);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
			"type": "Ymodifierchange",
			"commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
			"commitDate": "2016-09-19, 2:08 AM",
			"commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
			"commitAuthor": "Jian He",
			"commitDateOld": "2016-08-30, 3:52 PM",
			"commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
			"commitAuthorOld": "Arun Suresh",
			"daysBetweenCommits": 19.43,
			"commitsBetweenForRepo": 91,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,23 +1,23 @@\n-  synchronized AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n+  private AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n     long currentTimeMillis = System.currentTimeMillis();\n     // Don't walk the whole container list if the resources were computed\n     // recently.\n     if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime)\n         > MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n       long memorySeconds = 0;\n       long vcoreSeconds = 0;\n       for (RMContainer rmContainer : this.liveContainers.values()) {\n         long usedMillis = currentTimeMillis - rmContainer.getCreationTime();\n         Resource resource = rmContainer.getContainer().getResource();\n         memorySeconds += resource.getMemorySize() * usedMillis /\n             DateUtils.MILLIS_PER_SECOND;\n         vcoreSeconds += resource.getVirtualCores() * usedMillis  \n             / DateUtils.MILLIS_PER_SECOND;\n       }\n \n       lastMemoryAggregateAllocationUpdateTime = currentTimeMillis;\n       lastMemorySeconds = memorySeconds;\n       lastVcoreSeconds = vcoreSeconds;\n     }\n     return new AggregateAppResourceUsage(lastMemorySeconds, lastVcoreSeconds);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[synchronized]",
				"newValue": "[private]"
			}
		},
		"42f90ab885d9693fcc1e52f9637f7de4111110ae": {
			"type": "Ybodychange",
			"commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
			"commitDate": "2016-05-29, 8:54 AM",
			"commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
			"commitAuthor": "Varun Vasudev",
			"commitDateOld": "2016-05-05, 12:56 PM",
			"commitNameOld": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
			"commitAuthorOld": "Jian He",
			"daysBetweenCommits": 23.83,
			"commitsBetweenForRepo": 173,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,23 +1,23 @@\n   synchronized AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n     long currentTimeMillis = System.currentTimeMillis();\n     // Don't walk the whole container list if the resources were computed\n     // recently.\n     if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime)\n         > MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n       long memorySeconds = 0;\n       long vcoreSeconds = 0;\n       for (RMContainer rmContainer : this.liveContainers.values()) {\n         long usedMillis = currentTimeMillis - rmContainer.getCreationTime();\n         Resource resource = rmContainer.getContainer().getResource();\n-        memorySeconds += resource.getMemory() * usedMillis /  \n+        memorySeconds += resource.getMemorySize() * usedMillis /\n             DateUtils.MILLIS_PER_SECOND;\n         vcoreSeconds += resource.getVirtualCores() * usedMillis  \n             / DateUtils.MILLIS_PER_SECOND;\n       }\n \n       lastMemoryAggregateAllocationUpdateTime = currentTimeMillis;\n       lastMemorySeconds = memorySeconds;\n       lastVcoreSeconds = vcoreSeconds;\n     }\n     return new AggregateAppResourceUsage(lastMemorySeconds, lastVcoreSeconds);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
			"type": "Yintroduced",
			"commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne & Andrey Klochkov\n",
			"commitDate": "2014-09-10, 6:20 PM",
			"commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
			"commitAuthor": "Jian He",
			"diff": "@@ -0,0 +1,23 @@\n+  synchronized AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n+    long currentTimeMillis = System.currentTimeMillis();\n+    // Don't walk the whole container list if the resources were computed\n+    // recently.\n+    if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime)\n+        > MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n+      long memorySeconds = 0;\n+      long vcoreSeconds = 0;\n+      for (RMContainer rmContainer : this.liveContainers.values()) {\n+        long usedMillis = currentTimeMillis - rmContainer.getCreationTime();\n+        Resource resource = rmContainer.getContainer().getResource();\n+        memorySeconds += resource.getMemory() * usedMillis /  \n+            DateUtils.MILLIS_PER_SECOND;\n+        vcoreSeconds += resource.getVirtualCores() * usedMillis  \n+            / DateUtils.MILLIS_PER_SECOND;\n+      }\n+\n+      lastMemoryAggregateAllocationUpdateTime = currentTimeMillis;\n+      lastMemorySeconds = memorySeconds;\n+      lastVcoreSeconds = vcoreSeconds;\n+    }\n+    return new AggregateAppResourceUsage(lastMemorySeconds, lastVcoreSeconds);\n+  }\n\\ No newline at end of file\n"
		}
	},
	"sha": "9c3fc3ef2865164aa5f121793ac914cfeb21a181"
}