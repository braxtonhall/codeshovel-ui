{
	"repo": "https://github.com/junit-team/junit4.git",
	"file": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
	"method": {
		"longName": "BlockJUnit4ClassRunner::methodBlock(FrameworkMethod method)",
		"startLine": 303,
		"methodName": "methodBlock",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "protected"
	},
	"history": {
		"bd5b90f75908b7a3ed074a7be29823170f008fb4": {
			"type": "Ymultichange(Ybodychange,Yparametermetachange)",
			"commitMessage": "Add BlockJUnit4ClassRunner#createTest(method)\n\nThis allows extensions of BlockJUnit4ClassRunner to provide a custom instance of the test for each FrameworkMethod invocation.\n\nTwo tests show that:\n\n1. createTest(FrameworkMethod) can be overridden successfully\n2. createTest() is called by default by createTest(FrameworkMethod)\n\nFixes #1036. Closes #1037.\n",
			"commitDate": "2014-12-07, 7:18 AM",
			"commitName": "bd5b90f75908b7a3ed074a7be29823170f008fb4",
			"commitAuthor": "Peter Wright",
			"subchanges": [
				{
					"type": "Ybodychange",
					"commitMessage": "Add BlockJUnit4ClassRunner#createTest(method)\n\nThis allows extensions of BlockJUnit4ClassRunner to provide a custom instance of the test for each FrameworkMethod invocation.\n\nTwo tests show that:\n\n1. createTest(FrameworkMethod) can be overridden successfully\n2. createTest() is called by default by createTest(FrameworkMethod)\n\nFixes #1036. Closes #1037.\n",
					"commitDate": "2014-12-07, 7:18 AM",
					"commitName": "bd5b90f75908b7a3ed074a7be29823170f008fb4",
					"commitAuthor": "Peter Wright",
					"commitDateOld": "2014-11-02, 1:06 AM",
					"commitNameOld": "99b0ebc70e061d7620179f4e72e735e3944e54cd",
					"commitAuthorOld": "Narendra Pathai",
					"daysBetweenCommits": 35.26,
					"commitsBetweenForRepo": 23,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,21 +1,21 @@\n-    protected Statement methodBlock(FrameworkMethod method) {\n+    protected Statement methodBlock(final FrameworkMethod method) {\n         Object test;\n         try {\n             test = new ReflectiveCallable() {\n                 @Override\n                 protected Object runReflectiveCall() throws Throwable {\n-                    return createTest();\n+                    return createTest(method);\n                 }\n             }.run();\n         } catch (Throwable e) {\n             return new Fail(e);\n         }\n \n         Statement statement = methodInvoker(method, test);\n         statement = possiblyExpectingExceptions(method, test, statement);\n         statement = withPotentialTimeout(method, test, statement);\n         statement = withBefores(method, test, statement);\n         statement = withAfters(method, test, statement);\n         statement = withRules(method, test, statement);\n         return statement;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				},
				{
					"type": "Yparametermetachange",
					"commitMessage": "Add BlockJUnit4ClassRunner#createTest(method)\n\nThis allows extensions of BlockJUnit4ClassRunner to provide a custom instance of the test for each FrameworkMethod invocation.\n\nTwo tests show that:\n\n1. createTest(FrameworkMethod) can be overridden successfully\n2. createTest() is called by default by createTest(FrameworkMethod)\n\nFixes #1036. Closes #1037.\n",
					"commitDate": "2014-12-07, 7:18 AM",
					"commitName": "bd5b90f75908b7a3ed074a7be29823170f008fb4",
					"commitAuthor": "Peter Wright",
					"commitDateOld": "2014-11-02, 1:06 AM",
					"commitNameOld": "99b0ebc70e061d7620179f4e72e735e3944e54cd",
					"commitAuthorOld": "Narendra Pathai",
					"daysBetweenCommits": 35.26,
					"commitsBetweenForRepo": 23,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,21 +1,21 @@\n-    protected Statement methodBlock(FrameworkMethod method) {\n+    protected Statement methodBlock(final FrameworkMethod method) {\n         Object test;\n         try {\n             test = new ReflectiveCallable() {\n                 @Override\n                 protected Object runReflectiveCall() throws Throwable {\n-                    return createTest();\n+                    return createTest(method);\n                 }\n             }.run();\n         } catch (Throwable e) {\n             return new Fail(e);\n         }\n \n         Statement statement = methodInvoker(method, test);\n         statement = possiblyExpectingExceptions(method, test, statement);\n         statement = withPotentialTimeout(method, test, statement);\n         statement = withBefores(method, test, statement);\n         statement = withAfters(method, test, statement);\n         statement = withRules(method, test, statement);\n         return statement;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[method-FrameworkMethod]",
						"newValue": "[method-FrameworkMethod(modifiers-final)]"
					}
				}
			]
		},
		"86abf33f863fee1db3ba7dd8ee3e9910f105f57d": {
			"type": "Ymodifierchange",
			"commitMessage": "test for multi-level category application\n",
			"commitDate": "2010-01-21, 2:30 PM",
			"commitName": "86abf33f863fee1db3ba7dd8ee3e9910f105f57d",
			"commitAuthor": "David Saff",
			"commitDateOld": "2009-12-18, 7:05 AM",
			"commitNameOld": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
			"commitAuthorOld": "David Saff",
			"daysBetweenCommits": 34.31,
			"commitsBetweenForRepo": 12,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,21 @@\n-\tpublic Statement methodBlock(FrameworkMethod method) {\n+\tprotected Statement methodBlock(FrameworkMethod method) {\n \t\tObject test;\n \t\ttry {\n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n \n \t\tStatement statement= methodInvoker(method, test);\n \t\tstatement= possiblyExpectingExceptions(method, test, statement);\n \t\tstatement= withPotentialTimeout(method, test, statement);\n \t\tstatement= withBefores(method, test, statement);\n \t\tstatement= withAfters(method, test, statement);\n \t\tstatement= withRules(method, test, statement);\n \t\treturn statement;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[public]",
				"newValue": "[protected]"
			}
		},
		"7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f": {
			"type": "Ymodifierchange",
			"commitMessage": "Big refactor\n",
			"commitDate": "2009-12-18, 7:05 AM",
			"commitName": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
			"commitAuthor": "David Saff",
			"commitDateOld": "2009-09-22, 8:32 PM",
			"commitNameOld": "a68ae0886c1c6274943e6f99d70816d162273d9c",
			"commitAuthorOld": "KentBeck",
			"daysBetweenCommits": 86.48,
			"commitsBetweenForRepo": 19,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,21 @@\n-\tprotected Statement methodBlock(FrameworkMethod method) {\n+\tpublic Statement methodBlock(FrameworkMethod method) {\n \t\tObject test;\n \t\ttry {\n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n \n \t\tStatement statement= methodInvoker(method, test);\n \t\tstatement= possiblyExpectingExceptions(method, test, statement);\n \t\tstatement= withPotentialTimeout(method, test, statement);\n \t\tstatement= withBefores(method, test, statement);\n \t\tstatement= withAfters(method, test, statement);\n \t\tstatement= withRules(method, test, statement);\n \t\treturn statement;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[protected]",
				"newValue": "[public]"
			}
		},
		"a68ae0886c1c6274943e6f99d70816d162273d9c": {
			"type": "Ybodychange",
			"commitMessage": "Signed-off-by: KentBeck <kent@threeriversinstitute.org>\n",
			"commitDate": "2009-09-22, 8:32 PM",
			"commitName": "a68ae0886c1c6274943e6f99d70816d162273d9c",
			"commitAuthor": "KentBeck",
			"commitDateOld": "2009-07-20, 8:34 PM",
			"commitNameOld": "df85817595e97082eaf8d6c95e2c269b86afff20",
			"commitAuthorOld": "David Saff",
			"daysBetweenCommits": 64,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,21 @@\n \tprotected Statement methodBlock(FrameworkMethod method) {\n \t\tObject test;\n \t\ttry {\n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n \n \t\tStatement statement= methodInvoker(method, test);\n \t\tstatement= possiblyExpectingExceptions(method, test, statement);\n \t\tstatement= withPotentialTimeout(method, test, statement);\n-\t\tstatement= withRules(method, test, statement);\n \t\tstatement= withBefores(method, test, statement);\n \t\tstatement= withAfters(method, test, statement);\n+\t\tstatement= withRules(method, test, statement);\n \t\treturn statement;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"409a8e06c9f2ec5aa0d9db8a3d413f394c290f6d": {
			"type": "Ybodychange",
			"commitMessage": "Fixing Interceptor->Rule name changes\n",
			"commitDate": "2009-07-06, 9:50 PM",
			"commitName": "409a8e06c9f2ec5aa0d9db8a3d413f394c290f6d",
			"commitAuthor": "David Saff",
			"commitDateOld": "2009-07-06, 8:01 PM",
			"commitNameOld": "8e313a1e58a56694c0441b2fa60974fa8e1bfe31",
			"commitAuthorOld": "David Saff",
			"daysBetweenCommits": 0.08,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,21 @@\n \tprotected Statement methodBlock(FrameworkMethod method) {\n \t\tObject test;\n \t\ttry {\n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n \n \t\tStatement statement= methodInvoker(method, test);\n \t\tstatement= possiblyExpectingExceptions(method, test, statement);\n \t\tstatement= withPotentialTimeout(method, test, statement);\n-\t\tstatement= withInterceptors(method, test, statement);\n+\t\tstatement= withRules(method, test, statement);\n \t\tstatement= withBefores(method, test, statement);\n \t\tstatement= withAfters(method, test, statement);\n \t\treturn statement;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"e6769d4009db8030661815965e2e22829a4619ff": {
			"type": "Ybodychange",
			"commitMessage": "No Interceptors class, interceptors turned on by default\n",
			"commitDate": "2009-05-26, 8:55 PM",
			"commitName": "e6769d4009db8030661815965e2e22829a4619ff",
			"commitAuthor": "David Saff",
			"commitDateOld": "2009-05-11, 9:29 PM",
			"commitNameOld": "198df01b7b288e57e222a33c74f8ff98bf518d93",
			"commitAuthorOld": "David Saff",
			"daysBetweenCommits": 14.98,
			"commitsBetweenForRepo": 10,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,21 @@\n \tprotected Statement methodBlock(FrameworkMethod method) {\n \t\tObject test;\n \t\ttry {\n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n \n \t\tStatement statement= methodInvoker(method, test);\n \t\tstatement= possiblyExpectingExceptions(method, test, statement);\n \t\tstatement= withPotentialTimeout(method, test, statement);\n+\t\tstatement= withInterceptors(method, test, statement);\n \t\tstatement= withBefores(method, test, statement);\n \t\tstatement= withAfters(method, test, statement);\n \t\treturn statement;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"1fcd990f60518c941a44bae2596392021614a20b": {
			"type": "Ymultichange(Yrename,Ybodychange)",
			"commitMessage": "Javadoc and various cleanup\n",
			"commitDate": "2008-07-29, 12:55 PM",
			"commitName": "1fcd990f60518c941a44bae2596392021614a20b",
			"commitAuthor": "kbeck",
			"subchanges": [
				{
					"type": "Yrename",
					"commitMessage": "Javadoc and various cleanup\n",
					"commitDate": "2008-07-29, 12:55 PM",
					"commitName": "1fcd990f60518c941a44bae2596392021614a20b",
					"commitAuthor": "kbeck",
					"commitDateOld": "2008-07-29, 11:12 AM",
					"commitNameOld": "979e8abbe974e8847668f5887403da78a6165ebc",
					"commitAuthorOld": "dsaff",
					"daysBetweenCommits": 0.07,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,20 +1,20 @@\n-\tprotected Statement childBlock(FrameworkMethod method) {\n+\tprotected Statement methodBlock(FrameworkMethod method) {\n \t\tObject test;\n \t\ttry {\n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n \n-\t\tStatement link= invoke(method, test);\n-\t\tlink= possiblyExpectingExceptions(method, test, link);\n-\t\tlink= withPotentialTimeout(method, test, link);\n-\t\tlink= withBefores(method, test, link);\n-\t\tlink= withAfters(method, test, link);\n-\t\treturn link;\n+\t\tStatement statement= methodInvoker(method, test);\n+\t\tstatement= possiblyExpectingExceptions(method, test, statement);\n+\t\tstatement= withPotentialTimeout(method, test, statement);\n+\t\tstatement= withBefores(method, test, statement);\n+\t\tstatement= withAfters(method, test, statement);\n+\t\treturn statement;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "childBlock",
						"newValue": "methodBlock"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Javadoc and various cleanup\n",
					"commitDate": "2008-07-29, 12:55 PM",
					"commitName": "1fcd990f60518c941a44bae2596392021614a20b",
					"commitAuthor": "kbeck",
					"commitDateOld": "2008-07-29, 11:12 AM",
					"commitNameOld": "979e8abbe974e8847668f5887403da78a6165ebc",
					"commitAuthorOld": "dsaff",
					"daysBetweenCommits": 0.07,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,20 +1,20 @@\n-\tprotected Statement childBlock(FrameworkMethod method) {\n+\tprotected Statement methodBlock(FrameworkMethod method) {\n \t\tObject test;\n \t\ttry {\n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n \n-\t\tStatement link= invoke(method, test);\n-\t\tlink= possiblyExpectingExceptions(method, test, link);\n-\t\tlink= withPotentialTimeout(method, test, link);\n-\t\tlink= withBefores(method, test, link);\n-\t\tlink= withAfters(method, test, link);\n-\t\treturn link;\n+\t\tStatement statement= methodInvoker(method, test);\n+\t\tstatement= possiblyExpectingExceptions(method, test, statement);\n+\t\tstatement= withPotentialTimeout(method, test, statement);\n+\t\tstatement= withBefores(method, test, statement);\n+\t\tstatement= withAfters(method, test, statement);\n+\t\treturn statement;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"96d7dd609920deb1336cf85dc6c9a3a0d5e30d15": {
			"type": "Yfilerename",
			"commitMessage": "Reorganizing visibility to publish BlockJUnit4ClassRunner and friends. Not sure if this is done. Check with Structure 101?\n",
			"commitDate": "2008-07-01, 12:29 PM",
			"commitName": "96d7dd609920deb1336cf85dc6c9a3a0d5e30d15",
			"commitAuthor": "kbeck",
			"commitDateOld": "2008-07-01, 11:01 AM",
			"commitNameOld": "eb2750d861ac1ecf2dbd0425e457fe833468a169",
			"commitAuthorOld": "kbeck",
			"daysBetweenCommits": 0.06,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/main/java/org/junit/internal/runners/BlockJUnit4ClassRunner.java",
				"newPath": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java"
			}
		},
		"9bd1be07aa38d7fa2de048845f7b13458c9420d7": {
			"type": "Ybodychange",
			"commitMessage": "Parallelize Statement builder methods in BlockJUnit4ClassRunner\n",
			"commitDate": "2008-06-24, 10:34 AM",
			"commitName": "9bd1be07aa38d7fa2de048845f7b13458c9420d7",
			"commitAuthor": "dsaff",
			"commitDateOld": "2008-06-16, 11:52 AM",
			"commitNameOld": "078e45bd31a9920e00633ad6ce658e22529304f2",
			"commitAuthorOld": "kbeck",
			"daysBetweenCommits": 7.95,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,22 +1,20 @@\n \tprotected Statement childBlock(FrameworkMethod method) {\n \t\tObject test;\n \t\ttry {\n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n \n-\t\tTestAnnotation annotation= new TestAnnotation(method);\n-\t\t\n \t\tStatement link= invoke(method, test);\n-\t\tlink= possiblyExpectingExceptions(annotation, link);\n-\t\tlink= withPotentialTimeout(annotation, link);\n+\t\tlink= possiblyExpectingExceptions(method, test, link);\n+\t\tlink= withPotentialTimeout(method, test, link);\n \t\tlink= withBefores(method, test, link);\n \t\tlink= withAfters(method, test, link);\n \t\treturn link;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"078e45bd31a9920e00633ad6ce658e22529304f2": {
			"type": "Ymovefromfile",
			"commitMessage": "Brought in old JUnit4ClassRunner for compatibility. Renamed new JUnit4ClassRunner to BlockJUnit4ClassRunner.\n",
			"commitDate": "2008-06-16, 11:52 AM",
			"commitName": "078e45bd31a9920e00633ad6ce658e22529304f2",
			"commitAuthor": "kbeck",
			"commitDateOld": "2008-06-10, 1:50 PM",
			"commitNameOld": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd",
			"commitAuthorOld": "dsaff",
			"daysBetweenCommits": 5.92,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java",
				"newPath": "src/main/java/org/junit/internal/runners/BlockJUnit4ClassRunner.java",
				"oldMethodName": "childBlock",
				"newMethodName": "childBlock"
			}
		},
		"0fa19baf003c5808831c59f8a839cc871586f30e": {
			"type": "Ymodifierchange",
			"commitMessage": "Small runner definition cleanup\n",
			"commitDate": "2007-12-07, 12:14 PM",
			"commitName": "0fa19baf003c5808831c59f8a839cc871586f30e",
			"commitAuthor": "dsaff",
			"commitDateOld": "2007-12-07, 12:06 PM",
			"commitNameOld": "44fabd25eb7d8c5291094b033007c32b7a1b8da2",
			"commitAuthorOld": "dsaff",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,22 +1,22 @@\n-\tpublic Statement childBlock(FrameworkMethod method) {\n+\tprotected Statement childBlock(FrameworkMethod method) {\n \t\tObject test;\n \t\ttry {\n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n \n \t\tTestAnnotation annotation= new TestAnnotation(method);\n \t\t\n \t\tStatement link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(annotation, link);\n \t\tlink= withPotentialTimeout(annotation, link);\n \t\tlink= withBefores(method, test, link);\n \t\tlink= withAfters(method, test, link);\n \t\treturn link;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[public]",
				"newValue": "[protected]"
			}
		},
		"8226e3e64a7d4ace29eb08ab6c9fc9d4055f20c9": {
			"type": "Yfilerename",
			"commitMessage": "- Moved src directory into two directories, similar to a maven layout, to simplify build, and make it easier for maven-familiar developers to find the tests.\n\n- Improved display of ignored tests, so that build results are hopefully not confusing\n",
			"commitDate": "2007-12-07, 8:43 AM",
			"commitName": "8226e3e64a7d4ace29eb08ab6c9fc9d4055f20c9",
			"commitAuthor": "dsaff",
			"commitDateOld": "2007-12-05, 8:47 AM",
			"commitNameOld": "804f76fdf00c9f9fcbef58f03bbeda1f80b3ad8e",
			"commitAuthorOld": "dsaff",
			"daysBetweenCommits": 2,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
				"newPath": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java"
			}
		},
		"833a511d59e2cc5314283d5ce27ff6fd6514b459": {
			"type": "Ybodychange",
			"commitMessage": "Clean out old TODOs\n",
			"commitDate": "2007-12-05, 8:43 AM",
			"commitName": "833a511d59e2cc5314283d5ce27ff6fd6514b459",
			"commitAuthor": "dsaff",
			"commitDateOld": "2007-11-26, 7:05 PM",
			"commitNameOld": "94ebd93396420bcd03ab99a352e38df822d59f67",
			"commitAuthorOld": "dsaff",
			"daysBetweenCommits": 8.57,
			"commitsBetweenForRepo": 7,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,22 @@\n \tpublic Statement childBlock(FrameworkMethod method) {\n \t\tObject test;\n \t\ttry {\n-\t\t\t// TODO: (Oct 12, 2007 11:49:18 AM) Can I ditch reflective callable?\n-\n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n \n \t\tTestAnnotation annotation= new TestAnnotation(method);\n \t\t\n \t\tStatement link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(annotation, link);\n \t\tlink= withPotentialTimeout(annotation, link);\n \t\tlink= withBefores(method, test, link);\n \t\tlink= withAfters(method, test, link);\n \t\treturn link;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"94ebd93396420bcd03ab99a352e38df822d59f67": {
			"type": "Ybodychange",
			"commitMessage": "- Assumption failures now cause their tests to be ignored\n- Ignored tests broadcast their reasons\n- TextListener displays reasons for ignored tests\n\nStill some clunkiness (TextListener claims the ignored tests are failures) to be worked out in further releases.\nSince this version has breaking changes, the previous version is tagged as r45_before_failed_assumptions_made_ignored_tests\n",
			"commitDate": "2007-11-26, 7:05 PM",
			"commitName": "94ebd93396420bcd03ab99a352e38df822d59f67",
			"commitAuthor": "dsaff",
			"commitDateOld": "2007-11-26, 10:07 AM",
			"commitNameOld": "a6368e40e787e7a23c9f1e58d6a47bf9fa2d0a2c",
			"commitAuthorOld": "dsaff",
			"daysBetweenCommits": 0.37,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,25 +1,24 @@\n \tpublic Statement childBlock(FrameworkMethod method) {\n \t\tObject test;\n \t\ttry {\n \t\t\t// TODO: (Oct 12, 2007 11:49:18 AM) Can I ditch reflective callable?\n \n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n \n \t\tTestAnnotation annotation= new TestAnnotation(method);\n \t\t\n \t\tStatement link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(annotation, link);\n \t\tlink= withPotentialTimeout(annotation, link);\n \t\tlink= withBefores(method, test, link);\n-\t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withAfters(method, test, link);\n \t\treturn link;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"8bed6c9278517d9fb13f274bc5a6ade358a39745": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "- Moved InitializationError to ParentRunner, since it was only used by\n  subclasses of ParentRunner.\n- Broke up TestMethod into FrameworkMethod (which makes it more clear\n  that these methods can also be Before, After, etc.), and\n  TestAnnotation (for specific information only available on the @Test\n  annotation).\n- Created TestMethodElement to encapsulate the relationship between\n  @Test, @Before, and @After.  This class may go away again quickly\n- Updated version in docs to 4.5\n- Included docs about junit-dep jar\n",
			"commitDate": "2007-11-14, 11:21 AM",
			"commitName": "8bed6c9278517d9fb13f274bc5a6ade358a39745",
			"commitAuthor": "dsaff",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "- Moved InitializationError to ParentRunner, since it was only used by\n  subclasses of ParentRunner.\n- Broke up TestMethod into FrameworkMethod (which makes it more clear\n  that these methods can also be Before, After, etc.), and\n  TestAnnotation (for specific information only available on the @Test\n  annotation).\n- Created TestMethodElement to encapsulate the relationship between\n  @Test, @Before, and @After.  This class may go away again quickly\n- Updated version in docs to 4.5\n- Included docs about junit-dep jar\n",
					"commitDate": "2007-11-14, 11:21 AM",
					"commitName": "8bed6c9278517d9fb13f274bc5a6ade358a39745",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-31, 7:57 AM",
					"commitNameOld": "24a5aad1f49b4decf946f1df701e354a18544132",
					"commitAuthorOld": "dsaff",
					"daysBetweenCommits": 14.18,
					"commitsBetweenForRepo": 4,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,23 +1,25 @@\n-\tpublic Statement childBlock(TestMethod method) {\n+\tpublic Statement childBlock(FrameworkMethod method) {\n \t\tObject test;\n \t\ttry {\n \t\t\t// TODO: (Oct 12, 2007 11:49:18 AM) Can I ditch reflective callable?\n \n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n \n+\t\tTestAnnotation annotation= new TestAnnotation(method);\n+\t\t\n \t\tStatement link= invoke(method, test);\n-\t\tlink= possiblyExpectingExceptions(method, link);\n-\t\tlink= withPotentialTimeout(method, link);\n+\t\tlink= possiblyExpectingExceptions(annotation, link);\n+\t\tlink= withPotentialTimeout(annotation, link);\n \t\tlink= withBefores(method, test, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withAfters(method, test, link);\n \t\treturn link;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[method-TestMethod]",
						"newValue": "[method-FrameworkMethod]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "- Moved InitializationError to ParentRunner, since it was only used by\n  subclasses of ParentRunner.\n- Broke up TestMethod into FrameworkMethod (which makes it more clear\n  that these methods can also be Before, After, etc.), and\n  TestAnnotation (for specific information only available on the @Test\n  annotation).\n- Created TestMethodElement to encapsulate the relationship between\n  @Test, @Before, and @After.  This class may go away again quickly\n- Updated version in docs to 4.5\n- Included docs about junit-dep jar\n",
					"commitDate": "2007-11-14, 11:21 AM",
					"commitName": "8bed6c9278517d9fb13f274bc5a6ade358a39745",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-31, 7:57 AM",
					"commitNameOld": "24a5aad1f49b4decf946f1df701e354a18544132",
					"commitAuthorOld": "dsaff",
					"daysBetweenCommits": 14.18,
					"commitsBetweenForRepo": 4,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,23 +1,25 @@\n-\tpublic Statement childBlock(TestMethod method) {\n+\tpublic Statement childBlock(FrameworkMethod method) {\n \t\tObject test;\n \t\ttry {\n \t\t\t// TODO: (Oct 12, 2007 11:49:18 AM) Can I ditch reflective callable?\n \n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n \n+\t\tTestAnnotation annotation= new TestAnnotation(method);\n+\t\t\n \t\tStatement link= invoke(method, test);\n-\t\tlink= possiblyExpectingExceptions(method, link);\n-\t\tlink= withPotentialTimeout(method, link);\n+\t\tlink= possiblyExpectingExceptions(annotation, link);\n+\t\tlink= withPotentialTimeout(annotation, link);\n \t\tlink= withBefores(method, test, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withAfters(method, test, link);\n \t\treturn link;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"24a5aad1f49b4decf946f1df701e354a18544132": {
			"type": "Yrename",
			"commitMessage": "Progress on ParentRunner\n",
			"commitDate": "2007-10-31, 7:57 AM",
			"commitName": "24a5aad1f49b4decf946f1df701e354a18544132",
			"commitAuthor": "dsaff",
			"commitDateOld": "2007-10-12, 1:12 PM",
			"commitNameOld": "4e1018a940699a38673b1861977110e6b558afb1",
			"commitAuthorOld": "kbeck",
			"daysBetweenCommits": 18.78,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,23 +1,23 @@\n-\tpublic Statement chain(TestMethod method) {\n+\tpublic Statement childBlock(TestMethod method) {\n \t\tObject test;\n \t\ttry {\n \t\t\t// TODO: (Oct 12, 2007 11:49:18 AM) Can I ditch reflective callable?\n \n \t\t\ttest= new ReflectiveCallable() {\n \t\t\t\t@Override\n \t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n \t\t\t\t\treturn createTest();\n \t\t\t\t}\n \t\t\t}.run();\n \t\t} catch (Throwable e) {\n \t\t\treturn new Fail(e);\n \t\t}\n-\t\t\n+\n \t\tStatement link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n \t\tlink= withPotentialTimeout(method, link);\n \t\tlink= withBefores(method, test, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withAfters(method, test, link);\n \t\treturn link;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "chain",
				"newValue": "childBlock"
			}
		},
		"59b1e2926cdebfd257c6c091ee2bd478d8aa04d2": {
			"type": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
			"commitMessage": "Theory classes can take constructor parameters\n",
			"commitDate": "2007-10-12, 11:27 AM",
			"commitName": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
			"commitAuthor": "dsaff",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Theory classes can take constructor parameters\n",
					"commitDate": "2007-10-12, 11:27 AM",
					"commitName": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-12, 10:58 AM",
					"commitNameOld": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
					"commitAuthorOld": "kbeck",
					"daysBetweenCommits": 0.02,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,13 +1,23 @@\n-\tprotected Notifier chain(TestMethod method, Object test) {\n-\t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n+\tpublic Statement chain(TestMethod method) {\n+\t\tObject test;\n+\t\ttry {\n+\t\t\t// TODO: (Oct 12, 2007 11:49:18 AM) Can I ditch reflective callable?\n \n-\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n-\n+\t\t\ttest= new ReflectiveCallable() {\n+\t\t\t\t@Override\n+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n+\t\t\t\t\treturn createTest();\n+\t\t\t\t}\n+\t\t\t}.run();\n+\t\t} catch (Throwable e) {\n+\t\t\treturn new Fail(e);\n+\t\t}\n+\t\t\n \t\tStatement link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n \t\tlink= withPotentialTimeout(method, link);\n \t\tlink= withBefores(method, test, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withAfters(method, test, link);\n-\t\treturn notifying(method, link);\n+\t\treturn link;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[method-TestMethod, test-Object]",
						"newValue": "[method-TestMethod]"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "Theory classes can take constructor parameters\n",
					"commitDate": "2007-10-12, 11:27 AM",
					"commitName": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-12, 10:58 AM",
					"commitNameOld": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
					"commitAuthorOld": "kbeck",
					"daysBetweenCommits": 0.02,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,13 +1,23 @@\n-\tprotected Notifier chain(TestMethod method, Object test) {\n-\t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n+\tpublic Statement chain(TestMethod method) {\n+\t\tObject test;\n+\t\ttry {\n+\t\t\t// TODO: (Oct 12, 2007 11:49:18 AM) Can I ditch reflective callable?\n \n-\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n-\n+\t\t\ttest= new ReflectiveCallable() {\n+\t\t\t\t@Override\n+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n+\t\t\t\t\treturn createTest();\n+\t\t\t\t}\n+\t\t\t}.run();\n+\t\t} catch (Throwable e) {\n+\t\t\treturn new Fail(e);\n+\t\t}\n+\t\t\n \t\tStatement link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n \t\tlink= withPotentialTimeout(method, link);\n \t\tlink= withBefores(method, test, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withAfters(method, test, link);\n-\t\treturn notifying(method, link);\n+\t\treturn link;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "Notifier",
						"newValue": "Statement"
					}
				},
				{
					"type": "Ymodifierchange",
					"commitMessage": "Theory classes can take constructor parameters\n",
					"commitDate": "2007-10-12, 11:27 AM",
					"commitName": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-12, 10:58 AM",
					"commitNameOld": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
					"commitAuthorOld": "kbeck",
					"daysBetweenCommits": 0.02,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,13 +1,23 @@\n-\tprotected Notifier chain(TestMethod method, Object test) {\n-\t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n+\tpublic Statement chain(TestMethod method) {\n+\t\tObject test;\n+\t\ttry {\n+\t\t\t// TODO: (Oct 12, 2007 11:49:18 AM) Can I ditch reflective callable?\n \n-\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n-\n+\t\t\ttest= new ReflectiveCallable() {\n+\t\t\t\t@Override\n+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n+\t\t\t\t\treturn createTest();\n+\t\t\t\t}\n+\t\t\t}.run();\n+\t\t} catch (Throwable e) {\n+\t\t\treturn new Fail(e);\n+\t\t}\n+\t\t\n \t\tStatement link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n \t\tlink= withPotentialTimeout(method, link);\n \t\tlink= withBefores(method, test, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withAfters(method, test, link);\n-\t\treturn notifying(method, link);\n+\t\treturn link;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[protected]",
						"newValue": "[public]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Theory classes can take constructor parameters\n",
					"commitDate": "2007-10-12, 11:27 AM",
					"commitName": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-12, 10:58 AM",
					"commitNameOld": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
					"commitAuthorOld": "kbeck",
					"daysBetweenCommits": 0.02,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,13 +1,23 @@\n-\tprotected Notifier chain(TestMethod method, Object test) {\n-\t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n+\tpublic Statement chain(TestMethod method) {\n+\t\tObject test;\n+\t\ttry {\n+\t\t\t// TODO: (Oct 12, 2007 11:49:18 AM) Can I ditch reflective callable?\n \n-\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n-\n+\t\t\ttest= new ReflectiveCallable() {\n+\t\t\t\t@Override\n+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n+\t\t\t\t\treturn createTest();\n+\t\t\t\t}\n+\t\t\t}.run();\n+\t\t} catch (Throwable e) {\n+\t\t\treturn new Fail(e);\n+\t\t}\n+\t\t\n \t\tStatement link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n \t\tlink= withPotentialTimeout(method, link);\n \t\tlink= withBefores(method, test, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withAfters(method, test, link);\n-\t\treturn notifying(method, link);\n+\t\treturn link;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"de43b277b8f2e63051368a36e27a35c5ed0f0e0b": {
			"type": "Ymultichange(Yreturntypechange,Ybodychange)",
			"commitMessage": "I renamed Link->Statement and adjusted the names of the other statements according to my preference. These names are negotiable. I also simplified a few flows of control.\n",
			"commitDate": "2007-10-12, 10:58 AM",
			"commitName": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
			"commitAuthor": "kbeck",
			"subchanges": [
				{
					"type": "Yreturntypechange",
					"commitMessage": "I renamed Link->Statement and adjusted the names of the other statements according to my preference. These names are negotiable. I also simplified a few flows of control.\n",
					"commitDate": "2007-10-12, 10:58 AM",
					"commitName": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
					"commitAuthor": "kbeck",
					"commitDateOld": "2007-10-12, 8:49 AM",
					"commitNameOld": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
					"commitAuthorOld": "dsaff",
					"daysBetweenCommits": 0.09,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,13 +1,13 @@\n-\tprotected NotificationStrategy chain(TestMethod method, Object test) {\n+\tprotected Notifier chain(TestMethod method, Object test) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n \n \t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n \n-\t\tLink link= invoke(method, test);\n+\t\tStatement link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n \t\tlink= withPotentialTimeout(method, link);\n \t\tlink= withBefores(method, test, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withAfters(method, test, link);\n \t\treturn notifying(method, link);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "NotificationStrategy",
						"newValue": "Notifier"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "I renamed Link->Statement and adjusted the names of the other statements according to my preference. These names are negotiable. I also simplified a few flows of control.\n",
					"commitDate": "2007-10-12, 10:58 AM",
					"commitName": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
					"commitAuthor": "kbeck",
					"commitDateOld": "2007-10-12, 8:49 AM",
					"commitNameOld": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
					"commitAuthorOld": "dsaff",
					"daysBetweenCommits": 0.09,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,13 +1,13 @@\n-\tprotected NotificationStrategy chain(TestMethod method, Object test) {\n+\tprotected Notifier chain(TestMethod method, Object test) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n \n \t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n \n-\t\tLink link= invoke(method, test);\n+\t\tStatement link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n \t\tlink= withPotentialTimeout(method, link);\n \t\tlink= withBefores(method, test, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withAfters(method, test, link);\n \t\treturn notifying(method, link);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"0dbe9eefa369da78ca67bf5487797a8de5b2d631": {
			"type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
			"commitMessage": "Change to Link signature (to be discussed soon by phone)\n",
			"commitDate": "2007-10-12, 8:49 AM",
			"commitName": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
			"commitAuthor": "dsaff",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Change to Link signature (to be discussed soon by phone)\n",
					"commitDate": "2007-10-12, 8:49 AM",
					"commitName": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-10, 11:15 AM",
					"commitNameOld": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
					"commitAuthorOld": "dsaff",
					"daysBetweenCommits": 1.9,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,21 +1,13 @@\n-\tprotected Link chain(TestMethod method) {\n+\tprotected NotificationStrategy chain(TestMethod method, Object test) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n-\t\tObject test;\n-\t\ttry {\n-\t\t\ttest= new ReflectiveCallable() {\n-\t\t\t\t@Override\n-\t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n-\t\t\t\t\treturn createTest();\n-\t\t\t\t}\n-\t\t\t}.run();\n-\t\t} catch (Throwable e) {\n-\t\t\treturn throwException(e);\n-\t\t}\n-\t\t\n+\n+\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n+\n \t\tLink link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n-\t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withPotentialTimeout(method, link);\n-\t\tlink= withBeforeAndAfter(method, link, test);\n-\t\treturn link;\n+\t\tlink= withBefores(method, test, link);\n+\t\tlink= ignoreViolatedAssumptions(link);\n+\t\tlink= withAfters(method, test, link);\n+\t\treturn notifying(method, link);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[method-TestMethod]",
						"newValue": "[method-TestMethod, test-Object]"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "Change to Link signature (to be discussed soon by phone)\n",
					"commitDate": "2007-10-12, 8:49 AM",
					"commitName": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-10, 11:15 AM",
					"commitNameOld": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
					"commitAuthorOld": "dsaff",
					"daysBetweenCommits": 1.9,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,21 +1,13 @@\n-\tprotected Link chain(TestMethod method) {\n+\tprotected NotificationStrategy chain(TestMethod method, Object test) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n-\t\tObject test;\n-\t\ttry {\n-\t\t\ttest= new ReflectiveCallable() {\n-\t\t\t\t@Override\n-\t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n-\t\t\t\t\treturn createTest();\n-\t\t\t\t}\n-\t\t\t}.run();\n-\t\t} catch (Throwable e) {\n-\t\t\treturn throwException(e);\n-\t\t}\n-\t\t\n+\n+\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n+\n \t\tLink link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n-\t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withPotentialTimeout(method, link);\n-\t\tlink= withBeforeAndAfter(method, link, test);\n-\t\treturn link;\n+\t\tlink= withBefores(method, test, link);\n+\t\tlink= ignoreViolatedAssumptions(link);\n+\t\tlink= withAfters(method, test, link);\n+\t\treturn notifying(method, link);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "Link",
						"newValue": "NotificationStrategy"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Change to Link signature (to be discussed soon by phone)\n",
					"commitDate": "2007-10-12, 8:49 AM",
					"commitName": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-10, 11:15 AM",
					"commitNameOld": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
					"commitAuthorOld": "dsaff",
					"daysBetweenCommits": 1.9,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,21 +1,13 @@\n-\tprotected Link chain(TestMethod method) {\n+\tprotected NotificationStrategy chain(TestMethod method, Object test) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n-\t\tObject test;\n-\t\ttry {\n-\t\t\ttest= new ReflectiveCallable() {\n-\t\t\t\t@Override\n-\t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n-\t\t\t\t\treturn createTest();\n-\t\t\t\t}\n-\t\t\t}.run();\n-\t\t} catch (Throwable e) {\n-\t\t\treturn throwException(e);\n-\t\t}\n-\t\t\n+\n+\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n+\n \t\tLink link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n-\t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withPotentialTimeout(method, link);\n-\t\tlink= withBeforeAndAfter(method, link, test);\n-\t\treturn link;\n+\t\tlink= withBefores(method, test, link);\n+\t\tlink= ignoreViolatedAssumptions(link);\n+\t\tlink= withAfters(method, test, link);\n+\t\treturn notifying(method, link);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"0e1c92693e70e52ad9af23ee6180500c74fc9c95": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "- Fix potentially bottomless recursion in\n  ParameterSignature.findDeepAnnotation\n\n- Simplified chain method, which simplified Theories\n",
			"commitDate": "2007-10-10, 11:15 AM",
			"commitName": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
			"commitAuthor": "dsaff",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "- Fix potentially bottomless recursion in\n  ParameterSignature.findDeepAnnotation\n\n- Simplified chain method, which simplified Theories\n",
					"commitDate": "2007-10-10, 11:15 AM",
					"commitName": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-10, 9:57 AM",
					"commitNameOld": "f0ef837a40922ac08c608661385abf71732975d3",
					"commitAuthorOld": "dsaff",
					"daysBetweenCommits": 0.05,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,21 @@\n-\tprotected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {\n+\tprotected Link chain(TestMethod method) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n-\n-\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n-\n+\t\tObject test;\n+\t\ttry {\n+\t\t\ttest= new ReflectiveCallable() {\n+\t\t\t\t@Override\n+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n+\t\t\t\t\treturn createTest();\n+\t\t\t\t}\n+\t\t\t}.run();\n+\t\t} catch (Throwable e) {\n+\t\t\treturn throwException(e);\n+\t\t}\n+\t\t\n \t\tLink link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withPotentialTimeout(method, link);\n \t\tlink= withBeforeAndAfter(method, link, test);\n-\t\treturn notifying(method, link, notifier);\n+\t\treturn link;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[method-TestMethod, test-Object, notifier-EachTestNotifier]",
						"newValue": "[method-TestMethod]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "- Fix potentially bottomless recursion in\n  ParameterSignature.findDeepAnnotation\n\n- Simplified chain method, which simplified Theories\n",
					"commitDate": "2007-10-10, 11:15 AM",
					"commitName": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-10, 9:57 AM",
					"commitNameOld": "f0ef837a40922ac08c608661385abf71732975d3",
					"commitAuthorOld": "dsaff",
					"daysBetweenCommits": 0.05,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,21 @@\n-\tprotected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {\n+\tprotected Link chain(TestMethod method) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n-\n-\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n-\n+\t\tObject test;\n+\t\ttry {\n+\t\t\ttest= new ReflectiveCallable() {\n+\t\t\t\t@Override\n+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {\n+\t\t\t\t\treturn createTest();\n+\t\t\t\t}\n+\t\t\t}.run();\n+\t\t} catch (Throwable e) {\n+\t\t\treturn throwException(e);\n+\t\t}\n+\t\t\n \t\tLink link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withPotentialTimeout(method, link);\n \t\tlink= withBeforeAndAfter(method, link, test);\n-\t\treturn notifying(method, link, notifier);\n+\t\treturn link;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"f0ef837a40922ac08c608661385abf71732975d3": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Link no longer throws Throwable, but handles exceptions with a FailureListener\n",
			"commitDate": "2007-10-10, 9:57 AM",
			"commitName": "f0ef837a40922ac08c608661385abf71732975d3",
			"commitAuthor": "dsaff",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Link no longer throws Throwable, but handles exceptions with a FailureListener\n",
					"commitDate": "2007-10-10, 9:57 AM",
					"commitName": "f0ef837a40922ac08c608661385abf71732975d3",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-09, 7:57 PM",
					"commitNameOld": "a4c68872a91681139d404825c2bb04bd5ba804dd",
					"commitAuthorOld": "kbeck",
					"daysBetweenCommits": 0.58,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,12 @@\n-\tprotected Link chain(TestMethod method, Object test) {\n+\tprotected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n \n \t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n \n \t\tLink link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withPotentialTimeout(method, link);\n \t\tlink= withBeforeAndAfter(method, link, test);\n-\t\treturn notifying(method, link);\n+\t\treturn notifying(method, link, notifier);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[method-TestMethod, test-Object]",
						"newValue": "[method-TestMethod, test-Object, notifier-EachTestNotifier]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Link no longer throws Throwable, but handles exceptions with a FailureListener\n",
					"commitDate": "2007-10-10, 9:57 AM",
					"commitName": "f0ef837a40922ac08c608661385abf71732975d3",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-09, 7:57 PM",
					"commitNameOld": "a4c68872a91681139d404825c2bb04bd5ba804dd",
					"commitAuthorOld": "kbeck",
					"daysBetweenCommits": 0.58,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,12 @@\n-\tprotected Link chain(TestMethod method, Object test) {\n+\tprotected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n \n \t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n \n \t\tLink link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withPotentialTimeout(method, link);\n \t\tlink= withBeforeAndAfter(method, link, test);\n-\t\treturn notifying(method, link);\n+\t\treturn notifying(method, link, notifier);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"b333208ccfbef77c556a270bd4385586523dcafc": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "What was Roadie was actually an EachTestNotifier plus a tacked-on Object target.  These have been divorced: the result is more understandable, but points to some new objects that may want to be created.\n",
			"commitDate": "2007-10-09, 12:20 PM",
			"commitName": "b333208ccfbef77c556a270bd4385586523dcafc",
			"commitAuthor": "dsaff",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "What was Roadie was actually an EachTestNotifier plus a tacked-on Object target.  These have been divorced: the result is more understandable, but points to some new objects that may want to be created.\n",
					"commitDate": "2007-10-09, 12:20 PM",
					"commitName": "b333208ccfbef77c556a270bd4385586523dcafc",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-09, 10:25 AM",
					"commitNameOld": "6887479f1b64c5a18f5708ea6905bb59804a9a0f",
					"commitAuthorOld": "kbeck",
					"daysBetweenCommits": 0.08,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,10 +1,12 @@\n-\tprotected Link chain(TestMethod method) {\n-\t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link\n+\tprotected Link chain(TestMethod method, Object test) {\n+\t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n \n-\t\tLink link= invoke(method);\n+\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n+\n+\t\tLink link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withPotentialTimeout(method, link);\n-\t\tlink= withBeforeAndAfter(method, link);\n+\t\tlink= withBeforeAndAfter(method, link, test);\n \t\treturn notifying(method, link);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[method-TestMethod]",
						"newValue": "[method-TestMethod, test-Object]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "What was Roadie was actually an EachTestNotifier plus a tacked-on Object target.  These have been divorced: the result is more understandable, but points to some new objects that may want to be created.\n",
					"commitDate": "2007-10-09, 12:20 PM",
					"commitName": "b333208ccfbef77c556a270bd4385586523dcafc",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-09, 10:25 AM",
					"commitNameOld": "6887479f1b64c5a18f5708ea6905bb59804a9a0f",
					"commitAuthorOld": "kbeck",
					"daysBetweenCommits": 0.08,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,10 +1,12 @@\n-\tprotected Link chain(TestMethod method) {\n-\t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link\n+\tprotected Link chain(TestMethod method, Object test) {\n+\t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link?\n \n-\t\tLink link= invoke(method);\n+\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?\n+\n+\t\tLink link= invoke(method, test);\n \t\tlink= possiblyExpectingExceptions(method, link);\n \t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withPotentialTimeout(method, link);\n-\t\tlink= withBeforeAndAfter(method, link);\n+\t\tlink= withBeforeAndAfter(method, link, test);\n \t\treturn notifying(method, link);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"6887479f1b64c5a18f5708ea6905bb59804a9a0f": {
			"type": "Ybodychange",
			"commitMessage": "Simplified Theories. Factored out ignoring violated assumptions into its own Link.\n",
			"commitDate": "2007-10-09, 10:25 AM",
			"commitName": "6887479f1b64c5a18f5708ea6905bb59804a9a0f",
			"commitAuthor": "kbeck",
			"commitDateOld": "2007-10-08, 3:07 PM",
			"commitNameOld": "44e7458b19d5cd1900a765a440c96e85b81d25fc",
			"commitAuthorOld": "dsaff",
			"daysBetweenCommits": 0.8,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,9 +1,10 @@\n \tprotected Link chain(TestMethod method) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link\n \n \t\tLink link= invoke(method);\n \t\tlink= possiblyExpectingExceptions(method, link);\n+\t\tlink= ignoreViolatedAssumptions(link);\n \t\tlink= withPotentialTimeout(method, link);\n \t\tlink= withBeforeAndAfter(method, link);\n \t\treturn notifying(method, link);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"44e7458b19d5cd1900a765a440c96e85b81d25fc": {
			"type": "Ybodychange",
			"commitMessage": "- Renamed link classes.\n  Absolute actions are verbs: IgnoreTest, Invoke.\n  ActionModifiers are modifying phrases: ExpectingException, WithTimeout, etc.\n\n- Moved isShadowedBy(List) to TestMethod\n",
			"commitDate": "2007-10-08, 3:07 PM",
			"commitName": "44e7458b19d5cd1900a765a440c96e85b81d25fc",
			"commitAuthor": "dsaff",
			"commitDateOld": "2007-10-08, 1:40 PM",
			"commitNameOld": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
			"commitAuthorOld": "dsaff",
			"daysBetweenCommits": 0.06,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,9 @@\n \tprotected Link chain(TestMethod method) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link\n \n-\t\tLink link= anchor(method);\n-\t\tlink= handleExceptions(link, method);\n-\t\tlink= timeout(link, method);\n-\t\t// TODO: (Oct 8, 2007 10:45:34 AM) parallelize (make beforeAndAfter method)\n-\t\t// TODO: (Oct 8, 2007 10:54:54 AM) sort methods\n-\n-\t\tlink= new BeforeAndAfter(link, method);\n-\t\treturn notifier(link, method);\n+\t\tLink link= invoke(method);\n+\t\tlink= possiblyExpectingExceptions(method, link);\n+\t\tlink= withPotentialTimeout(method, link);\n+\t\tlink= withBeforeAndAfter(method, link);\n+\t\treturn notifying(method, link);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"576377b9ad44028dc84c2f8487cfe8dbccb8c252": {
			"type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
			"commitMessage": "- Split links into their own package\n- Combined JUnit4ClassRunner and JUnit4MethodRunner, allowing extensions to be written with a single class\n- Created a separate model class for TestMethod, TestClass, and other runnable Java elements (TODO: still messy separation of concerns there)\n- Absorbed ExplosiveMethod into TestMethod.invokeExplosively\n- Absorbed MethodValidator into TestClass and TestMethod.\n- Removed deprecated OldTestClassRunner and TestClassRunner\n- Changed testAndTeardownFailure so that the order of failures is undefined\n- Added test for Before defined on subclass run on Test defined on superclass.\n\nThis is not yet the finished refactoring.  More to come, but needed a checkpoint\n",
			"commitDate": "2007-10-08, 1:40 PM",
			"commitName": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
			"commitAuthor": "dsaff",
			"subchanges": [
				{
					"type": "Ymovefromfile",
					"commitMessage": "- Split links into their own package\n- Combined JUnit4ClassRunner and JUnit4MethodRunner, allowing extensions to be written with a single class\n- Created a separate model class for TestMethod, TestClass, and other runnable Java elements (TODO: still messy separation of concerns there)\n- Absorbed ExplosiveMethod into TestMethod.invokeExplosively\n- Absorbed MethodValidator into TestClass and TestMethod.\n- Removed deprecated OldTestClassRunner and TestClassRunner\n- Changed testAndTeardownFailure so that the order of failures is undefined\n- Added test for Before defined on subclass run on Test defined on superclass.\n\nThis is not yet the finished refactoring.  More to come, but needed a checkpoint\n",
					"commitDate": "2007-10-08, 1:40 PM",
					"commitName": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-05, 2:47 PM",
					"commitNameOld": "57302f0df76fba83ba72a676bd660efeb5881af6",
					"commitAuthorOld": "kbeck",
					"daysBetweenCommits": 2.95,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,10 +1,12 @@\n-\tprotected Link chain() {\n+\tprotected Link chain(TestMethod method) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link\n \n-\t\tLink link= anchor();\n-\t\tlink= handleExceptions(link);\n-\t\tlink= timeout(link);\n-\t\tlink= new BeforeAndAfter(link);\n-\t\tlink= new Notifier(link);\n-\t\treturn new Ignored(link);\n+\t\tLink link= anchor(method);\n+\t\tlink= handleExceptions(link, method);\n+\t\tlink= timeout(link, method);\n+\t\t// TODO: (Oct 8, 2007 10:45:34 AM) parallelize (make beforeAndAfter method)\n+\t\t// TODO: (Oct 8, 2007 10:54:54 AM) sort methods\n+\n+\t\tlink= new BeforeAndAfter(link, method);\n+\t\treturn notifier(link, method);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "src/org/junit/internal/runners/JUnit4MethodRunner.java",
						"newPath": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
						"oldMethodName": "chain",
						"newMethodName": "chain"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "- Split links into their own package\n- Combined JUnit4ClassRunner and JUnit4MethodRunner, allowing extensions to be written with a single class\n- Created a separate model class for TestMethod, TestClass, and other runnable Java elements (TODO: still messy separation of concerns there)\n- Absorbed ExplosiveMethod into TestMethod.invokeExplosively\n- Absorbed MethodValidator into TestClass and TestMethod.\n- Removed deprecated OldTestClassRunner and TestClassRunner\n- Changed testAndTeardownFailure so that the order of failures is undefined\n- Added test for Before defined on subclass run on Test defined on superclass.\n\nThis is not yet the finished refactoring.  More to come, but needed a checkpoint\n",
					"commitDate": "2007-10-08, 1:40 PM",
					"commitName": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-05, 2:47 PM",
					"commitNameOld": "57302f0df76fba83ba72a676bd660efeb5881af6",
					"commitAuthorOld": "kbeck",
					"daysBetweenCommits": 2.95,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,10 +1,12 @@\n-\tprotected Link chain() {\n+\tprotected Link chain(TestMethod method) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link\n \n-\t\tLink link= anchor();\n-\t\tlink= handleExceptions(link);\n-\t\tlink= timeout(link);\n-\t\tlink= new BeforeAndAfter(link);\n-\t\tlink= new Notifier(link);\n-\t\treturn new Ignored(link);\n+\t\tLink link= anchor(method);\n+\t\tlink= handleExceptions(link, method);\n+\t\tlink= timeout(link, method);\n+\t\t// TODO: (Oct 8, 2007 10:45:34 AM) parallelize (make beforeAndAfter method)\n+\t\t// TODO: (Oct 8, 2007 10:54:54 AM) sort methods\n+\n+\t\tlink= new BeforeAndAfter(link, method);\n+\t\treturn notifier(link, method);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				},
				{
					"type": "Yparameterchange",
					"commitMessage": "- Split links into their own package\n- Combined JUnit4ClassRunner and JUnit4MethodRunner, allowing extensions to be written with a single class\n- Created a separate model class for TestMethod, TestClass, and other runnable Java elements (TODO: still messy separation of concerns there)\n- Absorbed ExplosiveMethod into TestMethod.invokeExplosively\n- Absorbed MethodValidator into TestClass and TestMethod.\n- Removed deprecated OldTestClassRunner and TestClassRunner\n- Changed testAndTeardownFailure so that the order of failures is undefined\n- Added test for Before defined on subclass run on Test defined on superclass.\n\nThis is not yet the finished refactoring.  More to come, but needed a checkpoint\n",
					"commitDate": "2007-10-08, 1:40 PM",
					"commitName": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
					"commitAuthor": "dsaff",
					"commitDateOld": "2007-10-05, 2:47 PM",
					"commitNameOld": "57302f0df76fba83ba72a676bd660efeb5881af6",
					"commitAuthorOld": "kbeck",
					"daysBetweenCommits": 2.95,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,10 +1,12 @@\n-\tprotected Link chain() {\n+\tprotected Link chain(TestMethod method) {\n \t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link\n \n-\t\tLink link= anchor();\n-\t\tlink= handleExceptions(link);\n-\t\tlink= timeout(link);\n-\t\tlink= new BeforeAndAfter(link);\n-\t\tlink= new Notifier(link);\n-\t\treturn new Ignored(link);\n+\t\tLink link= anchor(method);\n+\t\tlink= handleExceptions(link, method);\n+\t\tlink= timeout(link, method);\n+\t\t// TODO: (Oct 8, 2007 10:45:34 AM) parallelize (make beforeAndAfter method)\n+\t\t// TODO: (Oct 8, 2007 10:54:54 AM) sort methods\n+\n+\t\tlink= new BeforeAndAfter(link, method);\n+\t\treturn notifier(link, method);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[]",
						"newValue": "[method-TestMethod]"
					}
				}
			]
		},
		"57302f0df76fba83ba72a676bd660efeb5881af6": {
			"type": "Ybodychange",
			"commitMessage": "Further refinement--I got rid of the Link/Anchor distinction. The bits of functionality are all Links at the moment. I also took error reporting out of Timeout (Roadie.runAfters() reports multiple errors without engaging the Link). There still seem to be some loose ends to tie up--naming, duplication, getting rid of dependencies on the enclosing instance as part of making the Links top-level classes, repackaging.\n",
			"commitDate": "2007-10-05, 2:47 PM",
			"commitName": "57302f0df76fba83ba72a676bd660efeb5881af6",
			"commitAuthor": "kbeck",
			"commitDateOld": "2007-10-05, 10:54 AM",
			"commitNameOld": "a58514aec7e843339be24980e92aeeb759327ffb",
			"commitAuthorOld": "dsaff",
			"daysBetweenCommits": 0.16,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,9 +1,10 @@\n \tprotected Link chain() {\n-\t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Anchor and Link\n+\t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link\n \n-\t\tAnchor anchor= anchor();\n-\t\tAnchor next= handleExceptions(anchor);\n-\t\tnext= timeout(next);\n-\t\tLink link= new BeforeAndAfter(next);\n-\t\treturn new Notifier(link);\n+\t\tLink link= anchor();\n+\t\tlink= handleExceptions(link);\n+\t\tlink= timeout(link);\n+\t\tlink= new BeforeAndAfter(link);\n+\t\tlink= new Notifier(link);\n+\t\treturn new Ignored(link);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a58514aec7e843339be24980e92aeeb759327ffb": {
			"type": "Ybodychange",
			"commitMessage": "Allowed more classes to be Anchors, more cleanup still to do\n",
			"commitDate": "2007-10-05, 10:54 AM",
			"commitName": "a58514aec7e843339be24980e92aeeb759327ffb",
			"commitAuthor": "dsaff",
			"commitDateOld": "2007-10-04, 10:59 PM",
			"commitNameOld": "4081076e513e84bb2376f889d4108e64e9a18653",
			"commitAuthorOld": "kbeck",
			"daysBetweenCommits": 0.5,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,7 +1,9 @@\n \tprotected Link chain() {\n+\t\t// TODO: (Oct 5, 2007 11:09:00 AM) Rename Anchor and Link\n+\n \t\tAnchor anchor= anchor();\n-\t\tLink next= handleExceptions(anchor);\n+\t\tAnchor next= handleExceptions(anchor);\n \t\tnext= timeout(next);\n-\t\tnext= new BeforeAndAfter(next);\n-\t\treturn new Notifier(next);\n+\t\tLink link= new BeforeAndAfter(next);\n+\t\treturn new Notifier(link);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"4081076e513e84bb2376f889d4108e64e9a18653": {
			"type": "Ymultichange(Ymodifierchange,Ybodychange)",
			"commitMessage": "Big reorganization of how test methods are run. Now there are a nested set of Links which each handle one aspect of running a method. Custom runners can create their own chain of Links to introduce new behavior. This isn't done--it needs organization like extracting inner classes to top level classes and refinement of visibility.\n",
			"commitDate": "2007-10-04, 10:59 PM",
			"commitName": "4081076e513e84bb2376f889d4108e64e9a18653",
			"commitAuthor": "kbeck",
			"subchanges": [
				{
					"type": "Ymodifierchange",
					"commitMessage": "Big reorganization of how test methods are run. Now there are a nested set of Links which each handle one aspect of running a method. Custom runners can create their own chain of Links to introduce new behavior. This isn't done--it needs organization like extracting inner classes to top level classes and refinement of visibility.\n",
					"commitDate": "2007-10-04, 10:59 PM",
					"commitName": "4081076e513e84bb2376f889d4108e64e9a18653",
					"commitAuthor": "kbeck",
					"commitDateOld": "2007-10-03, 12:11 PM",
					"commitNameOld": "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf",
					"commitAuthorOld": "dsaff",
					"daysBetweenCommits": 1.45,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,11 +1,7 @@\n-\tprivate Link chain() {\n-\t\tLink expectedException= new Link() {\n-\t\t\t@Override\n-\t\t\tpublic void run(Roadie context) {\n-\t\t\t\trunWithExpectedExceptionCheck(context);\n-\t\t\t}\t\t\n-\t\t};\n-\t\t\n-\t\tTimeout timeout= new Timeout(expectedException);\n-\t\treturn new Notifier(new BeforeAndAfter(timeout));\n+\tprotected Link chain() {\n+\t\tAnchor anchor= anchor();\n+\t\tLink next= handleExceptions(anchor);\n+\t\tnext= timeout(next);\n+\t\tnext= new BeforeAndAfter(next);\n+\t\treturn new Notifier(next);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[private]",
						"newValue": "[protected]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Big reorganization of how test methods are run. Now there are a nested set of Links which each handle one aspect of running a method. Custom runners can create their own chain of Links to introduce new behavior. This isn't done--it needs organization like extracting inner classes to top level classes and refinement of visibility.\n",
					"commitDate": "2007-10-04, 10:59 PM",
					"commitName": "4081076e513e84bb2376f889d4108e64e9a18653",
					"commitAuthor": "kbeck",
					"commitDateOld": "2007-10-03, 12:11 PM",
					"commitNameOld": "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf",
					"commitAuthorOld": "dsaff",
					"daysBetweenCommits": 1.45,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,11 +1,7 @@\n-\tprivate Link chain() {\n-\t\tLink expectedException= new Link() {\n-\t\t\t@Override\n-\t\t\tpublic void run(Roadie context) {\n-\t\t\t\trunWithExpectedExceptionCheck(context);\n-\t\t\t}\t\t\n-\t\t};\n-\t\t\n-\t\tTimeout timeout= new Timeout(expectedException);\n-\t\treturn new Notifier(new BeforeAndAfter(timeout));\n+\tprotected Link chain() {\n+\t\tAnchor anchor= anchor();\n+\t\tLink next= handleExceptions(anchor);\n+\t\tnext= timeout(next);\n+\t\tnext= new BeforeAndAfter(next);\n+\t\treturn new Notifier(next);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"679e5dd3e4af3115492fabed45ea8c48bfa9d9bf": {
			"type": "Yintroduced",
			"commitMessage": "Started to convert to Links.\n",
			"commitDate": "2007-10-03, 12:11 PM",
			"commitName": "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf",
			"commitAuthor": "dsaff"
		}
	},
	"sha": "02c328028b4d32c15bbf0becc9838e54ecbafcbf"
}