{
	"repo": "https://github.com/junit-team/junit5.git",
	"file": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
	"method": {
		"longName": "ClassTestDescriptor::prepare(JupiterEngineExecutionContext context)",
		"startLine": 140,
		"methodName": "prepare",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "public"
	},
	"history": {
		"137f831bba9d0f45085d64fad47947cbc91a30e9": {
			"type": "Ybodychange",
			"commitMessage": "Make ThrowableCollector configurable\n\nThis commit generalizes `ThrowableCollector` to take a predicate that\nis used to decide whether a `Throwable` is aborted or failed execution.\nThe Jupiter engines uses a specialized implementation that treats OTA's\n`TestAbortedExceptions` as aborting and everything else as failing:\n`OpenTest4JAwareThrowableCollector`.\n\nIn addition, this commit introduces `ThrowableCollector.Factory` and\nlets `HierarchicalTestEngines` create them in order to allow the engine\nto decide how to configure its `ThrowableCollectors`. For backwards\ncompatibility, the default implementation returns a factory that\nalways creates instances of `OpenTest4JAwareThrowableCollector`.\n\nIssue: #1313\n",
			"commitDate": "2018-07-07, 2:15 PM",
			"commitName": "137f831bba9d0f45085d64fad47947cbc91a30e9",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2018-07-07, 2:15 PM",
			"commitNameOld": "c1d682aee5da5738fc3be071df45330c005f4cf1",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,33 +1,33 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWithAnnotation(\n \t\t\tcontext.getExtensionRegistry(), this.testClass);\n \n \t\t// Register extensions from static fields here, at the class level but\n \t\t// after extensions registered via @ExtendWith.\n \t\tregisterExtensionsFromFields(registry, this.testClass, null);\n \n \t\t// Resolve the TestInstanceFactory at the class level in order to fail\n \t\t// the entire class in case of configuration errors (e.g., more than\n \t\t// one factory registered per class).\n \t\tthis.testInstanceFactory = resolveTestInstanceFactory(registry);\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tLifecycle lifecycle = getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n-\t\tThrowableCollector throwableCollector = new ThrowableCollector();\n+\t\tThrowableCollector throwableCollector = new OpenTest4JAwareThrowableCollector();\n \t\tClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),\n \t\t\tcontext.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n \n \t\tthis.beforeAllMethods = findBeforeAllMethods(this.testClass, lifecycle == Lifecycle.PER_METHOD);\n \t\tthis.afterAllMethods = findAfterAllMethods(this.testClass, lifecycle == Lifecycle.PER_METHOD);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(extensionContext)\n \t\t\t\t.withThrowableCollector(throwableCollector)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"4c55c3a6f31ab205ff426cbb1f5a4589a95f2776": {
			"type": "Ybodychange",
			"commitMessage": "Resolve TestInstanceFactory at class level\n\nPrior to this commit, TestInstanceFactory extensions were resolved\nlazily on-demand. This led to the undesired side effect that\nconfiguration errors were reported for each test method when executing\nwith per-method lifecycle semantics. In addition, this also meant that\nan attempt was made to invoke all test methods even though the test\nclass could not be instantiated.\n\nThis commit addresses these issues by resolving the TestInstanceFactory\nduring the \"prepare\" phase for each ClassTestDescriptor.\n\nThis commit also introduces the following methods in ExtensionRegistry\nin order to make the above change possible.\n\n - getParent()\n - getLocalExtensions(Class)\n\nIssue: #672\n",
			"commitDate": "2018-07-02, 8:33 AM",
			"commitName": "4c55c3a6f31ab205ff426cbb1f5a4589a95f2776",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2018-07-01, 11:08 AM",
			"commitNameOld": "bdc9ef8db9c40d451e974828efb644cb3f6d3db7",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.89,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,27 +1,33 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWithAnnotation(\n \t\t\tcontext.getExtensionRegistry(), this.testClass);\n \n \t\t// Register extensions from static fields here, at the class level but\n \t\t// after extensions registered via @ExtendWith.\n \t\tregisterExtensionsFromFields(registry, this.testClass, null);\n+\n+\t\t// Resolve the TestInstanceFactory at the class level in order to fail\n+\t\t// the entire class in case of configuration errors (e.g., more than\n+\t\t// one factory registered per class).\n+\t\tthis.testInstanceFactory = resolveTestInstanceFactory(registry);\n+\n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tLifecycle lifecycle = getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \t\tClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),\n \t\t\tcontext.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n \n \t\tthis.beforeAllMethods = findBeforeAllMethods(this.testClass, lifecycle == Lifecycle.PER_METHOD);\n \t\tthis.afterAllMethods = findAfterAllMethods(this.testClass, lifecycle == Lifecycle.PER_METHOD);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(extensionContext)\n \t\t\t\t.withThrowableCollector(throwableCollector)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"920f6ea401ff38d1d66b594ddddfedb98bc8b68c": {
			"type": "Ybodychange",
			"commitMessage": "Extract ExtensionUtils and disallow private @RegisterExtension fields\n\nIssue: #497\n",
			"commitDate": "2018-01-20, 10:40 AM",
			"commitName": "920f6ea401ff38d1d66b594ddddfedb98bc8b68c",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2018-01-20, 10:40 AM",
			"commitNameOld": "479491f2f417a553238f28ab196a23b9c2b9099e",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,27 +1,27 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n-\t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n-\t\t\tcontext.getExtensionRegistry());\n+\t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWithAnnotation(\n+\t\t\tcontext.getExtensionRegistry(), this.testClass);\n \n \t\t// Register extensions from static fields here, at the class level but\n \t\t// after extensions registered via @ExtendWith.\n-\t\tregisterExtensionsFromFields(this.testClass, registry, null);\n+\t\tregisterExtensionsFromFields(registry, this.testClass, null);\n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tLifecycle lifecycle = getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \t\tClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),\n \t\t\tcontext.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n \n \t\tthis.beforeAllMethods = findBeforeAllMethods(this.testClass, lifecycle == Lifecycle.PER_METHOD);\n \t\tthis.afterAllMethods = findAfterAllMethods(this.testClass, lifecycle == Lifecycle.PER_METHOD);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(extensionContext)\n \t\t\t\t.withThrowableCollector(throwableCollector)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"479491f2f417a553238f28ab196a23b9c2b9099e": {
			"type": "Ybodychange",
			"commitMessage": "Support @RegisterExtension with @TestInstance(PER_CLASS) lifecycle mode\n\nIssue: #497\n",
			"commitDate": "2018-01-20, 10:40 AM",
			"commitName": "479491f2f417a553238f28ab196a23b9c2b9099e",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2018-01-20, 10:40 AM",
			"commitNameOld": "27ae8cf548cf70e4c671705d2e03777f3bf19d1a",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,25 +1,27 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n+\t\t// Register extensions from static fields here, at the class level but\n+\t\t// after extensions registered via @ExtendWith.\n \t\tregisterExtensionsFromFields(this.testClass, registry, null);\n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tLifecycle lifecycle = getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \t\tClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),\n \t\t\tcontext.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n \n \t\tthis.beforeAllMethods = findBeforeAllMethods(this.testClass, lifecycle == Lifecycle.PER_METHOD);\n \t\tthis.afterAllMethods = findAfterAllMethods(this.testClass, lifecycle == Lifecycle.PER_METHOD);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(extensionContext)\n \t\t\t\t.withThrowableCollector(throwableCollector)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"27ae8cf548cf70e4c671705d2e03777f3bf19d1a": {
			"type": "Ybodychange",
			"commitMessage": "Introduce instance-level support for @RegisterExtension in Jupiter\n\nIssue: #497\n",
			"commitDate": "2018-01-20, 10:40 AM",
			"commitName": "27ae8cf548cf70e4c671705d2e03777f3bf19d1a",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2018-01-12, 6:20 AM",
			"commitNameOld": "65d54b1a0e9d73d0e4cb64cc219b7d6cb13be314",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 8.18,
			"commitsBetweenForRepo": 53,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,25 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n+\t\tregisterExtensionsFromFields(this.testClass, registry, null);\n+\t\tregisterBeforeEachMethodAdapters(registry);\n+\t\tregisterAfterEachMethodAdapters(registry);\n+\n \t\tLifecycle lifecycle = getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \t\tClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),\n \t\t\tcontext.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n \n \t\tthis.beforeAllMethods = findBeforeAllMethods(this.testClass, lifecycle == Lifecycle.PER_METHOD);\n \t\tthis.afterAllMethods = findAfterAllMethods(this.testClass, lifecycle == Lifecycle.PER_METHOD);\n \n-\t\tregisterBeforeEachMethodAdapters(registry);\n-\t\tregisterAfterEachMethodAdapters(registry);\n-\n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(extensionContext)\n \t\t\t\t.withThrowableCollector(throwableCollector)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"65d54b1a0e9d73d0e4cb64cc219b7d6cb13be314": {
			"type": "Ybodychange",
			"commitMessage": "Provide access to test instance lifecycle via ExtensionContext\n\nThis commit introduces a new getTestInstanceLifecycle() method in the\nExtensionContext API for JUnit Jupiter.\n\nIssue: #1187\n",
			"commitDate": "2018-01-12, 6:20 AM",
			"commitName": "65d54b1a0e9d73d0e4cb64cc219b7d6cb13be314",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2018-01-06, 12:23 PM",
			"commitNameOld": "6b4de716ba3b0b46c847e340e2f68954d0cc6192",
			"commitAuthorOld": "JUnit Team",
			"daysBetweenCommits": 5.75,
			"commitsBetweenForRepo": 21,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,27 +1,24 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n-\t\tLifecycle lifecycle = getTestInstanceLifecycle(testClass, context.getConfigurationParameters());\n-\n-\t\tthis.beforeAllMethods = findBeforeAllMethods(testClass, lifecycle == Lifecycle.PER_METHOD);\n-\t\tthis.afterAllMethods = findAfterAllMethods(testClass, lifecycle == Lifecycle.PER_METHOD);\n-\t\tthis.beforeEachMethods = findBeforeEachMethods(testClass);\n-\t\tthis.afterEachMethods = findAfterEachMethods(testClass);\n-\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n-\t\tregisterBeforeEachMethodAdapters(registry);\n-\t\tregisterAfterEachMethodAdapters(registry);\n-\n+\t\tLifecycle lifecycle = getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \t\tClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),\n-\t\t\tcontext.getExecutionListener(), this, context.getConfigurationParameters(), throwableCollector);\n+\t\t\tcontext.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n+\n+\t\tthis.beforeAllMethods = findBeforeAllMethods(this.testClass, lifecycle == Lifecycle.PER_METHOD);\n+\t\tthis.afterAllMethods = findAfterAllMethods(this.testClass, lifecycle == Lifecycle.PER_METHOD);\n+\n+\t\tregisterBeforeEachMethodAdapters(registry);\n+\t\tregisterAfterEachMethodAdapters(registry);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(extensionContext)\n \t\t\t\t.withThrowableCollector(throwableCollector)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"788ec1aa3ff5103aeb622c252a15036dd7fa70d4": {
			"type": "Ybodychange",
			"commitMessage": "Introduce method getConfigurationParameter() in ExtensionContext\n\nCloses #1196\n",
			"commitDate": "2017-12-23, 7:19 AM",
			"commitName": "788ec1aa3ff5103aeb622c252a15036dd7fa70d4",
			"commitAuthor": "Christian Stein",
			"commitDateOld": "2017-11-03, 3:03 PM",
			"commitNameOld": "5d7d85d0b0fb8b7e9e811b2dd28c955a891d4c55",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 49.72,
			"commitsBetweenForRepo": 112,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,27 +1,27 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tLifecycle lifecycle = getTestInstanceLifecycle(testClass, context.getConfigurationParameters());\n \n \t\tthis.beforeAllMethods = findBeforeAllMethods(testClass, lifecycle == Lifecycle.PER_METHOD);\n \t\tthis.afterAllMethods = findAfterAllMethods(testClass, lifecycle == Lifecycle.PER_METHOD);\n \t\tthis.beforeEachMethods = findBeforeEachMethods(testClass);\n \t\tthis.afterEachMethods = findAfterEachMethods(testClass);\n \n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \t\tClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),\n-\t\t\tcontext.getExecutionListener(), this, throwableCollector);\n+\t\t\tcontext.getExecutionListener(), this, context.getConfigurationParameters(), throwableCollector);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(extensionContext)\n \t\t\t\t.withThrowableCollector(throwableCollector)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"5d7d85d0b0fb8b7e9e811b2dd28c955a891d4c55": {
			"type": "Ybodychange",
			"commitMessage": "Simplify TestInstanceProvider creation\n\nIssue: #1103\n",
			"commitDate": "2017-11-03, 3:03 PM",
			"commitName": "5d7d85d0b0fb8b7e9e811b2dd28c955a891d4c55",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-11-03, 3:03 PM",
			"commitNameOld": "36b2b8b289263d52994cb820cdb93916f0815e1d",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,27 +1,27 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tLifecycle lifecycle = getTestInstanceLifecycle(testClass, context.getConfigurationParameters());\n \n \t\tthis.beforeAllMethods = findBeforeAllMethods(testClass, lifecycle == Lifecycle.PER_METHOD);\n \t\tthis.afterAllMethods = findAfterAllMethods(testClass, lifecycle == Lifecycle.PER_METHOD);\n \t\tthis.beforeEachMethods = findBeforeEachMethods(testClass);\n \t\tthis.afterEachMethods = findAfterEachMethods(testClass);\n \n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \t\tClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),\n \t\t\tcontext.getExecutionListener(), this, throwableCollector);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n-\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext, lifecycle))\n+\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(extensionContext)\n \t\t\t\t.withThrowableCollector(throwableCollector)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f750c85946939119d05966c65fc81ce68444b2b9": {
			"type": "Ybodychange",
			"commitMessage": "Introduce config param for default test instance lifecycle\n\nPrior to this commit, the test instance lifecycle mode could only be\nchanged from the default per-method value to per-class by annotating\nevery single test class or test interface with @TestInstance(PER_CLASS).\n\nThis commit addresses this issue by introducing a new configuration\nparameter that allows the default test instance lifecycle semantics to\nbe set on a per-project basis (e.g., for a build).\n\nSpecifically, the default test instance lifecycle mode can now be set\nvia a configuration parameter or JVM system property named\n`junit.jupiter.testinstance.lifecycle.default` with a value equal to\none of the enum constants in TestInstance.Lifecycle.\n\nIssue: #905\n",
			"commitDate": "2017-08-12, 2:53 PM",
			"commitName": "f750c85946939119d05966c65fc81ce68444b2b9",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-08-04, 1:55 PM",
			"commitNameOld": "362a4535b473654401befffce46cd268fad36e38",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 8.04,
			"commitsBetweenForRepo": 13,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,25 +1,27 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n-\t\tthis.beforeAllMethods = findBeforeAllMethods(testClass, this.lifecycle == Lifecycle.PER_METHOD);\n-\t\tthis.afterAllMethods = findAfterAllMethods(testClass, this.lifecycle == Lifecycle.PER_METHOD);\n+\t\tLifecycle lifecycle = getTestInstanceLifecycle(testClass, context.getConfigurationParameters());\n+\n+\t\tthis.beforeAllMethods = findBeforeAllMethods(testClass, lifecycle == Lifecycle.PER_METHOD);\n+\t\tthis.afterAllMethods = findAfterAllMethods(testClass, lifecycle == Lifecycle.PER_METHOD);\n \t\tthis.beforeEachMethods = findBeforeEachMethods(testClass);\n \t\tthis.afterEachMethods = findAfterEachMethods(testClass);\n \n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \t\tClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),\n \t\t\tcontext.getExecutionListener(), this, throwableCollector);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n-\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext))\n+\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext, lifecycle))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(extensionContext)\n \t\t\t\t.withThrowableCollector(throwableCollector)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"6229d4cad76364862667f8f609f880fd9eed43eb": {
			"type": "Ybodychange",
			"commitMessage": "Report lifecycle configuration errors during test execution\n\nPrior to this commit, configuration errors for lifecycle methods would\nresult in the entire test plan being aborted during the discovery phase.\nConsequently, no tests would be executed in such scenarios.\n\nThis commit addresses this issue by ensuring that configuration errors\nregarding lifecycle methods annotated with @BeforeAll, @AfterAll,\nBeforeEach, or @AfterEach are now reported during the execution of the\naffected test class.\n\nIssue: #971\n",
			"commitDate": "2017-07-21, 2:22 PM",
			"commitName": "6229d4cad76364862667f8f609f880fd9eed43eb",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-07-14, 1:12 PM",
			"commitNameOld": "4e4112523dd1cd15bdb74f92a76013cdaecb8495",
			"commitAuthorOld": "Stefan Birkner",
			"daysBetweenCommits": 7.05,
			"commitsBetweenForRepo": 55,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,25 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n+\t\tthis.beforeAllMethods = findBeforeAllMethods(testClass, this.lifecycle == Lifecycle.PER_METHOD);\n+\t\tthis.afterAllMethods = findAfterAllMethods(testClass, this.lifecycle == Lifecycle.PER_METHOD);\n+\t\tthis.beforeEachMethods = findBeforeEachMethods(testClass);\n+\t\tthis.afterEachMethods = findAfterEachMethods(testClass);\n+\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \t\tClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),\n \t\t\tcontext.getExecutionListener(), this, throwableCollector);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(extensionContext)\n \t\t\t\t.withThrowableCollector(throwableCollector)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"17360a5a086050e41718aa11d7e7c19c02c79d72": {
			"type": "Ybodychange",
			"commitMessage": "Provide container-level exceptions to extensions via ExtensionContext\n\nIssue: #899\n",
			"commitDate": "2017-07-01, 10:05 AM",
			"commitName": "17360a5a086050e41718aa11d7e7c19c02c79d72",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-07-01, 10:05 AM",
			"commitNameOld": "943c53f20dace9e1fd6968e377ed4c9dc67f858d",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,20 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n+\t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \t\tClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),\n-\t\t\tcontext.getExecutionListener(), this);\n+\t\t\tcontext.getExecutionListener(), this, throwableCollector);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(extensionContext)\n-\t\t\t\t.withThrowableCollector(new ThrowableCollector())\n+\t\t\t\t.withThrowableCollector(throwableCollector)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7": {
			"type": "Ybodychange",
			"commitMessage": "Remove TestExtensionContext and ContainerExtensionContext\n\nIssue: #901\n",
			"commitDate": "2017-07-01, 5:45 AM",
			"commitName": "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-06-30, 10:16 AM",
			"commitNameOld": "323dac88536a9768ea92183598e695b39da62a1a",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.81,
			"commitsBetweenForRepo": 7,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,19 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n-\t\tClassBasedContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n-\t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n+\t\tClassExtensionContext extensionContext = new ClassExtensionContext(context.getExtensionContext(),\n+\t\t\tcontext.getExecutionListener(), this);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n-\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext))\n+\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n-\t\t\t\t.withExtensionContext(containerExtensionContext)\n+\t\t\t\t.withExtensionContext(extensionContext)\n \t\t\t\t.withThrowableCollector(new ThrowableCollector())\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"323dac88536a9768ea92183598e695b39da62a1a": {
			"type": "Ybodychange",
			"commitMessage": "Polishing\n",
			"commitDate": "2017-06-30, 10:16 AM",
			"commitName": "323dac88536a9768ea92183598e695b39da62a1a",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-06-30, 10:16 AM",
			"commitNameOld": "902d36a3e915aed15063764f108ace96a41140b4",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,19 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tClassBasedContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n \n-\t\tTestInstanceProvider testInstanceProvider = testInstanceProvider(context, registry, containerExtensionContext);\n-\n \t\t// @formatter:off\n \t\treturn context.extend()\n-\t\t\t\t.withTestInstanceProvider(testInstanceProvider)\n+\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.withThrowableCollector(new ThrowableCollector())\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"902d36a3e915aed15063764f108ace96a41140b4": {
			"type": "Ybodychange",
			"commitMessage": "Remove duplication and simplify control flow by making it more explicit\n\nIssue: #419\n",
			"commitDate": "2017-06-30, 10:16 AM",
			"commitName": "902d36a3e915aed15063764f108ace96a41140b4",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-06-30, 10:16 AM",
			"commitNameOld": "4422e64ef82a6e7f3800a7fa77cebeab9361085e",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,21 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tClassBasedContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n \n-\t\t// Reuse TestInstanceProvider for potential transparent instance caching.\n \t\tTestInstanceProvider testInstanceProvider = testInstanceProvider(context, registry, containerExtensionContext);\n \n-\t\t// Eagerly load test instance for BeforeAllCallbacks, if necessary,\n-\t\t// and store the instance in the ContainerExtensionContext.\n-\t\tObject testInstance = (this.lifecycle == Lifecycle.PER_CLASS\n-\t\t\t\t? testInstanceProvider.getTestInstance(Optional.empty()) : null);\n-\t\tcontainerExtensionContext.setTestInstance(testInstance);\n-\n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider)\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.withThrowableCollector(new ThrowableCollector())\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"bf1e000a7f68076e2921ac4f020e5f8c24330e84": {
			"type": "Ybodychange",
			"commitMessage": "Provide test instance to container level extensions\n\nIssue: #419\n",
			"commitDate": "2017-06-30, 10:16 AM",
			"commitName": "bf1e000a7f68076e2921ac4f020e5f8c24330e84",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-06-30, 10:16 AM",
			"commitNameOld": "fdadf905479b4cd63f1987d08940eddfbf89d088",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,28 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n-\t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n+\t\tClassBasedContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n \n+\t\t// Reuse TestInstanceProvider for potential transparent instance caching.\n+\t\tTestInstanceProvider testInstanceProvider = testInstanceProvider(context, registry, containerExtensionContext);\n+\n+\t\t// Eagerly load test instance for BeforeAllCallbacks, if necessary,\n+\t\t// and store the instance in the ContainerExtensionContext.\n+\t\tObject testInstance = (this.lifecycle == Lifecycle.PER_CLASS\n+\t\t\t\t? testInstanceProvider.getTestInstance(Optional.empty()) : null);\n+\t\tcontainerExtensionContext.setTestInstance(testInstance);\n+\n \t\t// @formatter:off\n \t\treturn context.extend()\n-\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext))\n+\t\t\t\t.withTestInstanceProvider(testInstanceProvider)\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.withThrowableCollector(new ThrowableCollector())\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c95005adbe2f754997a43009a47124f725496530": {
			"type": "Ybodychange",
			"commitMessage": "Share ThrowableCollector b/t ExecutionContexts & ExtensionContexts\n",
			"commitDate": "2016-06-26, 10:04 AM",
			"commitName": "c95005adbe2f754997a43009a47124f725496530",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-06-26, 9:25 AM",
			"commitNameOld": "41e5e579821975c222850105c911aeecb67af8cf",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,18 +1,19 @@\n \tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n+\t\t\t\t.withThrowableCollector(new ThrowableCollector())\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"babcc661bd906b38a272f287ac8779669268fc58": {
			"type": "Ymultichange(Yparameterchange,Yreturntypechange)",
			"commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
			"commitDate": "2016-06-20, 7:08 AM",
			"commitName": "babcc661bd906b38a272f287ac8779669268fc58",
			"commitAuthor": "JUnit Team",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
					"commitDate": "2016-06-20, 7:08 AM",
					"commitName": "babcc661bd906b38a272f287ac8779669268fc58",
					"commitAuthor": "JUnit Team",
					"commitDateOld": "2016-06-20, 2:59 AM",
					"commitNameOld": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
					"commitAuthorOld": "JUnit Team",
					"daysBetweenCommits": 0.17,
					"commitsBetweenForRepo": 7,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,18 +1,18 @@\n-\tpublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n+\tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[context-JUnit5EngineExecutionContext]",
						"newValue": "[context-JupiterEngineExecutionContext]"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
					"commitDate": "2016-06-20, 7:08 AM",
					"commitName": "babcc661bd906b38a272f287ac8779669268fc58",
					"commitAuthor": "JUnit Team",
					"commitDateOld": "2016-06-20, 2:59 AM",
					"commitNameOld": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
					"commitAuthorOld": "JUnit Team",
					"daysBetweenCommits": 0.17,
					"commitsBetweenForRepo": 7,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,18 +1,18 @@\n-\tpublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n+\tpublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "JUnit5EngineExecutionContext",
						"newValue": "JupiterEngineExecutionContext"
					}
				}
			]
		},
		"4972eb58d680a30e8fbd1ffb6cdc6477bef83374": {
			"type": "Yfilerename",
			"commitMessage": "Rename all JUnit 5 artifacts to platform, jupiter, & vintage\n\nIssue: #286\n",
			"commitDate": "2016-06-20, 2:59 AM",
			"commitName": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2016-06-19, 12:04 PM",
			"commitNameOld": "e5b7300ba40a0420e310d463a63ea4c10cc8d9b9",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.62,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
				"newPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java"
			}
		},
		"507e50872c6df8a66c32f45cb2153555f510c4b1": {
			"type": "Yfilerename",
			"commitMessage": "Rename base package of junit5-api and junit5-engine to org.junit.jupiter\n",
			"commitDate": "2016-06-18, 2:50 PM",
			"commitName": "507e50872c6df8a66c32f45cb2153555f510c4b1",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2016-06-18, 1:31 PM",
			"commitNameOld": "f7741ec30a0578d2ffaf76bca83d4fa31eb666a5",
			"commitAuthorOld": "JUnit Team",
			"daysBetweenCommits": 0.06,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
				"newPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java"
			}
		},
		"65e0bd5483c8923393fa85955ddaf24d68fd8042": {
			"type": "Ybodychange",
			"commitMessage": "Apply InstancePostProcessor extensions for every test instance\n\nPrior to this commit, InstancePostProcessor extensions were only applied\nduring the execution of a MethodTestDescriptor instead of at the point\nwhen such an instance was physically instantiated. Consequently,\nInstancePostProcessor extensions were never applied to instances of\nouter classes when test methods in a nested class were executed, which\nlead to improperly initialized outer instances (e.g,\nNullPointerExceptions, etc.).\n\nThis commit fixes this bug by relocating the invocation of\nInstancePostProcessor extensions to places in the framework where test\ninstances are physically instantiated (i.e., in ClassTestDescriptor and\nNestedClassTestDescriptor).\n\nFurthermore, the argument list for the postProcessTestInstance() method\nin the InstancePostProcessor API has been modified to accept the test\ninstance and a generic ExtensionContext.\n\nIssue: #252\n",
			"commitDate": "2016-05-13, 7:55 AM",
			"commitName": "65e0bd5483c8923393fa85955ddaf24d68fd8042",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-02, 4:18 PM",
			"commitNameOld": "dfe33b0e7e22b64b712593ea3b635675edbd6f73",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 10.65,
			"commitsBetweenForRepo": 42,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,18 +1,18 @@\n \tpublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n-\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n+\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext))\n \t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"dfe33b0e7e22b64b712593ea3b635675edbd6f73": {
			"type": "Ybodychange",
			"commitMessage": "Polish JUnit 5 test descriptors\n",
			"commitDate": "2016-05-02, 4:18 PM",
			"commitName": "dfe33b0e7e22b64b712593ea3b635675edbd6f73",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-02, 4:18 PM",
			"commitNameOld": "6b575f2ee5f02288a774ff0a85ce3a3e3cb6946f",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,18 @@\n \tpublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n-\t\tcontext = context.extend().withExtensionRegistry(registry).build();\n-\n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n+\t\t\t\t.withExtensionRegistry(registry)\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"6b575f2ee5f02288a774ff0a85ce3a3e3cb6946f": {
			"type": "Ybodychange",
			"commitMessage": "Eagerly load and validate @BeforeEach & @AfterEach methods\n\nWith this commit @BeforeEach and @AfterEach methods are looked up and\nvalidated eagerly during the discovery phase instead of late in the game\nduring the execution phase.\n\nThis commit also extracts a new LifecycleMethodUtils class from the\nClassTestDescriptor.\n\nIssue: #232\n",
			"commitDate": "2016-05-02, 4:18 PM",
			"commitName": "6b575f2ee5f02288a774ff0a85ce3a3e3cb6946f",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-02, 10:58 AM",
			"commitNameOld": "b691e6a02b9436939bf1867156aa8d8cea4e3fbf",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.22,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,19 @@\n \tpublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n-\t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(testClass,\n+\t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tcontext = context.extend().withExtensionRegistry(registry).build();\n \n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b691e6a02b9436939bf1867156aa8d8cea4e3fbf": {
			"type": "Ybodychange",
			"commitMessage": "Do not synthesize @BeforeAll & @AfterAll methods as extensions\n\nThis commit avoids unnecessary streaming and synthesizing of extensions\nas lambda expressions for @BeforeAll and @AfterAll methods. Instead,\n@BeforeAll and @AfterAll methods are now invoked directly using\nstandard for-loops.\n\nIssue: #232\n",
			"commitDate": "2016-05-02, 10:58 AM",
			"commitName": "b691e6a02b9436939bf1867156aa8d8cea4e3fbf",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-02, 9:30 AM",
			"commitNameOld": "b2ba6b95138382f25ca757a5ca2a7295bee4c3b8",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.06,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,19 @@\n \tpublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n \t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n-\t\tregisterBeforeAllMethodAdapters(registry);\n-\t\tregisterAfterAllMethodAdapters(registry);\n \t\tregisterBeforeEachMethodAdapters(registry);\n \t\tregisterAfterEachMethodAdapters(registry);\n \n \t\tcontext = context.extend().withExtensionRegistry(registry).build();\n \n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b2ba6b95138382f25ca757a5ca2a7295bee4c3b8": {
			"type": "Ybodychange",
			"commitMessage": "Do not mix execution of extensions and user code\n\nThis commit separates the execution of extensions and user code with\nregard to test lifecycle callbacks.\n\nIssue: #232\n",
			"commitDate": "2016-05-02, 9:30 AM",
			"commitName": "b2ba6b95138382f25ca757a5ca2a7295bee4c3b8",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-02, 9:30 AM",
			"commitNameOld": "36b132b0fc63a723ec0926e58921379020326c2b",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,21 @@\n \tpublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n-\t\tExtensionRegistry newExtensionRegistry = populateNewExtensionRegistryFromExtendWith(testClass,\n+\t\tExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(testClass,\n \t\t\tcontext.getExtensionRegistry());\n \n-\t\tregisterBeforeAllMethods(newExtensionRegistry);\n-\t\tregisterAfterAllMethods(newExtensionRegistry);\n-\t\tregisterBeforeEachMethods(newExtensionRegistry);\n-\t\tregisterAfterEachMethods(newExtensionRegistry);\n+\t\tregisterBeforeAllMethodAdapters(registry);\n+\t\tregisterAfterAllMethodAdapters(registry);\n+\t\tregisterBeforeEachMethodAdapters(registry);\n+\t\tregisterAfterEachMethodAdapters(registry);\n \n-\t\tcontext = context.extend().withExtensionRegistry(newExtensionRegistry).build();\n+\t\tcontext = context.extend().withExtensionRegistry(registry).build();\n \n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c0a0e14d2c11bb77bfe25aee9594b04e793b04aa": {
			"type": "Ybodychange",
			"commitMessage": "Rename TestExtensionRegistry to ExtensionRegistry\n\nIssue: #112\n",
			"commitDate": "2016-01-21, 6:03 AM",
			"commitName": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-01-19, 1:41 AM",
			"commitNameOld": "2e70f575f1e3803fc3d934de6932524efca4fe8a",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 2.18,
			"commitsBetweenForRepo": 73,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,21 @@\n \tpublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n-\t\tTestExtensionRegistry newExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testClass,\n-\t\t\tcontext.getTestExtensionRegistry());\n+\t\tExtensionRegistry newExtensionRegistry = populateNewExtensionRegistryFromExtendWith(testClass,\n+\t\t\tcontext.getExtensionRegistry());\n \n \t\tregisterBeforeAllMethods(newExtensionRegistry);\n \t\tregisterAfterAllMethods(newExtensionRegistry);\n \t\tregisterBeforeEachMethods(newExtensionRegistry);\n \t\tregisterAfterEachMethods(newExtensionRegistry);\n \n-\t\tcontext = context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n+\t\tcontext = context.extend().withExtensionRegistry(newExtensionRegistry).build();\n \n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b4957a135bb9b9eba12c8bcb154c8cfbfb4cc566": {
			"type": "Ybodychange",
			"commitMessage": "Introduce extended reporting according to #57\n",
			"commitDate": "2016-01-14, 7:33 AM",
			"commitName": "b4957a135bb9b9eba12c8bcb154c8cfbfb4cc566",
			"commitAuthor": "Matthias Merdes",
			"commitDateOld": "2016-01-13, 3:34 PM",
			"commitNameOld": "9d0ea36067b38c05ca3fd5a0312881d3bb1f6bcf",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.67,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,21 @@\n \tpublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n \t\tTestExtensionRegistry newExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testClass,\n \t\t\tcontext.getTestExtensionRegistry());\n \n \t\tregisterBeforeAllMethods(newExtensionRegistry);\n \t\tregisterAfterAllMethods(newExtensionRegistry);\n \t\tregisterBeforeEachMethods(newExtensionRegistry);\n \t\tregisterAfterEachMethods(newExtensionRegistry);\n \n \t\tcontext = context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n \n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n-\t\t\tcontext.getExtensionContext(), this);\n+\t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0027ade00fd483e08714ece1021a7715bb1855da": {
			"type": "Ymultichange(Yrename,Yexceptionschange,Ybodychange)",
			"commitMessage": "Added skipping for methods and classes.\nSome duplication and naming issues left.\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nGradleware (https://gradle.org) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-22, 2:34 AM",
			"commitName": "0027ade00fd483e08714ece1021a7715bb1855da",
			"commitAuthor": "Johannes Link",
			"subchanges": [
				{
					"type": "Yrename",
					"commitMessage": "Added skipping for methods and classes.\nSome duplication and naming issues left.\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nGradleware (https://gradle.org) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
					"commitDate": "2015-12-22, 2:34 AM",
					"commitName": "0027ade00fd483e08714ece1021a7715bb1855da",
					"commitAuthor": "Johannes Link",
					"commitDateOld": "2015-12-20, 1:28 AM",
					"commitNameOld": "6e59ae2020944f3ec9715ce8f5c1ac36db3e89ef",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 2.05,
					"commitsBetweenForRepo": 17,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,22 +1,20 @@\n-\tpublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n+\tpublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n \t\tTestExtensionRegistry newExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testClass,\n \t\t\tcontext.getTestExtensionRegistry());\n \t\tregisterBeforeAllMethods(newExtensionRegistry);\n \t\tregisterAfterAllMethods(newExtensionRegistry);\n \t\tregisterBeforeEachMethods(newExtensionRegistry);\n \t\tregisterAfterEachMethods(newExtensionRegistry);\n \n \t\tcontext = context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n \n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), this);\n \n-\t\tinvokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n-\n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "beforeAll",
						"newValue": "prepare"
					}
				},
				{
					"type": "Yexceptionschange",
					"commitMessage": "Added skipping for methods and classes.\nSome duplication and naming issues left.\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nGradleware (https://gradle.org) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
					"commitDate": "2015-12-22, 2:34 AM",
					"commitName": "0027ade00fd483e08714ece1021a7715bb1855da",
					"commitAuthor": "Johannes Link",
					"commitDateOld": "2015-12-20, 1:28 AM",
					"commitNameOld": "6e59ae2020944f3ec9715ce8f5c1ac36db3e89ef",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 2.05,
					"commitsBetweenForRepo": 17,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,22 +1,20 @@\n-\tpublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n+\tpublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n \t\tTestExtensionRegistry newExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testClass,\n \t\t\tcontext.getTestExtensionRegistry());\n \t\tregisterBeforeAllMethods(newExtensionRegistry);\n \t\tregisterAfterAllMethods(newExtensionRegistry);\n \t\tregisterBeforeEachMethods(newExtensionRegistry);\n \t\tregisterAfterEachMethods(newExtensionRegistry);\n \n \t\tcontext = context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n \n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), this);\n \n-\t\tinvokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n-\n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[Throwable]",
						"newValue": "[]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Added skipping for methods and classes.\nSome duplication and naming issues left.\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nGradleware (https://gradle.org) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
					"commitDate": "2015-12-22, 2:34 AM",
					"commitName": "0027ade00fd483e08714ece1021a7715bb1855da",
					"commitAuthor": "Johannes Link",
					"commitDateOld": "2015-12-20, 1:28 AM",
					"commitNameOld": "6e59ae2020944f3ec9715ce8f5c1ac36db3e89ef",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 2.05,
					"commitsBetweenForRepo": 17,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,22 +1,20 @@\n-\tpublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n+\tpublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n \t\tTestExtensionRegistry newExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testClass,\n \t\t\tcontext.getTestExtensionRegistry());\n \t\tregisterBeforeAllMethods(newExtensionRegistry);\n \t\tregisterAfterAllMethods(newExtensionRegistry);\n \t\tregisterBeforeEachMethods(newExtensionRegistry);\n \t\tregisterAfterEachMethods(newExtensionRegistry);\n \n \t\tcontext = context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n \n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), this);\n \n-\t\tinvokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n-\n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"b90f9c883f8bb6c0ea212a8b0acae113e17fecfb": {
			"type": "Ybodychange",
			"commitMessage": "BeforeAll and AfterAll methdos now also work.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-17, 2:37 PM",
			"commitName": "b90f9c883f8bb6c0ea212a8b0acae113e17fecfb",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-12-17, 12:54 PM",
			"commitNameOld": "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 0.07,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,22 @@\n \tpublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n \t\tTestExtensionRegistry newExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testClass,\n \t\t\tcontext.getTestExtensionRegistry());\n+\t\tregisterBeforeAllMethods(newExtensionRegistry);\n+\t\tregisterAfterAllMethods(newExtensionRegistry);\n \t\tregisterBeforeEachMethods(newExtensionRegistry);\n \t\tregisterAfterEachMethods(newExtensionRegistry);\n \n \t\tcontext = context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n \n \t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n \t\t\tcontext.getExtensionContext(), this);\n \n \t\tinvokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n \n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c2d9a533b97ee808e5f51ffd94eb4a0524ff8362": {
			"type": "Ymultichange(Yexceptionschange,Ybodychange)",
			"commitMessage": "Before/AfterAll callbacks work. Before/AfterAll methods not yet.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-17, 12:54 PM",
			"commitName": "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
			"commitAuthor": "Johannes Link",
			"subchanges": [
				{
					"type": "Yexceptionschange",
					"commitMessage": "Before/AfterAll callbacks work. Before/AfterAll methods not yet.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
					"commitDate": "2015-12-17, 12:54 PM",
					"commitName": "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
					"commitAuthor": "Johannes Link",
					"commitDateOld": "2015-12-17, 5:48 AM",
					"commitNameOld": "8db7e41d03b3d1f989c458e040f86f7e30e153d7",
					"commitAuthorOld": "Johannes Link",
					"daysBetweenCommits": 0.3,
					"commitsBetweenForRepo": 5,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,15 +1,20 @@\n-\tpublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n+\tpublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n \t\tTestExtensionRegistry newExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testClass,\n \t\t\tcontext.getTestExtensionRegistry());\n \t\tregisterBeforeEachMethods(newExtensionRegistry);\n \t\tregisterAfterEachMethods(newExtensionRegistry);\n \n \t\tcontext = context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n \n+\t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n+\t\t\tcontext.getExtensionContext(), this);\n+\n+\t\tinvokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n+\n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n-\t\t\t\t.withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this))\n+\t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[]",
						"newValue": "[Throwable]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Before/AfterAll callbacks work. Before/AfterAll methods not yet.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
					"commitDate": "2015-12-17, 12:54 PM",
					"commitName": "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
					"commitAuthor": "Johannes Link",
					"commitDateOld": "2015-12-17, 5:48 AM",
					"commitNameOld": "8db7e41d03b3d1f989c458e040f86f7e30e153d7",
					"commitAuthorOld": "Johannes Link",
					"daysBetweenCommits": 0.3,
					"commitsBetweenForRepo": 5,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,15 +1,20 @@\n-\tpublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n+\tpublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n \t\tTestExtensionRegistry newExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testClass,\n \t\t\tcontext.getTestExtensionRegistry());\n \t\tregisterBeforeEachMethods(newExtensionRegistry);\n \t\tregisterAfterEachMethods(newExtensionRegistry);\n \n \t\tcontext = context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n \n+\t\tContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n+\t\t\tcontext.getExtensionContext(), this);\n+\n+\t\tinvokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n+\n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n-\t\t\t\t.withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this))\n+\t\t\t\t.withExtensionContext(containerExtensionContext)\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"8db7e41d03b3d1f989c458e040f86f7e30e153d7": {
			"type": "Ybodychange",
			"commitMessage": "BeforeEach and AfterEach methods are now registered as ExtensionPoints\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-17, 5:48 AM",
			"commitName": "8db7e41d03b3d1f989c458e040f86f7e30e153d7",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-12-14, 9:45 PM",
			"commitNameOld": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 2.34,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,15 @@\n \tpublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n-\t\tcontext = context.extend().withTestExtensionRegistry(\n-\t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n+\t\tTestExtensionRegistry newExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testClass,\n+\t\t\tcontext.getTestExtensionRegistry());\n+\t\tregisterBeforeEachMethods(newExtensionRegistry);\n+\t\tregisterAfterEachMethods(newExtensionRegistry);\n+\n+\t\tcontext = context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n+\n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n-\t\t\t\t.withBeforeEachCallback(beforeEachCallback(context))\n-\t\t\t\t.withAfterEachCallback(afterEachCallback(context))\n \t\t\t\t.withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this))\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"e9d19c214a3117efdd9295bdb1b2ddb4f7e67987": {
			"type": "Ybodychange",
			"commitMessage": "Before- and AfterEachExtensionPoints added. Before/AfterEach method yet to come.\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-13, 1:41 PM",
			"commitName": "e9d19c214a3117efdd9295bdb1b2ddb4f7e67987",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-12-12, 9:55 AM",
			"commitNameOld": "634890bff8f38128db31c244486d257b8ef729d7",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 1.16,
			"commitsBetweenForRepo": 13,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,12 @@\n \tpublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n+\t\tcontext = context.extend().withTestExtensionRegistry(\n+\t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withBeforeEachCallback(beforeEachCallback(context))\n \t\t\t\t.withAfterEachCallback(afterEachCallback(context))\n-\t\t\t\t.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry()))\n \t\t\t\t.withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this))\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"634890bff8f38128db31c244486d257b8ef729d7": {
			"type": "Ybodychange",
			"commitMessage": "Added ClassBasedExtensionContext and getParent implementations\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nsynyx GmbH & Co. KG (http://www.synyx.de) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-12, 9:55 AM",
			"commitName": "634890bff8f38128db31c244486d257b8ef729d7",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-12-10, 6:39 AM",
			"commitNameOld": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 2.14,
			"commitsBetweenForRepo": 30,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,11 @@\n \tpublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withBeforeEachCallback(beforeEachCallback(context))\n \t\t\t\t.withAfterEachCallback(afterEachCallback(context))\n \t\t\t\t.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry()))\n+\t\t\t\t.withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this))\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3f9c11b9326b7d3051cb2a50568cd91113a0c0da": {
			"type": "Ymultichange(Yparameterchange,Yreturntypechange)",
			"commitMessage": "Group discussion renaming results\n",
			"commitDate": "2015-12-10, 6:39 AM",
			"commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
			"commitAuthor": "Marc Philipp",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Group discussion renaming results\n",
					"commitDate": "2015-12-10, 6:39 AM",
					"commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-09, 3:17 PM",
					"commitNameOld": "0e14ad4525a5ade99dacdd76d0ab27223f57ebd4",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.64,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,10 +1,10 @@\n-\tpublic JUnit5Context beforeAll(JUnit5Context context) {\n+\tpublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withBeforeEachCallback(beforeEachCallback(context))\n \t\t\t\t.withAfterEachCallback(afterEachCallback(context))\n \t\t\t\t.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry()))\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[context-JUnit5Context]",
						"newValue": "[context-JUnit5EngineExecutionContext]"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "Group discussion renaming results\n",
					"commitDate": "2015-12-10, 6:39 AM",
					"commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-09, 3:17 PM",
					"commitNameOld": "0e14ad4525a5ade99dacdd76d0ab27223f57ebd4",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.64,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,10 +1,10 @@\n-\tpublic JUnit5Context beforeAll(JUnit5Context context) {\n+\tpublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withBeforeEachCallback(beforeEachCallback(context))\n \t\t\t\t.withAfterEachCallback(afterEachCallback(context))\n \t\t\t\t.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry()))\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "JUnit5Context",
						"newValue": "JUnit5EngineExecutionContext"
					}
				}
			]
		},
		"fc5ff8d87c124e43601f64da76668e516758a74a": {
			"type": "Ybodychange",
			"commitMessage": "Execute @AfterEach methods in AfterEachCallback\n",
			"commitDate": "2015-12-09, 2:37 PM",
			"commitName": "fc5ff8d87c124e43601f64da76668e516758a74a",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-09, 2:16 PM",
			"commitNameOld": "efb867427dd0722262fea5c869ac37cd64ea0070",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,9 +1,10 @@\n \tpublic JUnit5Context beforeAll(JUnit5Context context) {\n \t\t// @formatter:off\n \t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withBeforeEachCallback(beforeEachCallback(context))\n+\t\t\t\t.withAfterEachCallback(afterEachCallback(context))\n \t\t\t\t.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry()))\n \t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"efb867427dd0722262fea5c869ac37cd64ea0070": {
			"type": "Ybodychange",
			"commitMessage": "Use Builder pattern to extend JUnit5Context\n",
			"commitDate": "2015-12-09, 2:16 PM",
			"commitName": "efb867427dd0722262fea5c869ac37cd64ea0070",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-09, 1:34 PM",
			"commitNameOld": "3cbb596f9b35b903e29675841eb20ab97e8cbb88",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,8 +1,9 @@\n \tpublic JUnit5Context beforeAll(JUnit5Context context) {\n \t\t// @formatter:off\n-\t\treturn context\n+\t\treturn context.extend()\n \t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n \t\t\t\t.withBeforeEachCallback(beforeEachCallback(context))\n-\t\t\t\t.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry()));\n+\t\t\t\t.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry()))\n+\t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"67ec62513564b48741925f79132f3fe6427e48b3": {
			"type": "Ybodychange",
			"commitMessage": "Populate TestExtensionRegistry in JUnit5Context and call MethodParameterResolver\n",
			"commitDate": "2015-12-09, 6:06 AM",
			"commitName": "67ec62513564b48741925f79132f3fe6427e48b3",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-09, 3:56 AM",
			"commitNameOld": "fa681a536942811f712ca91be70f5510ca472020",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.09,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,4 +1,8 @@\n \tpublic JUnit5Context beforeAll(JUnit5Context context) {\n-\t\treturn context.withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(\n-\t\t\tbeforeEachCallback(context));\n+\t\t// @formatter:off\n+\t\treturn context\n+\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n+\t\t\t\t.withBeforeEachCallback(beforeEachCallback(context))\n+\t\t\t\t.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry()));\n+\t\t// @formatter:on\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"fa681a536942811f712ca91be70f5510ca472020": {
			"type": "Ybodychange",
			"commitMessage": "Doubly nested @BeforeEach works\n",
			"commitDate": "2015-12-09, 3:56 AM",
			"commitName": "fa681a536942811f712ca91be70f5510ca472020",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-09, 2:56 AM",
			"commitNameOld": "6c643a69bab0f405bdcd9db8318f991e1c88ef63",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.04,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,3 +1,4 @@\n \tpublic JUnit5Context beforeAll(JUnit5Context context) {\n-\t\treturn context.withTestInstanceProvider(testInstanceProvider(context));\n+\t\treturn context.withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(\n+\t\t\tbeforeEachCallback(context));\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"6c643a69bab0f405bdcd9db8318f991e1c88ef63": {
			"type": "Ybodychange",
			"commitMessage": "Test execution of @Nested test classes\n",
			"commitDate": "2015-12-09, 2:56 AM",
			"commitName": "6c643a69bab0f405bdcd9db8318f991e1c88ef63",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-09, 2:08 AM",
			"commitNameOld": "470866bc19cac8717ac77b26efc1fe703bed264a",
			"commitAuthorOld": "JUnit Team",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,3 +1,3 @@\n \tpublic JUnit5Context beforeAll(JUnit5Context context) {\n-\t\treturn context.withTestInstanceProvider(testInstanceProvider());\n+\t\treturn context.withTestInstanceProvider(testInstanceProvider(context));\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"470866bc19cac8717ac77b26efc1fe703bed264a": {
			"type": "Ymovefromfile",
			"commitMessage": "Reincarnate existing SpecificationResolver\n",
			"commitDate": "2015-12-09, 2:08 AM",
			"commitName": "470866bc19cac8717ac77b26efc1fe703bed264a",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2015-12-08, 6:55 AM",
			"commitNameOld": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.8,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5ClassDescriptor.java",
				"newPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
				"oldMethodName": "beforeAll",
				"newMethodName": "beforeAll"
			}
		},
		"57b31220d25f59bb4aa4903dfee4b8ec2be4525e": {
			"type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
			"commitMessage": "TestEngine-specific context using type parameter\n",
			"commitDate": "2015-12-08, 6:55 AM",
			"commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
			"commitAuthor": "Marc Philipp",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "TestEngine-specific context using type parameter\n",
					"commitDate": "2015-12-08, 6:55 AM",
					"commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-08, 6:32 AM",
					"commitNameOld": "28ffd5ee9d1e996133445cac2256407f28380e91",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.02,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,3 +1,3 @@\n-\tpublic Context beforeAll(Context context) {\n-\t\treturn context.with(\"TestInstanceProvider\", testInstanceProvider());\n+\tpublic JUnit5Context beforeAll(JUnit5Context context) {\n+\t\treturn context.withTestInstanceProvider(testInstanceProvider());\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[context-Context]",
						"newValue": "[context-JUnit5Context]"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "TestEngine-specific context using type parameter\n",
					"commitDate": "2015-12-08, 6:55 AM",
					"commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-08, 6:32 AM",
					"commitNameOld": "28ffd5ee9d1e996133445cac2256407f28380e91",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.02,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,3 +1,3 @@\n-\tpublic Context beforeAll(Context context) {\n-\t\treturn context.with(\"TestInstanceProvider\", testInstanceProvider());\n+\tpublic JUnit5Context beforeAll(JUnit5Context context) {\n+\t\treturn context.withTestInstanceProvider(testInstanceProvider());\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "Context",
						"newValue": "JUnit5Context"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "TestEngine-specific context using type parameter\n",
					"commitDate": "2015-12-08, 6:55 AM",
					"commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-08, 6:32 AM",
					"commitNameOld": "28ffd5ee9d1e996133445cac2256407f28380e91",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.02,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,3 +1,3 @@\n-\tpublic Context beforeAll(Context context) {\n-\t\treturn context.with(\"TestInstanceProvider\", testInstanceProvider());\n+\tpublic JUnit5Context beforeAll(JUnit5Context context) {\n+\t\treturn context.withTestInstanceProvider(testInstanceProvider());\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"28ffd5ee9d1e996133445cac2256407f28380e91": {
			"type": "Yintroduced",
			"commitMessage": "Spike tree-based \"implementation\" of JUnit5 engine\n",
			"commitDate": "2015-12-08, 6:32 AM",
			"commitName": "28ffd5ee9d1e996133445cac2256407f28380e91",
			"commitAuthor": "Marc Philipp"
		}
	},
	"sha": "77cfe71e7f787c59626198e25350545f41e968bd"
}