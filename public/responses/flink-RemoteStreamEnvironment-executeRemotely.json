{
	"repo": "https://github.com/apache/flink.git",
	"file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
	"method": {
		"longName": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles);",
		"startLine": 190,
		"methodName": "executeRemotely",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "protected"
	},
	"history": {
		"fc3ee68bb1c0676ae8825c675d0c01e25d36db7b": {
			"type": "Ybodychange",
			"commitMessage": "[FLINK-8573] Extend ProgramInvocationException message with Job ID where applicable\n\nThis closes #6169.\nThis closes #5421.\n",
			"commitDate": "2018-06-15, 12:08 AM",
			"commitName": "fc3ee68bb1c0676ae8825c675d0c01e25d36db7b",
			"commitAuthor": "Andrey Zagrebin",
			"commitDateOld": "2018-04-02, 7:59 AM",
			"commitNameOld": "af5279e9bd3dec18512a54c59982e3dc1f253cd2",
			"commitAuthorOld": "Till Rohrmann",
			"daysBetweenCommits": 73.67,
			"commitsBetweenForRepo": 475,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,46 +1,48 @@\n \tprotected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths,\n \t\t\tgetClass().getClassLoader());\n \n \t\tConfiguration configuration = new Configuration();\n \t\tconfiguration.addAll(this.clientConfiguration);\n \n \t\tconfiguration.setString(JobManagerOptions.ADDRESS, host);\n \t\tconfiguration.setInteger(JobManagerOptions.PORT, port);\n \n \t\tfinal ClusterClient<?> client;\n \t\ttry {\n \t\t\tif (CoreOptions.LEGACY_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n \t\t\t\tclient = new StandaloneClusterClient(configuration);\n \t\t\t} else {\n \t\t\t\tclient = new RestClusterClient<>(configuration, \"RemoteStreamEnvironment\");\n \t\t\t}\n \t\t}\n \t\tcatch (Exception e) {\n-\t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n+\t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(),\n+\t\t\t\tstreamGraph.getJobGraph().getJobID(), e);\n \t\t}\n \n \t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \n \t\ttry {\n \t\t\treturn client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n-\t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n+\t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term,\n+\t\t\t\tstreamGraph.getJobGraph().getJobID(), e);\n \t\t}\n \t\tfinally {\n \t\t\ttry {\n \t\t\t\tclient.shutdown();\n \t\t\t} catch (Exception e) {\n \t\t\t\tLOG.warn(\"Could not properly shut down the cluster client.\", e);\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"af5279e9bd3dec18512a54c59982e3dc1f253cd2": {
			"type": "Ybodychange",
			"commitMessage": "[FLINK-9121] [flip6] Remove Flip6 prefixes and other references\n\nRemove Flip6 prefixes and references to make Flip-6 the proper default:\n\nRename categories Flip6 -> New and OldAndFlip6 -> LegacyAndNew\n\nRemove Flip-6 from documentation\n\nRemove Flip-6 from start up scripts\n\nThis closes #5801.\n",
			"commitDate": "2018-04-02, 7:59 AM",
			"commitName": "af5279e9bd3dec18512a54c59982e3dc1f253cd2",
			"commitAuthor": "Till Rohrmann",
			"commitDateOld": "2018-02-21, 1:49 PM",
			"commitNameOld": "facf2ac67ae3ffd4cffd7c6f8536fd7953795fb9",
			"commitAuthorOld": "Till Rohrmann",
			"daysBetweenCommits": 39.72,
			"commitsBetweenForRepo": 363,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,46 +1,46 @@\n \tprotected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths,\n \t\t\tgetClass().getClassLoader());\n \n \t\tConfiguration configuration = new Configuration();\n \t\tconfiguration.addAll(this.clientConfiguration);\n \n \t\tconfiguration.setString(JobManagerOptions.ADDRESS, host);\n \t\tconfiguration.setInteger(JobManagerOptions.PORT, port);\n \n \t\tfinal ClusterClient<?> client;\n \t\ttry {\n-\t\t\tif (CoreOptions.OLD_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n+\t\t\tif (CoreOptions.LEGACY_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n \t\t\t\tclient = new StandaloneClusterClient(configuration);\n \t\t\t} else {\n \t\t\t\tclient = new RestClusterClient<>(configuration, \"RemoteStreamEnvironment\");\n \t\t\t}\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n \t\t}\n \n \t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \n \t\ttry {\n \t\t\treturn client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t\tfinally {\n \t\t\ttry {\n \t\t\t\tclient.shutdown();\n \t\t\t} catch (Exception e) {\n \t\t\t\tLOG.warn(\"Could not properly shut down the cluster client.\", e);\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"facf2ac67ae3ffd4cffd7c6f8536fd7953795fb9": {
			"type": "Ybodychange",
			"commitMessage": "[FLINK-8705] [flip6] Add Flip-6 support to Remote(Stream)Environment\n\nThis commit enables the Remote(Stream)Environment to submit jobs to a Flip-6\nbased cluster. It achieves this by instantiating a RestClusterClient instead\nof a StandaloneClusterClient.\n",
			"commitDate": "2018-02-21, 1:49 PM",
			"commitName": "facf2ac67ae3ffd4cffd7c6f8536fd7953795fb9",
			"commitAuthor": "Till Rohrmann",
			"commitDateOld": "2018-01-12, 7:14 AM",
			"commitNameOld": "38d3720863c6187153174d0df57fc414b0cf8e96",
			"commitAuthorOld": "Till Rohrmann",
			"daysBetweenCommits": 40.27,
			"commitsBetweenForRepo": 407,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,41 +1,46 @@\n \tprotected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths,\n \t\t\tgetClass().getClassLoader());\n \n \t\tConfiguration configuration = new Configuration();\n \t\tconfiguration.addAll(this.clientConfiguration);\n \n \t\tconfiguration.setString(JobManagerOptions.ADDRESS, host);\n \t\tconfiguration.setInteger(JobManagerOptions.PORT, port);\n \n-\t\tStandaloneClusterClient client;\n+\t\tfinal ClusterClient<?> client;\n \t\ttry {\n-\t\t\tclient = new StandaloneClusterClient(configuration);\n-\t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n+\t\t\tif (CoreOptions.OLD_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n+\t\t\t\tclient = new StandaloneClusterClient(configuration);\n+\t\t\t} else {\n+\t\t\t\tclient = new RestClusterClient<>(configuration, \"RemoteStreamEnvironment\");\n+\t\t\t}\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n \t\t}\n \n+\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n+\n \t\ttry {\n \t\t\treturn client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t\tfinally {\n \t\t\ttry {\n \t\t\t\tclient.shutdown();\n \t\t\t} catch (Exception e) {\n \t\t\t\tLOG.warn(\"Could not properly shut down the cluster client.\", e);\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"38d3720863c6187153174d0df57fc414b0cf8e96": {
			"type": "Ybodychange",
			"commitMessage": "[FLINK-8347] [flip6] Make cluster id used by ClusterDescriptor typesafe\n\nThe ClusterDescriptor uses a typed cluster id for the ClusterClient retrieval.\nMoreover, the ClusterClient and the CustomCommandLine are typed accordingly.\n\nThis closes #5232.\n",
			"commitDate": "2018-01-12, 7:14 AM",
			"commitName": "38d3720863c6187153174d0df57fc414b0cf8e96",
			"commitAuthor": "Till Rohrmann",
			"commitDateOld": "2017-07-10, 3:41 AM",
			"commitNameOld": "fb48dc2fdeaa8f86c2a5ced3264beaf538a09d76",
			"commitAuthorOld": "zjureel",
			"daysBetweenCommits": 186.19,
			"commitsBetweenForRepo": 1232,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,41 +1,41 @@\n \tprotected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths,\n \t\t\tgetClass().getClassLoader());\n \n \t\tConfiguration configuration = new Configuration();\n \t\tconfiguration.addAll(this.clientConfiguration);\n \n \t\tconfiguration.setString(JobManagerOptions.ADDRESS, host);\n \t\tconfiguration.setInteger(JobManagerOptions.PORT, port);\n \n-\t\tClusterClient client;\n+\t\tStandaloneClusterClient client;\n \t\ttry {\n \t\t\tclient = new StandaloneClusterClient(configuration);\n \t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n \t\t}\n \n \t\ttry {\n \t\t\treturn client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t\tfinally {\n \t\t\ttry {\n \t\t\t\tclient.shutdown();\n \t\t\t} catch (Exception e) {\n \t\t\t\tLOG.warn(\"Could not properly shut down the cluster client.\", e);\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"fb48dc2fdeaa8f86c2a5ced3264beaf538a09d76": {
			"type": "Ybodychange",
			"commitMessage": "[FLINK-7099] Replace usages of deprecated JOB_MANAGER_IPC_PORT_KEY and JOB_MANAGER_IPC_ADDRESS_KEY\n\nThis closes #4278.\n",
			"commitDate": "2017-07-10, 3:41 AM",
			"commitName": "fb48dc2fdeaa8f86c2a5ced3264beaf538a09d76",
			"commitAuthor": "zjureel",
			"commitDateOld": "2017-05-22, 1:22 PM",
			"commitNameOld": "12b4185c6c09101b64e12a84c33dc4d28f95cff9",
			"commitAuthorOld": "Greg Hogan",
			"daysBetweenCommits": 48.6,
			"commitsBetweenForRepo": 303,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,41 +1,41 @@\n \tprotected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths,\n \t\t\tgetClass().getClassLoader());\n \n \t\tConfiguration configuration = new Configuration();\n \t\tconfiguration.addAll(this.clientConfiguration);\n \n-\t\tconfiguration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n-\t\tconfiguration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n+\t\tconfiguration.setString(JobManagerOptions.ADDRESS, host);\n+\t\tconfiguration.setInteger(JobManagerOptions.PORT, port);\n \n \t\tClusterClient client;\n \t\ttry {\n \t\t\tclient = new StandaloneClusterClient(configuration);\n \t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n \t\t}\n \n \t\ttry {\n \t\t\treturn client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t\tfinally {\n \t\t\ttry {\n \t\t\t\tclient.shutdown();\n \t\t\t} catch (Exception e) {\n \t\t\t\tLOG.warn(\"Could not properly shut down the cluster client.\", e);\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ddd6a99a95b56c52ea5b5153b7270b578f5479bc": {
			"type": "Ybodychange",
			"commitMessage": "[FLINK-6078] Remove CuratorFramework#close calls from ZooKeeper based HA services\n\nRemove client less factory methods from ZooKeeperUtils\n\nIntroduce default job id\n\nThis closes #3781.\n",
			"commitDate": "2017-05-05, 2:06 AM",
			"commitName": "ddd6a99a95b56c52ea5b5153b7270b578f5479bc",
			"commitAuthor": "Till Rohrmann",
			"commitDateOld": "2017-04-26, 1:36 AM",
			"commitNameOld": "5aa93a270a87b5a965e5c37c5c8bd6e6208b09b7",
			"commitAuthorOld": "Aljoscha Krettek",
			"daysBetweenCommits": 9.02,
			"commitsBetweenForRepo": 96,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,37 +1,41 @@\n \tprotected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths,\n \t\t\tgetClass().getClassLoader());\n \n \t\tConfiguration configuration = new Configuration();\n \t\tconfiguration.addAll(this.clientConfiguration);\n \n \t\tconfiguration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n \t\tconfiguration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n \n \t\tClusterClient client;\n \t\ttry {\n \t\t\tclient = new StandaloneClusterClient(configuration);\n \t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n \t\t}\n \n \t\ttry {\n \t\t\treturn client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t\tfinally {\n-\t\t\tclient.shutdown();\n+\t\t\ttry {\n+\t\t\t\tclient.shutdown();\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tLOG.warn(\"Could not properly shut down the cluster client.\", e);\n+\t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f9b52a3114a2114e6846091acf3abb294a49615b": {
			"type": "Ybodychange",
			"commitMessage": "[FLINK-3667] refactor client communication classes\n\n- ClusterDescriptor: base interface for cluster deployment descriptors\n- ClusterDescriptor: YarnClusterDescriptor\n\n- ClusterClient: base class for ClusterClients, handles lifecycle of cluster\n- ClusterClient: shares configuration with the implementations\n- ClusterClient: StandaloneClusterClient, YarnClusterClient\n- ClusterClient: remove run methods and enable detached mode via flag\n\n- CliFrontend: remove all Yarn specific logic\n- CliFrontend: remove all cluster setup logic\n\n- CustomCommandLine: interface for other cluster implementations\n- Customcommandline: enables creation of new cluster or resuming from existing\n\n- Yarn: move Yarn classes and functionality to the yarn module (yarn\n  properties, yarn interfaces)\n- Yarn: improve reliability of cluster startup\n- Yarn Tests: only disable parallel execution of ITCases\n\nThis closes #1978\n",
			"commitDate": "2016-06-17, 1:37 AM",
			"commitName": "f9b52a3114a2114e6846091acf3abb294a49615b",
			"commitAuthor": "Maximilian Michels",
			"commitDateOld": "2016-04-25, 8:50 AM",
			"commitNameOld": "7498d3e35a29449270a88a30eb32b7de74887f5b",
			"commitAuthorOld": "Till Rohrmann",
			"daysBetweenCommits": 52.7,
			"commitsBetweenForRepo": 203,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,37 +1,37 @@\n \tprotected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths,\n \t\t\tgetClass().getClassLoader());\n \t\t\n \t\tConfiguration configuration = new Configuration();\n \t\tconfiguration.addAll(this.clientConfiguration);\n \t\t\n \t\tconfiguration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n \t\tconfiguration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n \n-\t\tClient client;\n+\t\tClusterClient client;\n \t\ttry {\n-\t\t\tclient = new Client(configuration);\n+\t\t\tclient = new StandaloneClusterClient(configuration);\n \t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n \t\t}\n \n \t\ttry {\n-\t\t\treturn client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n+\t\t\treturn client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t\tfinally {\n \t\t\tclient.shutdown();\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"7498d3e35a29449270a88a30eb32b7de74887f5b": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "[FLINK-3778] [shell] Forward configuration from FlinkILoop to ScalaShellRemoteStreamEnvironment\n\nWith this PR the configuration of the FlinkILoop is properly forwarded to the\nScalaShellRemoteStreamEnvironment.\n\nThis closes #1906.\n",
			"commitDate": "2016-04-25, 8:50 AM",
			"commitName": "7498d3e35a29449270a88a30eb32b7de74887f5b",
			"commitAuthor": "Till Rohrmann",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "[FLINK-3778] [shell] Forward configuration from FlinkILoop to ScalaShellRemoteStreamEnvironment\n\nWith this PR the configuration of the FlinkILoop is properly forwarded to the\nScalaShellRemoteStreamEnvironment.\n\nThis closes #1906.\n",
					"commitDate": "2016-04-25, 8:50 AM",
					"commitName": "7498d3e35a29449270a88a30eb32b7de74887f5b",
					"commitAuthor": "Till Rohrmann",
					"commitDateOld": "2016-04-06, 5:39 AM",
					"commitNameOld": "d7948fad6a73fdefae43cd42193342398a1581aa",
					"commitAuthorOld": "nikste",
					"daysBetweenCommits": 19.13,
					"commitsBetweenForRepo": 77,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,37 +1,37 @@\n-\tprotected JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n+\tprotected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths,\n \t\t\tgetClass().getClassLoader());\n \t\t\n \t\tConfiguration configuration = new Configuration();\n-\t\tconfiguration.addAll(this.config);\n+\t\tconfiguration.addAll(this.clientConfiguration);\n \t\t\n \t\tconfiguration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n \t\tconfiguration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n \n \t\tClient client;\n \t\ttry {\n \t\t\tclient = new Client(configuration);\n \t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n \t\t}\n \n \t\ttry {\n \t\t\treturn client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t\tfinally {\n \t\t\tclient.shutdown();\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[streamGraph-StreamGraph]",
						"newValue": "[streamGraph-StreamGraph, jarFiles-List<URL>]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "[FLINK-3778] [shell] Forward configuration from FlinkILoop to ScalaShellRemoteStreamEnvironment\n\nWith this PR the configuration of the FlinkILoop is properly forwarded to the\nScalaShellRemoteStreamEnvironment.\n\nThis closes #1906.\n",
					"commitDate": "2016-04-25, 8:50 AM",
					"commitName": "7498d3e35a29449270a88a30eb32b7de74887f5b",
					"commitAuthor": "Till Rohrmann",
					"commitDateOld": "2016-04-06, 5:39 AM",
					"commitNameOld": "d7948fad6a73fdefae43cd42193342398a1581aa",
					"commitAuthorOld": "nikste",
					"daysBetweenCommits": 19.13,
					"commitsBetweenForRepo": 77,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,37 +1,37 @@\n-\tprotected JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n+\tprotected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths,\n \t\t\tgetClass().getClassLoader());\n \t\t\n \t\tConfiguration configuration = new Configuration();\n-\t\tconfiguration.addAll(this.config);\n+\t\tconfiguration.addAll(this.clientConfiguration);\n \t\t\n \t\tconfiguration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n \t\tconfiguration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n \n \t\tClient client;\n \t\ttry {\n \t\t\tclient = new Client(configuration);\n \t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n \t\t}\n \n \t\ttry {\n \t\t\treturn client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t\tfinally {\n \t\t\tclient.shutdown();\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"d7948fad6a73fdefae43cd42193342398a1581aa": {
			"type": "Ymodifierchange",
			"commitMessage": "[FLINK-2522] Streaming support for Flink-Scala-Shell\n",
			"commitDate": "2016-04-06, 5:39 AM",
			"commitName": "d7948fad6a73fdefae43cd42193342398a1581aa",
			"commitAuthor": "nikste",
			"commitDateOld": "2016-02-05, 5:43 AM",
			"commitNameOld": "b54499b1cf6d14d01e448ea9ce8edabaaba83929",
			"commitAuthorOld": "Robert Metzger",
			"daysBetweenCommits": 60.96,
			"commitsBetweenForRepo": 385,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,37 +1,37 @@\n-\tprivate JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n+\tprotected JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths,\n \t\t\tgetClass().getClassLoader());\n \t\t\n \t\tConfiguration configuration = new Configuration();\n \t\tconfiguration.addAll(this.config);\n \t\t\n \t\tconfiguration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n \t\tconfiguration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n \n \t\tClient client;\n \t\ttry {\n \t\t\tclient = new Client(configuration);\n \t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n \t\t}\n \n \t\ttry {\n \t\t\treturn client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t\tfinally {\n \t\t\tclient.shutdown();\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[private]",
				"newValue": "[protected]"
			}
		},
		"bf29de981c2bcd5cb5d33c68b158c95c8820f43d": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "[streaming] delegate JobGraph generation to Client class\n",
			"commitDate": "2015-11-01, 10:00 AM",
			"commitName": "bf29de981c2bcd5cb5d33c68b158c95c8820f43d",
			"commitAuthor": "Maximilian Michels",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "[streaming] delegate JobGraph generation to Client class\n",
					"commitDate": "2015-11-01, 10:00 AM",
					"commitName": "bf29de981c2bcd5cb5d33c68b158c95c8820f43d",
					"commitAuthor": "Maximilian Michels",
					"commitDateOld": "2015-10-21, 2:01 AM",
					"commitNameOld": "06f6ac5d3edbc8dd20baf6e1b30900c189a68876",
					"commitAuthorOld": "Rufus Refactor",
					"daysBetweenCommits": 11.37,
					"commitsBetweenForRepo": 59,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,46 +1,37 @@\n-\tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n+\tprivate JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n-\t\tfor (URL jarFile : jarFiles) {\n-\t\t\ttry {\n-\t\t\t\tjobGraph.addJar(new Path(jarFile.toURI()));\n-\t\t\t} catch (URISyntaxException e) {\n-\t\t\t\tthrow new ProgramInvocationException(\"URL is invalid\", e);\n-\t\t\t}\n-\t\t}\n-\n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths,\n \t\t\tgetClass().getClassLoader());\n \t\t\n \t\tConfiguration configuration = new Configuration();\n-\t\tconfiguration.addAll(jobGraph.getJobConfiguration());\n \t\tconfiguration.addAll(this.config);\n \t\t\n \t\tconfiguration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n \t\tconfiguration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n \n \t\tClient client;\n \t\ttry {\n \t\t\tclient = new Client(configuration);\n \t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n \t\t}\n \n \t\ttry {\n-\t\t\treturn client.runBlocking(jobGraph, usercodeClassLoader);\n+\t\t\treturn client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t\tfinally {\n \t\t\tclient.shutdown();\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[jobGraph-JobGraph]",
						"newValue": "[streamGraph-StreamGraph]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "[streaming] delegate JobGraph generation to Client class\n",
					"commitDate": "2015-11-01, 10:00 AM",
					"commitName": "bf29de981c2bcd5cb5d33c68b158c95c8820f43d",
					"commitAuthor": "Maximilian Michels",
					"commitDateOld": "2015-10-21, 2:01 AM",
					"commitNameOld": "06f6ac5d3edbc8dd20baf6e1b30900c189a68876",
					"commitAuthorOld": "Rufus Refactor",
					"daysBetweenCommits": 11.37,
					"commitsBetweenForRepo": 59,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,46 +1,37 @@\n-\tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n+\tprivate JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n-\t\tfor (URL jarFile : jarFiles) {\n-\t\t\ttry {\n-\t\t\t\tjobGraph.addJar(new Path(jarFile.toURI()));\n-\t\t\t} catch (URISyntaxException e) {\n-\t\t\t\tthrow new ProgramInvocationException(\"URL is invalid\", e);\n-\t\t\t}\n-\t\t}\n-\n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths,\n \t\t\tgetClass().getClassLoader());\n \t\t\n \t\tConfiguration configuration = new Configuration();\n-\t\tconfiguration.addAll(jobGraph.getJobConfiguration());\n \t\tconfiguration.addAll(this.config);\n \t\t\n \t\tconfiguration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n \t\tconfiguration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n \n \t\tClient client;\n \t\ttry {\n \t\t\tclient = new Client(configuration);\n \t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n \t\t}\n \n \t\ttry {\n-\t\t\treturn client.runBlocking(jobGraph, usercodeClassLoader);\n+\t\t\treturn client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t\tfinally {\n \t\t\tclient.shutdown();\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"06f6ac5d3edbc8dd20baf6e1b30900c189a68876": {
			"type": "Yfilerename",
			"commitMessage": "[FLINK-2877] Move Streaming API out of Staging package\n",
			"commitDate": "2015-10-21, 2:01 AM",
			"commitName": "06f6ac5d3edbc8dd20baf6e1b30900c189a68876",
			"commitAuthor": "Rufus Refactor",
			"commitDateOld": "2015-10-21, 1:35 AM",
			"commitNameOld": "42a3d8cfa9eacc19ac04004b256b6eb51422b523",
			"commitAuthorOld": "Maximilian Michels",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
				"newPath": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java"
			}
		},
		"0ee0c1f5573ad059dc6a8e4489094b7f78267306": {
			"type": "Ybodychange",
			"commitMessage": "[FLINK-1789][core][runtime] Allow adding of URLs to the usercode class loader\n\nThis closes #593.\n",
			"commitDate": "2015-10-08, 6:55 AM",
			"commitName": "0ee0c1f5573ad059dc6a8e4489094b7f78267306",
			"commitAuthor": "twalthr",
			"commitDateOld": "2015-10-01, 2:02 AM",
			"commitNameOld": "82d6236173093b7e035a21360c7b69c67fd6ae62",
			"commitAuthorOld": "Stephan Ewen",
			"daysBetweenCommits": 7.2,
			"commitsBetweenForRepo": 65,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,41 +1,46 @@\n \tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n-\t\tfor (File file : jarFiles) {\n-\t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n+\t\tfor (URL jarFile : jarFiles) {\n+\t\t\ttry {\n+\t\t\t\tjobGraph.addJar(new Path(jarFile.toURI()));\n+\t\t\t} catch (URISyntaxException e) {\n+\t\t\t\tthrow new ProgramInvocationException(\"URL is invalid\", e);\n+\t\t\t}\n \t\t}\n \n-\t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n+\t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths,\n+\t\t\tgetClass().getClassLoader());\n \t\t\n \t\tConfiguration configuration = new Configuration();\n \t\tconfiguration.addAll(jobGraph.getJobConfiguration());\n \t\tconfiguration.addAll(this.config);\n \t\t\n \t\tconfiguration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n \t\tconfiguration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n \n \t\tClient client;\n \t\ttry {\n \t\t\tclient = new Client(configuration);\n \t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n \t\t}\n \n \t\ttry {\n \t\t\treturn client.runBlocking(jobGraph, usercodeClassLoader);\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t\tfinally {\n \t\t\tclient.shutdown();\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"82d6236173093b7e035a21360c7b69c67fd6ae62": {
			"type": "Ybodychange",
			"commitMessage": "[streaming] [storm] Clean up instantiation of mini clusters and test environments.\n",
			"commitDate": "2015-10-01, 2:02 AM",
			"commitName": "82d6236173093b7e035a21360c7b69c67fd6ae62",
			"commitAuthor": "Stephan Ewen",
			"commitDateOld": "2015-09-22, 10:55 AM",
			"commitNameOld": "71bf2f570861daae53b24bfcf1d06aedb85311b9",
			"commitAuthorOld": "Maximilian Michels",
			"daysBetweenCommits": 8.63,
			"commitsBetweenForRepo": 60,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,38 +1,41 @@\n \tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tfor (File file : jarFiles) {\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n-\t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n-\n+\t\t\n+\t\tConfiguration configuration = new Configuration();\n+\t\tconfiguration.addAll(jobGraph.getJobConfiguration());\n+\t\tconfiguration.addAll(this.config);\n+\t\t\n \t\tconfiguration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n \t\tconfiguration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n \n \t\tClient client;\n \t\ttry {\n \t\t\tclient = new Client(configuration);\n \t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n \t\t}\n \n \t\ttry {\n \t\t\treturn client.runBlocking(jobGraph, usercodeClassLoader);\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t\tfinally {\n \t\t\tclient.shutdown();\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"71bf2f570861daae53b24bfcf1d06aedb85311b9": {
			"type": "Ybodychange",
			"commitMessage": "[FLINK-2097][core] implement a job session management\n\nSessions make sure that the JobManager does not immediately discard a\nJobGraph after execution, but keeps it around for further operations to\nbe attached to the graph. That is the basis for interactive sessions.\n\nThis pull request implements a rudimentary session management. Together\nwith the backtracking #640, this will enable users to submit jobs to the\ncluster and access intermediate results. Session handling ensures that\nthe results are cleared eventually.\n\nExecutionGraphs are kept as long as\n  - no timeout occurred or\n  - the session has not been explicitly ended\n\nThe following changes have also been made in this pull request:\n\n- The Job ID is created through the ExecutionEnvironment and passed through\n\n- Sessions can be termined by the ExecutionEnvironment or directly\n  through the executor\n\n- The environments use reapers (local) and shutdown hooks (remote) to\n  ensure session termination when the environment runs out of scope\n\n- The Client manages only connections to the JobManager, it is not job\n  specific\n\nThis closes #858.\n",
			"commitDate": "2015-09-22, 10:55 AM",
			"commitName": "71bf2f570861daae53b24bfcf1d06aedb85311b9",
			"commitAuthor": "Maximilian Michels",
			"commitDateOld": "2015-08-31, 2:02 AM",
			"commitNameOld": "b9de4ed37ffa68ef50dc6d6b3819afcc00d1d029",
			"commitAuthorOld": "Till Rohrmann",
			"daysBetweenCommits": 22.37,
			"commitsBetweenForRepo": 141,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,35 +1,38 @@\n \tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tfor (File file : jarFiles) {\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n \n \t\tconfiguration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n \t\tconfiguration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n \n+\t\tClient client;\n \t\ttry {\n-\t\t\tClient client = new Client(configuration, usercodeClassLoader, -1);\n+\t\t\tclient = new Client(configuration);\n \t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n-\t\t\t\n-\t\t\tJobSubmissionResult result = client.run(jobGraph, true);\n-\t\t\tif (result instanceof JobExecutionResult) {\n-\t\t\t\treturn (JobExecutionResult) result;\n-\t\t\t} else {\n-\t\t\t\tLOG.warn(\"The Client didn't return a JobExecutionResult\");\n-\t\t\t\treturn new JobExecutionResult(result.getJobID(), -1, null);\n-\t\t\t}\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tthrow new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n+\t\t}\n+\n+\t\ttry {\n+\t\t\treturn client.runBlocking(jobGraph, usercodeClassLoader);\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n+\t\tfinally {\n+\t\t\tclient.shutdown();\n+\t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b9de4ed37ffa68ef50dc6d6b3819afcc00d1d029": {
			"type": "Ybodychange",
			"commitMessage": "[FLINK-2291] [runtime] Add ZooKeeper support to elect a leader from a set of JobManager. The leader will then be retrieved from ZooKeeper by the TaskManagers.\n\nRefactors FlinkMiniCluster to support multiple JobManager\n\nAdds proper remote address resolution for actors\n\nClean up of LeaderElection and LeaderRetrievalService. Removes synchronization to avoid deadlock.\n\nAdds ZooKeeper start option to TestBaseUtils.startCluster\n\nRemoves registration session IDs, using the leader session IDs instead. Sets the leader session ID\n directly in the grantLeadership method. Let the LeaderElectionService select the leader session I\nD. Return leader session ID to LeaderRetrievalListeners.\n\nRemoves direct ActorRef interaction\n\nIntroduces LeaderRetrievalService for the Client and the CliFrontend.\n\nMake ApplicationClient to use the LeaderRetrievalService for JobManager resolution\n\nAdds LeaderElection/Retrieval tests\n\nAdded test for exception forwarding from the CuratorFramework to a Contender\n\nAdds test job submission with changing leaders\n\nAdds new test cases for job cleanup after leader election change\n\nAdds new LeaderChangeStateCleanup test case\n\nAdds LeaderElectionRetrievalTestingCluster\n\nIntroduces ListeningBehaviour for job submissions\n\nRelocation of org.apache.curator in flink-shaded-hadoop jar\n\nAdds Apache ZooKeeper and Apache Curator to LICENSE and NOTICE files\n\nIncreases zookeeper connection timeout to 20000 ms for the KafkaITCase to fix failing tests on Travis\n\nIncreased timeouts of ZooKeeperLeaderElectionTest for Travis\n\nMakes the WebInfoServer and the WebRuntimeMonitor to use the LeaderRetrievalService to retrieve the current leading JobManager\n\nAdds proper synchronization to ZooKeeperLeaderElectionService. Fixes StateCheckpointedITCase and PartitionedStateCheckpointingITCase\n\nAdds configuration description for new ZooKeeper configuration values\n\nFixed port selection of JobManager at startup\n\nImproves logging output\n\nExtends masters file to also specify the webui ports\n\nAdds proper network interface resolution by retrieving the current leader address\n\nMakes the ZooKeeperLeaderElectionService write the leader information in ephemeral nodes so that the information is deleted once the leader has terminated. Fixes a bug in the TaskManager due to call by name semantics of scheduler.scheduleOnce.\n\nAdds jobManagerURL to TriggerTaskManagerRegistration message\n\nEnables findConnectingAddress to use the ZooKeeperLeaderRetrievalService. This allows to test the connection to a possibly changing master node.\n\nChanges startup scripts to respect the recovery mode instead of the ZK_QUORUM\n\nAdjust travis log file to only log zookeeper errors\n\nUpdates high availability setup guide\n\nAdds TestLogger to leader election tests\n\nThis closes #1016.\n",
			"commitDate": "2015-08-31, 2:02 AM",
			"commitName": "b9de4ed37ffa68ef50dc6d6b3819afcc00d1d029",
			"commitAuthor": "Till Rohrmann",
			"commitDateOld": "2015-08-19, 8:53 AM",
			"commitNameOld": "bac21bf5d77c8e15c608ecbf006d29e7af1dd68a",
			"commitAuthorOld": "Aljoscha Krettek",
			"daysBetweenCommits": 11.71,
			"commitsBetweenForRepo": 58,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,35 +1,35 @@\n \tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tfor (File file : jarFiles) {\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n \n+\t\tconfiguration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n+\t\tconfiguration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n+\n \t\ttry {\n-\t\t\tClient client = new Client(new InetSocketAddress(host, port), configuration, usercodeClassLoader, -1);\n+\t\t\tClient client = new Client(configuration, usercodeClassLoader, -1);\n \t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n \t\t\t\n \t\t\tJobSubmissionResult result = client.run(jobGraph, true);\n \t\t\tif (result instanceof JobExecutionResult) {\n \t\t\t\treturn (JobExecutionResult) result;\n \t\t\t} else {\n \t\t\t\tLOG.warn(\"The Client didn't return a JobExecutionResult\");\n \t\t\t\treturn new JobExecutionResult(result.getJobID(), -1, null);\n \t\t\t}\n \t\t}\n \t\tcatch (ProgramInvocationException e) {\n \t\t\tthrow e;\n \t\t}\n-\t\tcatch (UnknownHostException e) {\n-\t\t\tthrow new ProgramInvocationException(e.getMessage(), e);\n-\t\t}\n \t\tcatch (Exception e) {\n \t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n \t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"2b8db40ac40d70027ce331f3a04c6ca7aa562a84": {
			"type": "Ymultichange(Yexceptionschange,Ybodychange)",
			"commitMessage": "[FLINK-1918] [client] Fix misleading NullPointerException in case of unresolvable host names\n",
			"commitDate": "2015-04-22, 5:19 AM",
			"commitName": "2b8db40ac40d70027ce331f3a04c6ca7aa562a84",
			"commitAuthor": "Stephan Ewen",
			"subchanges": [
				{
					"type": "Yexceptionschange",
					"commitMessage": "[FLINK-1918] [client] Fix misleading NullPointerException in case of unresolvable host names\n",
					"commitDate": "2015-04-22, 5:19 AM",
					"commitName": "2b8db40ac40d70027ce331f3a04c6ca7aa562a84",
					"commitAuthor": "Stephan Ewen",
					"commitDateOld": "2015-04-22, 5:19 AM",
					"commitNameOld": "b70431239a5e18555866addb41ee6edf2b79ff60",
					"commitAuthorOld": "Stephan Ewen",
					"daysBetweenCommits": 0,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,26 +1,35 @@\n-\tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) {\n+\tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tfor (File file : jarFiles) {\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n-\t\tClient client = new Client(new InetSocketAddress(host, port), configuration,\n-\t\t\t\tJobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()), -1);\n-\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n-\t\t\n+\t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n+\n \t\ttry {\n+\t\t\tClient client = new Client(new InetSocketAddress(host, port), configuration, usercodeClassLoader, -1);\n+\t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n+\t\t\t\n \t\t\tJobSubmissionResult result = client.run(jobGraph, true);\n-\t\t\tif(result instanceof JobExecutionResult) {\n+\t\t\tif (result instanceof JobExecutionResult) {\n \t\t\t\treturn (JobExecutionResult) result;\n \t\t\t} else {\n \t\t\t\tLOG.warn(\"The Client didn't return a JobExecutionResult\");\n \t\t\t\treturn new JobExecutionResult(result.getJobID(), -1, null);\n \t\t\t}\n-\t\t} catch (ProgramInvocationException e) {\n-\t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n+\t\t}\n+\t\tcatch (ProgramInvocationException e) {\n+\t\t\tthrow e;\n+\t\t}\n+\t\tcatch (UnknownHostException e) {\n+\t\t\tthrow new ProgramInvocationException(e.getMessage(), e);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n+\t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[]",
						"newValue": "[ProgramInvocationException]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "[FLINK-1918] [client] Fix misleading NullPointerException in case of unresolvable host names\n",
					"commitDate": "2015-04-22, 5:19 AM",
					"commitName": "2b8db40ac40d70027ce331f3a04c6ca7aa562a84",
					"commitAuthor": "Stephan Ewen",
					"commitDateOld": "2015-04-22, 5:19 AM",
					"commitNameOld": "b70431239a5e18555866addb41ee6edf2b79ff60",
					"commitAuthorOld": "Stephan Ewen",
					"daysBetweenCommits": 0,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,26 +1,35 @@\n-\tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) {\n+\tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tfor (File file : jarFiles) {\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n-\t\tClient client = new Client(new InetSocketAddress(host, port), configuration,\n-\t\t\t\tJobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()), -1);\n-\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n-\t\t\n+\t\tClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n+\n \t\ttry {\n+\t\t\tClient client = new Client(new InetSocketAddress(host, port), configuration, usercodeClassLoader, -1);\n+\t\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n+\t\t\t\n \t\t\tJobSubmissionResult result = client.run(jobGraph, true);\n-\t\t\tif(result instanceof JobExecutionResult) {\n+\t\t\tif (result instanceof JobExecutionResult) {\n \t\t\t\treturn (JobExecutionResult) result;\n \t\t\t} else {\n \t\t\t\tLOG.warn(\"The Client didn't return a JobExecutionResult\");\n \t\t\t\treturn new JobExecutionResult(result.getJobID(), -1, null);\n \t\t\t}\n-\t\t} catch (ProgramInvocationException e) {\n-\t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n+\t\t}\n+\t\tcatch (ProgramInvocationException e) {\n+\t\t\tthrow e;\n+\t\t}\n+\t\tcatch (UnknownHostException e) {\n+\t\t\tthrow new ProgramInvocationException(e.getMessage(), e);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tString term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n+\t\t\tthrow new ProgramInvocationException(\"The program execution failed\" + term, e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"b70431239a5e18555866addb41ee6edf2b79ff60": {
			"type": "Ybodychange",
			"commitMessage": "[FLINK-1878] [streaming] Stream environments accept a flag that controls sysout logging during execution.\n",
			"commitDate": "2015-04-22, 5:19 AM",
			"commitName": "b70431239a5e18555866addb41ee6edf2b79ff60",
			"commitAuthor": "Stephan Ewen",
			"commitDateOld": "2015-03-30, 11:56 PM",
			"commitNameOld": "6b0d40764da9dce2e2d21882e9a03a21c6783ff0",
			"commitAuthorOld": "Robert Metzger",
			"daysBetweenCommits": 22.22,
			"commitsBetweenForRepo": 128,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,25 +1,26 @@\n \tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tfor (File file : jarFiles) {\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\tClient client = new Client(new InetSocketAddress(host, port), configuration,\n \t\t\t\tJobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()), -1);\n-\n+\t\tclient.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n+\t\t\n \t\ttry {\n \t\t\tJobSubmissionResult result = client.run(jobGraph, true);\n \t\t\tif(result instanceof JobExecutionResult) {\n \t\t\t\treturn (JobExecutionResult) result;\n \t\t\t} else {\n \t\t\t\tLOG.warn(\"The Client didn't return a JobExecutionResult\");\n \t\t\t\treturn new JobExecutionResult(result.getJobID(), -1, null);\n \t\t\t}\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"6b0d40764da9dce2e2d21882e9a03a21c6783ff0": {
			"type": "Ybodychange",
			"commitMessage": "[FLINK-1771] Add support for submitting single jobs to a detached YARN session\n\nWith this change, users can submit a Flink job to a YARN cluster without having a local client monitoring the Application Master or job. You can basically fire and forget a Flink job to YARN.\nFor supporting this, the ApplicationMaster can now monitor the status of a job and shutdown itself once it is in a terminal state.\n\nThe change also verifies that various ways of setting the parallelism on YARN are passed through the system correctly (per job, session).\n\nThere was a bug in YARN container creation which made the configuration values for the heap offset useless. This change fixes this error.\n\nAll mentioned features and bugs are covered by the flink-yarn-tests.\n\nThis closes #542\n",
			"commitDate": "2015-03-30, 11:56 PM",
			"commitName": "6b0d40764da9dce2e2d21882e9a03a21c6783ff0",
			"commitAuthor": "Robert Metzger",
			"commitDateOld": "2015-03-23, 4:45 AM",
			"commitNameOld": "e83d1ec102808cb9b3ef4208335f74e6f17bbe7a",
			"commitAuthorOld": "Gabor Gevay",
			"daysBetweenCommits": 7.8,
			"commitsBetweenForRepo": 53,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,25 @@\n \tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tfor (File file : jarFiles) {\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\tClient client = new Client(new InetSocketAddress(host, port), configuration,\n-\t\t\t\tJobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n+\t\t\t\tJobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()), -1);\n \n \t\ttry {\n-\t\t\treturn client.run(jobGraph, true);\n+\t\t\tJobSubmissionResult result = client.run(jobGraph, true);\n+\t\t\tif(result instanceof JobExecutionResult) {\n+\t\t\t\treturn (JobExecutionResult) result;\n+\t\t\t} else {\n+\t\t\t\tLOG.warn(\"The Client didn't return a JobExecutionResult\");\n+\t\t\t\treturn new JobExecutionResult(result.getJobID(), -1, null);\n+\t\t\t}\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"e83d1ec102808cb9b3ef4208335f74e6f17bbe7a": {
			"type": "Ymultichange(Yreturntypechange,Ybodychange)",
			"commitMessage": "[FLINK-1767] [streaming] Make StreamExecutionEnvironment return JobExecutionResult instead of void.\n\nConflicts:\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/LocalStreamEnvironment.java\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/ClusterUtil.java\n\nThis closes #516\n",
			"commitDate": "2015-03-23, 4:45 AM",
			"commitName": "e83d1ec102808cb9b3ef4208335f74e6f17bbe7a",
			"commitAuthor": "Gabor Gevay",
			"subchanges": [
				{
					"type": "Yreturntypechange",
					"commitMessage": "[FLINK-1767] [streaming] Make StreamExecutionEnvironment return JobExecutionResult instead of void.\n\nConflicts:\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/LocalStreamEnvironment.java\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/ClusterUtil.java\n\nThis closes #516\n",
					"commitDate": "2015-03-23, 4:45 AM",
					"commitName": "e83d1ec102808cb9b3ef4208335f74e6f17bbe7a",
					"commitAuthor": "Gabor Gevay",
					"commitDateOld": "2015-03-23, 1:03 AM",
					"commitNameOld": "cf84bca124ac34875ef3e559abbbf509c1218542",
					"commitAuthorOld": "Maximilian Michels",
					"daysBetweenCommits": 0.15,
					"commitsBetweenForRepo": 4,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,19 +1,19 @@\n-\tprivate void executeRemotely(JobGraph jobGraph) {\n+\tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tfor (File file : jarFiles) {\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\tClient client = new Client(new InetSocketAddress(host, port), configuration,\n \t\t\t\tJobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n \n \t\ttry {\n-\t\t\tclient.run(jobGraph, true);\n+\t\t\treturn client.run(jobGraph, true);\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "void",
						"newValue": "JobExecutionResult"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "[FLINK-1767] [streaming] Make StreamExecutionEnvironment return JobExecutionResult instead of void.\n\nConflicts:\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/LocalStreamEnvironment.java\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/ClusterUtil.java\n\nThis closes #516\n",
					"commitDate": "2015-03-23, 4:45 AM",
					"commitName": "e83d1ec102808cb9b3ef4208335f74e6f17bbe7a",
					"commitAuthor": "Gabor Gevay",
					"commitDateOld": "2015-03-23, 1:03 AM",
					"commitNameOld": "cf84bca124ac34875ef3e559abbbf509c1218542",
					"commitAuthorOld": "Maximilian Michels",
					"daysBetweenCommits": 0.15,
					"commitsBetweenForRepo": 4,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,19 +1,19 @@\n-\tprivate void executeRemotely(JobGraph jobGraph) {\n+\tprivate JobExecutionResult executeRemotely(JobGraph jobGraph) {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tfor (File file : jarFiles) {\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\tClient client = new Client(new InetSocketAddress(host, port), configuration,\n \t\t\t\tJobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n \n \t\ttry {\n-\t\t\tclient.run(jobGraph, true);\n+\t\t\treturn client.run(jobGraph, true);\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"f94112fbbaaf2ecc6a9ecb314a5565203ce779a7": {
			"type": "Yfilerename",
			"commitMessage": "[FLINK-1452] Rename 'flink-addons' to 'flink-staging'\n",
			"commitDate": "2015-02-02, 10:40 AM",
			"commitName": "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7",
			"commitAuthor": "Robert Metzger",
			"commitDateOld": "2015-02-01, 3:27 PM",
			"commitNameOld": "563e546236217dace58a8031d56d08a27e08160b",
			"commitAuthorOld": "zentol",
			"daysBetweenCommits": 0.8,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
				"newPath": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java"
			}
		},
		"6867f9b93ec1ad9a627450c4fbd0b5ff98ef6148": {
			"type": "Ybodychange",
			"commitMessage": "[streaming] StreamExecutionEnvironment rework + user class loader fix for cluster deployment\n",
			"commitDate": "2014-11-13, 6:24 AM",
			"commitName": "6867f9b93ec1ad9a627450c4fbd0b5ff98ef6148",
			"commitAuthor": "Gyula Fora",
			"commitDateOld": "2014-09-24, 12:07 PM",
			"commitNameOld": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
			"commitAuthorOld": "mbalassi",
			"daysBetweenCommits": 49.8,
			"commitsBetweenForRepo": 199,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,19 @@\n \tprivate void executeRemotely(JobGraph jobGraph) {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n-\t\tfor (int i = 0; i < jarFiles.length; i++) {\n-\t\t\tFile file = new File(jarFiles[i]);\n-\t\t\ttry {\n-\t\t\t\tJobWithJars.checkJarFile(file);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n-\t\t\t}\n+\t\tfor (File file : jarFiles) {\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n-\t\tClient client = new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n+\t\tClient client = new Client(new InetSocketAddress(host, port), configuration,\n+\t\t\t\tJobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n \n \t\ttry {\n \t\t\tclient.run(jobGraph, true);\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"076223cb9540c973eaba7d24e50c0e1f3eb80308": {
			"type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
			"commitMessage": "[FLINK-1122] [streaming] Job Execution with user specified name\n",
			"commitDate": "2014-09-24, 12:07 PM",
			"commitName": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
			"commitAuthor": "mbalassi",
			"subchanges": [
				{
					"type": "Yrename",
					"commitMessage": "[FLINK-1122] [streaming] Job Execution with user specified name\n",
					"commitDate": "2014-09-24, 12:07 PM",
					"commitName": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
					"commitAuthor": "mbalassi",
					"commitDateOld": "2014-09-23, 4:59 AM",
					"commitNameOld": "b904b0041cf97b2c6181b1985afc457ed01cf626",
					"commitAuthorOld": "Till Rohrmann",
					"daysBetweenCommits": 1.3,
					"commitsBetweenForRepo": 26,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,26 +1,24 @@\n-\tpublic void execute() {\n+\tprivate void executeRemotely(JobGraph jobGraph) {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n-\t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n-\n \t\tfor (int i = 0; i < jarFiles.length; i++) {\n \t\t\tFile file = new File(jarFiles[i]);\n \t\t\ttry {\n \t\t\t\tJobWithJars.checkJarFile(file);\n \t\t\t} catch (IOException e) {\n \t\t\t\tthrow new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n \t\t\t}\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\tClient client = new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n \n \t\ttry {\n \t\t\tclient.run(jobGraph, true);\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "execute",
						"newValue": "executeRemotely"
					}
				},
				{
					"type": "Yparameterchange",
					"commitMessage": "[FLINK-1122] [streaming] Job Execution with user specified name\n",
					"commitDate": "2014-09-24, 12:07 PM",
					"commitName": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
					"commitAuthor": "mbalassi",
					"commitDateOld": "2014-09-23, 4:59 AM",
					"commitNameOld": "b904b0041cf97b2c6181b1985afc457ed01cf626",
					"commitAuthorOld": "Till Rohrmann",
					"daysBetweenCommits": 1.3,
					"commitsBetweenForRepo": 26,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,26 +1,24 @@\n-\tpublic void execute() {\n+\tprivate void executeRemotely(JobGraph jobGraph) {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n-\t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n-\n \t\tfor (int i = 0; i < jarFiles.length; i++) {\n \t\t\tFile file = new File(jarFiles[i]);\n \t\t\ttry {\n \t\t\t\tJobWithJars.checkJarFile(file);\n \t\t\t} catch (IOException e) {\n \t\t\t\tthrow new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n \t\t\t}\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\tClient client = new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n \n \t\ttry {\n \t\t\tclient.run(jobGraph, true);\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[]",
						"newValue": "[jobGraph-JobGraph]"
					}
				},
				{
					"type": "Ymodifierchange",
					"commitMessage": "[FLINK-1122] [streaming] Job Execution with user specified name\n",
					"commitDate": "2014-09-24, 12:07 PM",
					"commitName": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
					"commitAuthor": "mbalassi",
					"commitDateOld": "2014-09-23, 4:59 AM",
					"commitNameOld": "b904b0041cf97b2c6181b1985afc457ed01cf626",
					"commitAuthorOld": "Till Rohrmann",
					"daysBetweenCommits": 1.3,
					"commitsBetweenForRepo": 26,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,26 +1,24 @@\n-\tpublic void execute() {\n+\tprivate void executeRemotely(JobGraph jobGraph) {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n-\t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n-\n \t\tfor (int i = 0; i < jarFiles.length; i++) {\n \t\t\tFile file = new File(jarFiles[i]);\n \t\t\ttry {\n \t\t\t\tJobWithJars.checkJarFile(file);\n \t\t\t} catch (IOException e) {\n \t\t\t\tthrow new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n \t\t\t}\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\tClient client = new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n \n \t\ttry {\n \t\t\tclient.run(jobGraph, true);\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[public]",
						"newValue": "[private]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "[FLINK-1122] [streaming] Job Execution with user specified name\n",
					"commitDate": "2014-09-24, 12:07 PM",
					"commitName": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
					"commitAuthor": "mbalassi",
					"commitDateOld": "2014-09-23, 4:59 AM",
					"commitNameOld": "b904b0041cf97b2c6181b1985afc457ed01cf626",
					"commitAuthorOld": "Till Rohrmann",
					"daysBetweenCommits": 1.3,
					"commitsBetweenForRepo": 26,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,26 +1,24 @@\n-\tpublic void execute() {\n+\tprivate void executeRemotely(JobGraph jobGraph) {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n-\t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n-\n \t\tfor (int i = 0; i < jarFiles.length; i++) {\n \t\t\tFile file = new File(jarFiles[i]);\n \t\t\ttry {\n \t\t\t\tJobWithJars.checkJarFile(file);\n \t\t\t} catch (IOException e) {\n \t\t\t\tthrow new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n \t\t\t}\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\tClient client = new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n \n \t\ttry {\n \t\t\tclient.run(jobGraph, true);\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"d0dd5138fd0bddf2bf942bffee1681c298043b3e": {
			"type": "Ybodychange",
			"commitMessage": "[streaming] Updated logging to utilize SLF4J\n",
			"commitDate": "2014-09-20, 4:44 AM",
			"commitName": "d0dd5138fd0bddf2bf942bffee1681c298043b3e",
			"commitAuthor": "ghermann",
			"commitDateOld": "2014-09-05, 2:57 AM",
			"commitNameOld": "08188508d528c1072a746aacbf2a5c712d4f8467",
			"commitAuthorOld": "Till Rohrmann",
			"daysBetweenCommits": 15.07,
			"commitsBetweenForRepo": 26,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,26 +1,26 @@\n \tpublic void execute() {\n \t\tif (LOG.isInfoEnabled()) {\n-\t\t\tLOG.info(\"Running remotely at \" + host + \":\" + port);\n+\t\t\tLOG.info(\"Running remotely at {}:{}\", host, port);\n \t\t}\n \n \t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n \n \t\tfor (int i = 0; i < jarFiles.length; i++) {\n \t\t\tFile file = new File(jarFiles[i]);\n \t\t\ttry {\n \t\t\t\tJobWithJars.checkJarFile(file);\n \t\t\t} catch (IOException e) {\n \t\t\t\tthrow new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n \t\t\t}\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\tClient client = new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n \n \t\ttry {\n \t\t\tclient.run(jobGraph, true);\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0163cfa11d64b641718a70aa30b7b896cdc077ba": {
			"type": "Ybodychange",
			"commitMessage": "[streaming] Fix LICENSE file for streaming project. Minor merge fixes.\n\nThis closes #72\n",
			"commitDate": "2014-08-18, 8:34 AM",
			"commitName": "0163cfa11d64b641718a70aa30b7b896cdc077ba",
			"commitAuthor": "Stephan Ewen",
			"commitDateOld": "2014-08-18, 7:23 AM",
			"commitNameOld": "35cf874c36fc522e9fae6af4625901ee3c3bc9a3",
			"commitAuthorOld": "ghermann",
			"daysBetweenCommits": 0.05,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,26 +1,26 @@\n \tpublic void execute() {\n \t\tif (LOG.isInfoEnabled()) {\n \t\t\tLOG.info(\"Running remotely at \" + host + \":\" + port);\n \t\t}\n \n \t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n \n \t\tfor (int i = 0; i < jarFiles.length; i++) {\n \t\t\tFile file = new File(jarFiles[i]);\n \t\t\ttry {\n \t\t\t\tJobWithJars.checkJarFile(file);\n \t\t\t} catch (IOException e) {\n \t\t\t\tthrow new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n \t\t\t}\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n-\t\tClient client = new Client(new InetSocketAddress(host, port), configuration);\n+\t\tClient client = new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n \n \t\ttry {\n \t\t\tclient.run(jobGraph, true);\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"35cf874c36fc522e9fae6af4625901ee3c3bc9a3": {
			"type": "Ybodychange",
			"commitMessage": "[streaming] Exception handling update & minor refactor\n",
			"commitDate": "2014-08-18, 7:23 AM",
			"commitName": "35cf874c36fc522e9fae6af4625901ee3c3bc9a3",
			"commitAuthor": "ghermann",
			"commitDateOld": "2014-08-18, 7:23 AM",
			"commitNameOld": "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
			"commitAuthorOld": "gyfora",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 9,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,26 +1,26 @@\n \tpublic void execute() {\n-\t\tif (log.isInfoEnabled()) {\n-\t\t\tlog.info(\"Running remotely at \" + host + \":\" + port);\n+\t\tif (LOG.isInfoEnabled()) {\n+\t\t\tLOG.info(\"Running remotely at \" + host + \":\" + port);\n \t\t}\n \n \t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n \n \t\tfor (int i = 0; i < jarFiles.length; i++) {\n \t\t\tFile file = new File(jarFiles[i]);\n \t\t\ttry {\n \t\t\t\tJobWithJars.checkJarFile(file);\n \t\t\t} catch (IOException e) {\n \t\t\t\tthrow new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n \t\t\t}\n \t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t}\n \n \t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\tClient client = new Client(new InetSocketAddress(host, port), configuration);\n \n \t\ttry {\n \t\t\tclient.run(jobGraph, true);\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d56d48f1a1933f138f5d97f42b71aa64fad6bc6f": {
			"type": "Yfilerename",
			"commitMessage": "[streaming] API update with more differentiated DataStream types and javadoc + several fixes\n",
			"commitDate": "2014-08-18, 7:23 AM",
			"commitName": "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
			"commitAuthor": "gyfora",
			"commitDateOld": "2014-08-18, 7:22 AM",
			"commitNameOld": "e73ea29593cdb8b4d9a11137b2188ca72673e98c",
			"commitAuthorOld": "gyfora",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/RemoteStreamEnvironment.java",
				"newPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java"
			}
		},
		"c524951f5c779d47cd3fc9d40fcc0dd4db4cdfeb": {
			"type": "Ybodychange",
			"commitMessage": "[streaming] Merged conflicts\n",
			"commitDate": "2014-08-18, 7:11 AM",
			"commitName": "c524951f5c779d47cd3fc9d40fcc0dd4db4cdfeb",
			"commitAuthor": "mbalassi",
			"commitDateOld": "2014-08-18, 6:58 AM",
			"commitNameOld": "646190d3adcbb599b051946ed342daa549ce54ef",
			"commitAuthorOld": "ghermann",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,29 +1,26 @@\n \tpublic void execute() {\n-\t\ttry {\n-\t\t\tif (log.isInfoEnabled()) {\n-\t\t\t\tlog.info(\"Running remotely at \" + host + \":\" + port);\n-\t\t\t}\n-\t\t\t\n-\t\t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n+\t\tif (log.isInfoEnabled()) {\n+\t\t\tlog.info(\"Running remotely at \" + host + \":\" + port);\n+\t\t}\n \n-\t\t\tfor (int i = 0; i < jarFiles.length; i++) {\n-\t\t\t\tFile file = new File(jarFiles[i]);\n+\t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n+\n+\t\tfor (int i = 0; i < jarFiles.length; i++) {\n+\t\t\tFile file = new File(jarFiles[i]);\n+\t\t\ttry {\n \t\t\t\tJobWithJars.checkJarFile(file);\n-\t\t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tthrow new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n \t\t\t}\n-\t\t\t\n-\t\t\tConfiguration configuration = jobGraph.getJobConfiguration();\n-\t\t\tClient client = new Client(new InetSocketAddress(host, port), configuration);\n+\t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n+\t\t}\n \n+\t\tConfiguration configuration = jobGraph.getJobConfiguration();\n+\t\tClient client = new Client(new InetSocketAddress(host, port), configuration);\n+\n+\t\ttry {\n \t\t\tclient.run(jobGraph, true);\n-\t\t\t\n-\t\t} catch (IOException e) {\n-\t\t\tif (log.isErrorEnabled()) {\n-\t\t\t\tlog.error(e.getMessage());\n-\t\t\t}\n \t\t} catch (ProgramInvocationException e) {\n-\t\t\tif (log.isErrorEnabled()) {\n-\t\t\t\tlog.error(e.getMessage());\n-\t\t\t}\n+\t\t\tthrow new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"646190d3adcbb599b051946ed342daa549ce54ef": {
			"type": "Ybodychange",
			"commitMessage": "[streaming] Eliminated writing to standard output\n",
			"commitDate": "2014-08-18, 6:58 AM",
			"commitName": "646190d3adcbb599b051946ed342daa549ce54ef",
			"commitAuthor": "ghermann",
			"commitDateOld": "2014-08-18, 6:57 AM",
			"commitNameOld": "9d1806cc584440f687fda1830918f2f02002e2ec",
			"commitAuthorOld": "mbalassi",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 6,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,29 @@\n \tpublic void execute() {\n \t\ttry {\n+\t\t\tif (log.isInfoEnabled()) {\n+\t\t\t\tlog.info(\"Running remotely at \" + host + \":\" + port);\n+\t\t\t}\n \t\t\t\n \t\t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n \n \t\t\tfor (int i = 0; i < jarFiles.length; i++) {\n \t\t\t\tFile file = new File(jarFiles[i]);\n \t\t\t\tJobWithJars.checkJarFile(file);\n \t\t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t\t}\n \t\t\t\n \t\t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\t\tClient client = new Client(new InetSocketAddress(host, port), configuration);\n \n \t\t\tclient.run(jobGraph, true);\n \t\t\t\n \t\t} catch (IOException e) {\n \t\t\tif (log.isErrorEnabled()) {\n \t\t\t\tlog.error(e.getMessage());\n-\t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tif (log.isErrorEnabled()) {\n \t\t\t\tlog.error(e.getMessage());\n-\t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"1e434d10ab16f0a36a9326cfdf7df416ff5b91d5": {
			"type": "Yfilerename",
			"commitMessage": "[streaming] Module rename\n",
			"commitDate": "2014-08-18, 6:57 AM",
			"commitName": "1e434d10ab16f0a36a9326cfdf7df416ff5b91d5",
			"commitAuthor": "mbalassi",
			"commitDateOld": "2014-08-18, 6:57 AM",
			"commitNameOld": "12e52f8ac430c00ed38096944e50db1e185f3567",
			"commitAuthorOld": "mbalassi",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/org/apache/flink/streaming/api/RemoteStreamEnvironment.java",
				"newPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/RemoteStreamEnvironment.java"
			}
		},
		"12e52f8ac430c00ed38096944e50db1e185f3567": {
			"type": "Yfilerename",
			"commitMessage": "[streaming] Package and Java Dependency rename\n",
			"commitDate": "2014-08-18, 6:57 AM",
			"commitName": "12e52f8ac430c00ed38096944e50db1e185f3567",
			"commitAuthor": "mbalassi",
			"commitDateOld": "2014-08-18, 6:57 AM",
			"commitNameOld": "b89fa9a2437a24ba311efaa8c3dac9bbf62e7a73",
			"commitAuthorOld": "gyfora",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/RemoteStreamEnvironment.java",
				"newPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/org/apache/flink/streaming/api/RemoteStreamEnvironment.java"
			}
		},
		"23f649e4d42e8d2dde8ce424142c901b502ec583": {
			"type": "Ybodychange",
			"commitMessage": "[streaming] Multiple iteration 1\n",
			"commitDate": "2014-08-18, 6:57 AM",
			"commitName": "23f649e4d42e8d2dde8ce424142c901b502ec583",
			"commitAuthor": "mbalassi",
			"commitDateOld": "2014-08-18, 6:57 AM",
			"commitNameOld": "1171d024664a93cf298e935b06cd1c1c4db258ff",
			"commitAuthorOld": "jfeher",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,26 +1,28 @@\n \tpublic void execute() {\n \t\ttry {\n \t\t\t\n \t\t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n \n \t\t\tfor (int i = 0; i < jarFiles.length; i++) {\n \t\t\t\tFile file = new File(jarFiles[i]);\n \t\t\t\tJobWithJars.checkJarFile(file);\n \t\t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t\t}\n-\n+\t\t\t\n \t\t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\t\tClient client = new Client(new InetSocketAddress(host, port), configuration);\n \n \t\t\tclient.run(jobGraph, true);\n \t\t\t\n \t\t} catch (IOException e) {\n \t\t\tif (log.isErrorEnabled()) {\n \t\t\t\tlog.error(e.getMessage());\n+\t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tif (log.isErrorEnabled()) {\n \t\t\t\tlog.error(e.getMessage());\n+\t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"1171d024664a93cf298e935b06cd1c1c4db258ff": {
			"type": "Ybodychange",
			"commitMessage": "[streaming] ZeroMQ package\n",
			"commitDate": "2014-08-18, 6:57 AM",
			"commitName": "1171d024664a93cf298e935b06cd1c1c4db258ff",
			"commitAuthor": "jfeher",
			"commitDateOld": "2014-08-18, 6:57 AM",
			"commitNameOld": "7dc7b5c9b2369ac91dda96281982d6a1470fa947",
			"commitAuthorOld": "mbalassi",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,26 @@\n \tpublic void execute() {\n \t\ttry {\n \t\t\t\n \t\t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n \n \t\t\tfor (int i = 0; i < jarFiles.length; i++) {\n \t\t\t\tFile file = new File(jarFiles[i]);\n \t\t\t\tJobWithJars.checkJarFile(file);\n \t\t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t\t}\n-\t\t\t\n+\n \t\t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\t\tClient client = new Client(new InetSocketAddress(host, port), configuration);\n \n \t\t\tclient.run(jobGraph, true);\n \t\t\t\n \t\t} catch (IOException e) {\n \t\t\tif (log.isErrorEnabled()) {\n \t\t\t\tlog.error(e.getMessage());\n-\t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tif (log.isErrorEnabled()) {\n \t\t\t\tlog.error(e.getMessage());\n-\t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d26c2305ede77abbceb6ebb58e1fdc6aad158cbe": {
			"type": "Ybodychange",
			"commitMessage": "[streaming] Fixed JavaDoc of RemoteStreamEnvironment\n",
			"commitDate": "2014-08-18, 6:57 AM",
			"commitName": "d26c2305ede77abbceb6ebb58e1fdc6aad158cbe",
			"commitAuthor": "ghermann",
			"commitDateOld": "2014-08-18, 6:57 AM",
			"commitNameOld": "b96db729c450ea05930ca0feba01769d3eb5d1f9",
			"commitAuthorOld": "mbalassi",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,26 +1,28 @@\n \tpublic void execute() {\n \t\ttry {\n \t\t\t\n \t\t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n \n \t\t\tfor (int i = 0; i < jarFiles.length; i++) {\n \t\t\t\tFile file = new File(jarFiles[i]);\n \t\t\t\tJobWithJars.checkJarFile(file);\n \t\t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t\t}\n-\n+\t\t\t\n \t\t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\t\tClient client = new Client(new InetSocketAddress(host, port), configuration);\n \n \t\t\tclient.run(jobGraph, true);\n \t\t\t\n \t\t} catch (IOException e) {\n \t\t\tif (log.isErrorEnabled()) {\n \t\t\t\tlog.error(e.getMessage());\n+\t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tif (log.isErrorEnabled()) {\n \t\t\t\tlog.error(e.getMessage());\n+\t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b96db729c450ea05930ca0feba01769d3eb5d1f9": {
			"type": "Ybodychange",
			"commitMessage": "[streaming] IterativeDataStream Prototype\n",
			"commitDate": "2014-08-18, 6:57 AM",
			"commitName": "b96db729c450ea05930ca0feba01769d3eb5d1f9",
			"commitAuthor": "mbalassi",
			"commitDateOld": "2014-08-18, 6:57 AM",
			"commitNameOld": "5b05ca635d1a661bf2be3baf60159d84834a9942",
			"commitAuthorOld": "ghermann",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,26 @@\n \tpublic void execute() {\n \t\ttry {\n \t\t\t\n \t\t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n \n \t\t\tfor (int i = 0; i < jarFiles.length; i++) {\n \t\t\t\tFile file = new File(jarFiles[i]);\n \t\t\t\tJobWithJars.checkJarFile(file);\n \t\t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n \t\t\t}\n-\t\t\t\n+\n \t\t\tConfiguration configuration = jobGraph.getJobConfiguration();\n \t\t\tClient client = new Client(new InetSocketAddress(host, port), configuration);\n \n \t\t\tclient.run(jobGraph, true);\n \t\t\t\n \t\t} catch (IOException e) {\n \t\t\tif (log.isErrorEnabled()) {\n \t\t\t\tlog.error(e.getMessage());\n-\t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t} catch (ProgramInvocationException e) {\n \t\t\tif (log.isErrorEnabled()) {\n \t\t\t\tlog.error(e.getMessage());\n-\t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"5b05ca635d1a661bf2be3baf60159d84834a9942": {
			"type": "Yintroduced",
			"commitMessage": "[streaming] Updated RemoteStreamEnvironment\n",
			"commitDate": "2014-08-18, 6:57 AM",
			"commitName": "5b05ca635d1a661bf2be3baf60159d84834a9942",
			"commitAuthor": "ghermann",
			"diff": "@@ -0,0 +1,28 @@\n+\tpublic void execute() {\n+\t\ttry {\n+\t\t\t\n+\t\t\tJobGraph jobGraph = jobGraphBuilder.getJobGraph();\n+\n+\t\t\tfor (int i = 0; i < jarFiles.length; i++) {\n+\t\t\t\tFile file = new File(jarFiles[i]);\n+\t\t\t\tJobWithJars.checkJarFile(file);\n+\t\t\t\tjobGraph.addJar(new Path(file.getAbsolutePath()));\n+\t\t\t}\n+\t\t\t\n+\t\t\tConfiguration configuration = jobGraph.getJobConfiguration();\n+\t\t\tClient client = new Client(new InetSocketAddress(host, port), configuration);\n+\n+\t\t\tclient.run(jobGraph, true);\n+\t\t\t\n+\t\t} catch (IOException e) {\n+\t\t\tif (log.isErrorEnabled()) {\n+\t\t\t\tlog.error(e.getMessage());\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t} catch (ProgramInvocationException e) {\n+\t\t\tif (log.isErrorEnabled()) {\n+\t\t\t\tlog.error(e.getMessage());\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}\n+\t}\n\\ No newline at end of file\n"
		}
	},
	"sha": "9e936a5f8198b0059e9b5fba33163c2bbe3efbdd"
}