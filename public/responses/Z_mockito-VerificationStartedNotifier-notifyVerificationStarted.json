{
	"repo": "https://github.com/mockito/mockito.git",
	"file": "src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java",
	"method": {
		"longName": "public Object notifyVerificationStarted(List<VerificationStartedListener> listeners, MockingDetails originalMockingDetails);",
		"startLine": 20,
		"methodName": "notifyVerificationStarted",
		"isStatic": true,
		"isAbstract": false,
		"visibility": "public"
	},
	"history": {
		"4bc732153e83b9490d6d94c2e27ea2f6ac9dc10c": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Removed unnecessary type, we can use public type instead\n\n- Instead of MockitoMock, we can simply use our public API: MockingDetails. It allows us to reuse / dogfood our public API and have cleaner codebase.\n- Added new public API: mockingDetails.getMock(). I needed it to implement APIs for Spring Boot integration. Plus, it just make sense to add this method to make MockingDetails type more complete.\n",
			"commitDate": "2017-10-11, 9:31 AM",
			"commitName": "4bc732153e83b9490d6d94c2e27ea2f6ac9dc10c",
			"commitAuthor": "Szczepan Faber",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Removed unnecessary type, we can use public type instead\n\n- Instead of MockitoMock, we can simply use our public API: MockingDetails. It allows us to reuse / dogfood our public API and have cleaner codebase.\n- Added new public API: mockingDetails.getMock(). I needed it to implement APIs for Spring Boot integration. Plus, it just make sense to add this method to make MockingDetails type more complete.\n",
					"commitDate": "2017-10-11, 9:31 AM",
					"commitName": "4bc732153e83b9490d6d94c2e27ea2f6ac9dc10c",
					"commitAuthor": "Szczepan Faber",
					"commitDateOld": "2017-10-11, 9:13 AM",
					"commitNameOld": "4f0f9c973e31eee30c00700b5db9361d9e3df430",
					"commitAuthorOld": "Szczepan Faber",
					"daysBetweenCommits": 0.01,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,10 +1,10 @@\n-    public static Object notifyVerificationStarted(List<VerificationStartedListener> listeners, MockitoMock originalMock) {\n+    public static Object notifyVerificationStarted(List<VerificationStartedListener> listeners, MockingDetails originalMockingDetails) {\n         if (listeners.isEmpty()) {\n-            return originalMock.getMock();\n+            return originalMockingDetails.getMock();\n         }\n-        VerificationStartedEvent event = new Event(originalMock);\n+        VerificationStartedEvent event = new Event(originalMockingDetails);\n         for (VerificationStartedListener listener : listeners) {\n             listener.onVerificationStarted(event);\n         }\n         return event.getMock();\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[listeners-List<VerificationStartedListener>, originalMock-MockitoMock]",
						"newValue": "[listeners-List<VerificationStartedListener>, originalMockingDetails-MockingDetails]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Removed unnecessary type, we can use public type instead\n\n- Instead of MockitoMock, we can simply use our public API: MockingDetails. It allows us to reuse / dogfood our public API and have cleaner codebase.\n- Added new public API: mockingDetails.getMock(). I needed it to implement APIs for Spring Boot integration. Plus, it just make sense to add this method to make MockingDetails type more complete.\n",
					"commitDate": "2017-10-11, 9:31 AM",
					"commitName": "4bc732153e83b9490d6d94c2e27ea2f6ac9dc10c",
					"commitAuthor": "Szczepan Faber",
					"commitDateOld": "2017-10-11, 9:13 AM",
					"commitNameOld": "4f0f9c973e31eee30c00700b5db9361d9e3df430",
					"commitAuthorOld": "Szczepan Faber",
					"daysBetweenCommits": 0.01,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,10 +1,10 @@\n-    public static Object notifyVerificationStarted(List<VerificationStartedListener> listeners, MockitoMock originalMock) {\n+    public static Object notifyVerificationStarted(List<VerificationStartedListener> listeners, MockingDetails originalMockingDetails) {\n         if (listeners.isEmpty()) {\n-            return originalMock.getMock();\n+            return originalMockingDetails.getMock();\n         }\n-        VerificationStartedEvent event = new Event(originalMock);\n+        VerificationStartedEvent event = new Event(originalMockingDetails);\n         for (VerificationStartedListener listener : listeners) {\n             listener.onVerificationStarted(event);\n         }\n         return event.getMock();\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"bf9524388ba5fc8f3350399a65c0ccd31442f730": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Added coverage for API misuse\n\nIn the event that the user passes a mock with a wrong type, let's fail early. Also added missing coverage.\n",
			"commitDate": "2017-10-11, 12:18 AM",
			"commitName": "bf9524388ba5fc8f3350399a65c0ccd31442f730",
			"commitAuthor": "Szczepan Faber",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Added coverage for API misuse\n\nIn the event that the user passes a mock with a wrong type, let's fail early. Also added missing coverage.\n",
					"commitDate": "2017-10-11, 12:18 AM",
					"commitName": "bf9524388ba5fc8f3350399a65c0ccd31442f730",
					"commitAuthor": "Szczepan Faber",
					"commitDateOld": "2017-10-08, 9:24 AM",
					"commitNameOld": "f8cd5302bd16432f2f1263e716b1a57c82f086fa",
					"commitAuthorOld": "Szczepan Faber",
					"daysBetweenCommits": 2.62,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,11 +1,10 @@\n-    public static Object notifyVerificationStarted(List<VerificationStartedListener> listeners, Object mock) {\n+    public static Object notifyVerificationStarted(List<VerificationStartedListener> listeners, MockitoMock originalMock) {\n         if (listeners.isEmpty()) {\n-            return mock;\n+            return originalMock.getMock();\n         }\n-        VerificationStartedEvent event = new Event();\n-        event.setMock(mock);\n+        VerificationStartedEvent event = new Event(originalMock);\n         for (VerificationStartedListener listener : listeners) {\n             listener.onVerificationStarted(event);\n         }\n         return event.getMock();\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[listeners-List<VerificationStartedListener>, mock-Object]",
						"newValue": "[listeners-List<VerificationStartedListener>, originalMock-MockitoMock]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Added coverage for API misuse\n\nIn the event that the user passes a mock with a wrong type, let's fail early. Also added missing coverage.\n",
					"commitDate": "2017-10-11, 12:18 AM",
					"commitName": "bf9524388ba5fc8f3350399a65c0ccd31442f730",
					"commitAuthor": "Szczepan Faber",
					"commitDateOld": "2017-10-08, 9:24 AM",
					"commitNameOld": "f8cd5302bd16432f2f1263e716b1a57c82f086fa",
					"commitAuthorOld": "Szczepan Faber",
					"daysBetweenCommits": 2.62,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,11 +1,10 @@\n-    public static Object notifyVerificationStarted(List<VerificationStartedListener> listeners, Object mock) {\n+    public static Object notifyVerificationStarted(List<VerificationStartedListener> listeners, MockitoMock originalMock) {\n         if (listeners.isEmpty()) {\n-            return mock;\n+            return originalMock.getMock();\n         }\n-        VerificationStartedEvent event = new Event();\n-        event.setMock(mock);\n+        VerificationStartedEvent event = new Event(originalMock);\n         for (VerificationStartedListener listener : listeners) {\n             listener.onVerificationStarted(event);\n         }\n         return event.getMock();\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"83f3ba42f486ca9648e73ea7fafbe1641911c575": {
			"type": "Ybodychange",
			"commitMessage": "Added decent exception message for API misuse\n",
			"commitDate": "2017-10-08, 9:24 AM",
			"commitName": "83f3ba42f486ca9648e73ea7fafbe1641911c575",
			"commitAuthor": "Szczepan Faber",
			"commitDateOld": "2017-10-08, 9:24 AM",
			"commitNameOld": "23af43296ae2014776901ebd98d21c259fad5fb8",
			"commitAuthorOld": "Szczepan Faber",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,11 @@\n     public static Object notifyVerificationStarted(List<VerificationStartedListener> listeners, Object mock) {\n         if (listeners.isEmpty()) {\n             return mock;\n         }\n-        VerificationStartedEvent event = new DefaultVerificationStartedEvent();\n+        VerificationStartedEvent event = new Event();\n         event.setMock(mock);\n         for (VerificationStartedListener listener : listeners) {\n             listener.onVerificationStarted(event);\n         }\n         return event.getMock();\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"183ab9d97658ddb3342c60fc6611bcad5aa6d69d": {
			"type": "Ybodychange",
			"commitMessage": "Added checking null argument\n\nAlso improved test coverage\n",
			"commitDate": "2017-10-08, 9:24 AM",
			"commitName": "183ab9d97658ddb3342c60fc6611bcad5aa6d69d",
			"commitAuthor": "Szczepan Faber",
			"commitDateOld": "2017-10-08, 9:24 AM",
			"commitNameOld": "1f9b4f3de3af9f29e2123e74c5f6c036bb94d2aa",
			"commitAuthorOld": "Szczepan Faber",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,11 @@\n     public static Object notifyVerificationStarted(List<VerificationStartedListener> listeners, Object mock) {\n         if (listeners.isEmpty()) {\n-            //TODO! add unit test\n             return mock;\n         }\n         VerificationStartedEvent event = new DefaultVerificationStartedEvent();\n         event.setMock(mock);\n         for (VerificationStartedListener listener : listeners) {\n             listener.onVerificationStarted(event);\n         }\n         return event.getMock();\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"1f9b4f3de3af9f29e2123e74c5f6c036bb94d2aa": {
			"type": "Yintroduced",
			"commitMessage": "Added an API for dual proxy use case (Spring Boot)\n\n- For design and rationale, see #1191\n- For all the details, see Javadoc in VerificationStartedListener\n",
			"commitDate": "2017-10-08, 9:24 AM",
			"commitName": "1f9b4f3de3af9f29e2123e74c5f6c036bb94d2aa",
			"commitAuthor": "Szczepan Faber",
			"diff": "@@ -0,0 +1,12 @@\n+    public static Object notifyVerificationStarted(List<VerificationStartedListener> listeners, Object mock) {\n+        if (listeners.isEmpty()) {\n+            //TODO! add unit test\n+            return mock;\n+        }\n+        VerificationStartedEvent event = new DefaultVerificationStartedEvent();\n+        event.setMock(mock);\n+        for (VerificationStartedListener listener : listeners) {\n+            listener.onVerificationStarted(event);\n+        }\n+        return event.getMock();\n+    }\n\\ No newline at end of file\n"
		}
	},
	"sha": "077562ea54f1fa87ff8dd233c3060ddbf0f1ce26"
}