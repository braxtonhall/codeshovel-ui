{
	"repo": "https://github.com/spring-projects/spring-framework.git",
	"file": "spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java",
	"method": {
		"longName": "protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);",
		"startLine": 253,
		"methodName": "getConverter",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "protected"
	},
	"history": {
		"4dc289592d0072c7472ab455522362f8db42b4a7": {
			"type": "Ymultichange(Ymodifierchange,Ybodychange)",
			"commitMessage": "Refactor GenericConversionService\n\nRefactor internal workings of GenericConversionService in order to\nbetter support future enhancements. This commit should not affect\nexisting behavior.\n\nIssue: SPR-9927\n",
			"commitDate": "2012-10-30, 1:13 AM",
			"commitName": "4dc289592d0072c7472ab455522362f8db42b4a7",
			"commitAuthor": "Phillip Webb",
			"subchanges": [
				{
					"type": "Ymodifierchange",
					"commitMessage": "Refactor GenericConversionService\n\nRefactor internal workings of GenericConversionService in order to\nbetter support future enhancements. This commit should not affect\nexisting behavior.\n\nIssue: SPR-9927\n",
					"commitDate": "2012-10-30, 1:13 AM",
					"commitName": "4dc289592d0072c7472ab455522362f8db42b4a7",
					"commitAuthor": "Phillip Webb",
					"commitDateOld": "2012-10-26, 2:09 PM",
					"commitNameOld": "01272fb0e60b781a8f47ea849b25d144151ac4fb",
					"commitAuthorOld": "Phillip Webb",
					"daysBetweenCommits": 3.46,
					"commitsBetweenForRepo": 26,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,21 +1,11 @@\n-\tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n-\t\tConverterCacheKey key = new ConverterCacheKey(sourceType, targetType);\n-\t\tGenericConverter converter = this.converterCache.get(key);\n-\t\tif (converter != null) {\n-\t\t\treturn (converter != NO_MATCH ? converter : null);\n-\t\t}\n-\t\telse {\n-\t\t\tconverter = findConverterForClassPair(sourceType, targetType);\n-\t\t\tif (converter == null) {\n-\t\t\t\tconverter = getDefaultConverter(sourceType, targetType);\n+\t\tpublic GenericConverter getConverter(TypeDescriptor sourceType,\n+\t\t\t\tTypeDescriptor targetType) {\n+\t\t\tfor (GenericConverter converter : this.converters) {\n+\t\t\t\tif (!(converter instanceof ConditionalGenericConverter)\n+\t\t\t\t\t\t|| ((ConditionalGenericConverter) converter).matches(sourceType,\n+\t\t\t\t\t\t\t\ttargetType)) {\n+\t\t\t\t\treturn converter;\n+\t\t\t\t}\n \t\t\t}\n-\t\t\tif (converter != null) {\n-\t\t\t\tthis.converterCache.put(key, converter);\n-\t\t\t\treturn converter;\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tthis.converterCache.put(key, NO_MATCH);\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}\n-\t}\n\\ No newline at end of file\n+\t\t\treturn null;\n+\t\t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[protected]",
						"newValue": "[public]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Refactor GenericConversionService\n\nRefactor internal workings of GenericConversionService in order to\nbetter support future enhancements. This commit should not affect\nexisting behavior.\n\nIssue: SPR-9927\n",
					"commitDate": "2012-10-30, 1:13 AM",
					"commitName": "4dc289592d0072c7472ab455522362f8db42b4a7",
					"commitAuthor": "Phillip Webb",
					"commitDateOld": "2012-10-26, 2:09 PM",
					"commitNameOld": "01272fb0e60b781a8f47ea849b25d144151ac4fb",
					"commitAuthorOld": "Phillip Webb",
					"daysBetweenCommits": 3.46,
					"commitsBetweenForRepo": 26,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,21 +1,11 @@\n-\tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n-\t\tConverterCacheKey key = new ConverterCacheKey(sourceType, targetType);\n-\t\tGenericConverter converter = this.converterCache.get(key);\n-\t\tif (converter != null) {\n-\t\t\treturn (converter != NO_MATCH ? converter : null);\n-\t\t}\n-\t\telse {\n-\t\t\tconverter = findConverterForClassPair(sourceType, targetType);\n-\t\t\tif (converter == null) {\n-\t\t\t\tconverter = getDefaultConverter(sourceType, targetType);\n+\t\tpublic GenericConverter getConverter(TypeDescriptor sourceType,\n+\t\t\t\tTypeDescriptor targetType) {\n+\t\t\tfor (GenericConverter converter : this.converters) {\n+\t\t\t\tif (!(converter instanceof ConditionalGenericConverter)\n+\t\t\t\t\t\t|| ((ConditionalGenericConverter) converter).matches(sourceType,\n+\t\t\t\t\t\t\t\ttargetType)) {\n+\t\t\t\t\treturn converter;\n+\t\t\t\t}\n \t\t\t}\n-\t\t\tif (converter != null) {\n-\t\t\t\tthis.converterCache.put(key, converter);\n-\t\t\t\treturn converter;\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tthis.converterCache.put(key, NO_MATCH);\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}\n-\t}\n\\ No newline at end of file\n+\t\t\treturn null;\n+\t\t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"02a4473c62d8240837bec297f0a1f3cb67ef8a7b": {
			"type": "Yfilerename",
			"commitMessage": "Rename modules {org.springframework.*=>spring-*}\n\nThis renaming more intuitively expresses the relationship between\nsubprojects and the JAR artifacts they produce.\n\nTracking history across these renames is possible, but it requires\nuse of the --follow flag to `git log`, for example\n\n    $ git log spring-aop/src/main/java/org/springframework/aop/Advisor.java\n\nwill show history up until the renaming event, where\n\n    $ git log --follow spring-aop/src/main/java/org/springframework/aop/Advisor.java\n\nwill show history for all changes to the file, before and after the\nrenaming.\n\nSee http://chrisbeams.com/git-diff-across-renamed-directories\n",
			"commitDate": "2012-01-31, 5:37 AM",
			"commitName": "02a4473c62d8240837bec297f0a1f3cb67ef8a7b",
			"commitAuthor": "Chris Beams",
			"commitDateOld": "2012-01-31, 5:37 AM",
			"commitNameOld": "b6cb514d383dcef52ba6c609a863f19e1a4c1faf",
			"commitAuthorOld": "Chris Beams",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java",
				"newPath": "spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java"
			}
		},
		"33b53b7cca7ec2667d57d320d888c51e48b09ed6": {
			"type": "Ybodychange",
			"commitMessage": "alignment with 3.0.7 backports (SPR-8674)\n",
			"commitDate": "2011-12-01, 10:51 AM",
			"commitName": "33b53b7cca7ec2667d57d320d888c51e48b09ed6",
			"commitAuthor": "Juergen Hoeller",
			"commitDateOld": "2011-10-06, 7:17 AM",
			"commitNameOld": "00a726b09890726d12b13e7b300825b4aa8064ea",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 56.19,
			"commitsBetweenForRepo": 213,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,21 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n \t\tConverterCacheKey key = new ConverterCacheKey(sourceType, targetType);\n \t\tGenericConverter converter = this.converterCache.get(key);\n \t\tif (converter != null) {\n-\t\t\treturn converter != NO_MATCH ? converter : null;\n+\t\t\treturn (converter != NO_MATCH ? converter : null);\n \t\t}\n \t\telse {\n \t\t\tconverter = findConverterForClassPair(sourceType, targetType);\n \t\t\tif (converter == null) {\n \t\t\t\tconverter = getDefaultConverter(sourceType, targetType);\t\t\t\t\n \t\t\t}\n \t\t\tif (converter != null) {\n \t\t\t\tthis.converterCache.put(key, converter);\n \t\t\t\treturn converter;\n \t\t\t}\n \t\t\telse {\n \t\t\t\tthis.converterCache.put(key, NO_MATCH);\n \t\t\t\treturn null;\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b6e82048fc838ebbb2e58288eeda0c14119d38b9": {
			"type": "Ybodychange",
			"commitMessage": "removed GenericConversionService logging in order to avoid toString side effects (and to avoid isTraceEnabled overhead; SPR-8297)\n",
			"commitDate": "2011-08-04, 10:22 AM",
			"commitName": "b6e82048fc838ebbb2e58288eeda0c14119d38b9",
			"commitAuthor": "Juergen Hoeller",
			"commitDateOld": "2011-06-05, 11:36 AM",
			"commitNameOld": "a40f6585b465671203dea286774584ba25da5a42",
			"commitAuthorOld": "Keith Donald",
			"daysBetweenCommits": 59.95,
			"commitsBetweenForRepo": 308,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,29 +1,21 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n \t\tConverterCacheKey key = new ConverterCacheKey(sourceType, targetType);\n \t\tGenericConverter converter = this.converterCache.get(key);\n \t\tif (converter != null) {\n-\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\tlogger.trace(\"Matched cached converter \" + converter);\n-\t\t\t}\n \t\t\treturn converter != NO_MATCH ? converter : null;\n \t\t}\n \t\telse {\n \t\t\tconverter = findConverterForClassPair(sourceType, targetType);\n \t\t\tif (converter == null) {\n \t\t\t\tconverter = getDefaultConverter(sourceType, targetType);\t\t\t\t\n \t\t\t}\n \t\t\tif (converter != null) {\n-\t\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\t\tlogger.trace(\"Caching matched Converter under key \" + key);\n-\t\t\t\t}\n \t\t\t\tthis.converterCache.put(key, converter);\n \t\t\t\treturn converter;\n-\t\t\t} else {\n-\t\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\t\tlogger.trace(\"Caching Converter [NO_MATCH] result under key \" + key);\n-\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n \t\t\t\tthis.converterCache.put(key, NO_MATCH);\n \t\t\t\treturn null;\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c84cccf06dad4e3f11cd529ab16a5655bf723820": {
			"type": "Ybodychange",
			"commitMessage": "revised TypeDescriptor NULL and element/mapKey/mapValue type semantics\n",
			"commitDate": "2011-06-04, 9:43 PM",
			"commitName": "c84cccf06dad4e3f11cd529ab16a5655bf723820",
			"commitAuthor": "Keith Donald",
			"commitDateOld": "2011-06-03, 10:38 PM",
			"commitNameOld": "5db1687d29c4b23d05f061ab7fb3450111314050",
			"commitAuthorOld": "Keith Donald",
			"daysBetweenCommits": 0.96,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,33 +1,29 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n \t\tConverterCacheKey key = new ConverterCacheKey(sourceType, targetType);\n \t\tGenericConverter converter = this.converterCache.get(key);\n \t\tif (converter != null) {\n \t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\tlogger.trace(\"Matched cached converter \" + converter);\n \t\t\t}\n-\t\t\treturn (converter != NO_MATCH ? converter : null);\n+\t\t\treturn converter != NO_MATCH ? converter : null;\n \t\t}\n \t\telse {\n \t\t\tconverter = findConverterForClassPair(sourceType, targetType);\n+\t\t\tif (converter == null) {\n+\t\t\t\tconverter = getDefaultConverter(sourceType, targetType);\t\t\t\t\n+\t\t\t}\n \t\t\tif (converter != null) {\n \t\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\t\tlogger.trace(\"Caching under \" + key);\n+\t\t\t\t\tlogger.trace(\"Caching matched Converter under key \" + key);\n \t\t\t\t}\n \t\t\t\tthis.converterCache.put(key, converter);\n \t\t\t\treturn converter;\n-\t\t\t}\n-\t\t\tconverter = getDefaultConverter(sourceType, targetType);\n-\t\t\tif (converter != null) {\n+\t\t\t} else {\n \t\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\t\tlogger.trace(\"Caching under \" + key);\n+\t\t\t\t\tlogger.trace(\"Caching Converter [NO_MATCH] result under key \" + key);\n \t\t\t\t}\n-\t\t\t\tthis.converterCache.put(key, converter);\n-\t\t\t\treturn converter;\t\t\t\t\n+\t\t\t\tthis.converterCache.put(key, NO_MATCH);\n+\t\t\t\treturn null;\n \t\t\t}\n-\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\tlogger.trace(\"Caching NO_MATCH under \" + key);\n-\t\t\t}\n-\t\t\tthis.converterCache.put(key, NO_MATCH);\n-\t\t\treturn null;\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"27b04036a9e6e7434bf3ef0942b417aa16b90574": {
			"type": "Ybodychange",
			"commitMessage": "ConversionService is able to deal with empty collections and nested collections (fixed regression; SPR-7289, SPR-7293); ConversionService properly handles nested Resource arrays in Map values (fixed regression; SPR-7295); ConversionService does not accidentally use copy constructor for same type (SPR-7304)\n",
			"commitDate": "2010-06-23, 10:29 AM",
			"commitName": "27b04036a9e6e7434bf3ef0942b417aa16b90574",
			"commitAuthor": "Juergen Hoeller",
			"commitDateOld": "2010-06-15, 2:35 AM",
			"commitNameOld": "7b189d11243a3632af948a86e8e7d981b0890b9b",
			"commitAuthorOld": "Juergen Hoeller",
			"daysBetweenCommits": 8.33,
			"commitsBetweenForRepo": 20,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,33 +1,33 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n \t\tConverterCacheKey key = new ConverterCacheKey(sourceType, targetType);\n \t\tGenericConverter converter = this.converterCache.get(key);\n \t\tif (converter != null) {\n \t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\tlogger.trace(\"Matched cached converter \" + converter);\n \t\t\t}\n-\t\t\treturn converter != NO_MATCH ? converter : null; \n+\t\t\treturn (converter != NO_MATCH ? converter : null);\n \t\t}\n \t\telse {\n \t\t\tconverter = findConverterForClassPair(sourceType, targetType);\n \t\t\tif (converter != null) {\n \t\t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\t\tlogger.trace(\"Caching under \" + key);\n \t\t\t\t}\n \t\t\t\tthis.converterCache.put(key, converter);\n \t\t\t\treturn converter;\n \t\t\t}\n \t\t\tconverter = getDefaultConverter(sourceType, targetType);\n \t\t\tif (converter != null) {\n \t\t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\t\tlogger.trace(\"Caching under \" + key);\n \t\t\t\t}\n \t\t\t\tthis.converterCache.put(key, converter);\n \t\t\t\treturn converter;\t\t\t\t\n \t\t\t}\n \t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\tlogger.trace(\"Caching NO_MATCH under \" + key);\n \t\t\t}\n \t\t\tthis.converterCache.put(key, NO_MATCH);\n \t\t\treturn null;\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"902938e95f19b7547421064720b016ba49e3c02e": {
			"type": "Ybodychange",
			"commitMessage": "smarter guessing of the element type (SPR-7283)\n",
			"commitDate": "2010-06-14, 3:58 PM",
			"commitName": "902938e95f19b7547421064720b016ba49e3c02e",
			"commitAuthor": "Juergen Hoeller",
			"commitDateOld": "2010-05-26, 6:58 AM",
			"commitNameOld": "15321197878f7b863976393a1b2cf89ba0469083",
			"commitAuthorOld": "Juergen Hoeller",
			"daysBetweenCommits": 19.37,
			"commitsBetweenForRepo": 47,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,33 +1,33 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n \t\tConverterCacheKey key = new ConverterCacheKey(sourceType, targetType);\n-\t\tGenericConverter converter = converterCache.get(key);\n+\t\tGenericConverter converter = this.converterCache.get(key);\n \t\tif (converter != null) {\n-\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\tlogger.debug(\"Matched cached converter \" + converter);\n+\t\t\tif (logger.isTraceEnabled()) {\n+\t\t\t\tlogger.trace(\"Matched cached converter \" + converter);\n \t\t\t}\n \t\t\treturn converter != NO_MATCH ? converter : null; \n \t\t}\n \t\telse {\n \t\t\tconverter = findConverterForClassPair(sourceType, targetType);\n \t\t\tif (converter != null) {\n \t\t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\t\tlogger.trace(\"Caching under \" + key);\n \t\t\t\t}\n-\t\t\t\tconverterCache.put(key, converter);\n+\t\t\t\tthis.converterCache.put(key, converter);\n \t\t\t\treturn converter;\n \t\t\t}\n \t\t\tconverter = getDefaultConverter(sourceType, targetType);\n \t\t\tif (converter != null) {\n \t\t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\t\tlogger.trace(\"Caching under \" + key);\n \t\t\t\t}\n-\t\t\t\tconverterCache.put(key, converter);\n+\t\t\t\tthis.converterCache.put(key, converter);\n \t\t\t\treturn converter;\t\t\t\t\n \t\t\t}\n \t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\tlogger.trace(\"Caching NO_MATCH under \" + key);\n \t\t\t}\n-\t\t\tconverterCache.put(key, NO_MATCH);\n+\t\t\tthis.converterCache.put(key, NO_MATCH);\n \t\t\treturn null;\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"bf03d0d56f9fcfc4757bd3ab35e40c3f528fe710": {
			"type": "Ybodychange",
			"commitMessage": "converter caching\n",
			"commitDate": "2010-04-18, 2:43 PM",
			"commitName": "bf03d0d56f9fcfc4757bd3ab35e40c3f528fe710",
			"commitAuthor": "Keith Donald",
			"commitDateOld": "2010-04-16, 11:28 PM",
			"commitNameOld": "b9aeba23ef82b4c69d740462b190b6e1ad24c3b6",
			"commitAuthorOld": "Keith Donald",
			"daysBetweenCommits": 1.64,
			"commitsBetweenForRepo": 6,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,9 +1,32 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n-\t\tGenericConverter converter = findConverterForClassPair(sourceType, targetType);\n+\t\tConverterCacheKey key = new ConverterCacheKey(sourceType, targetType);\n+\t\tGenericConverter converter = converterCache.get(key);\n \t\tif (converter != null) {\n-\t\t\treturn converter;\n-\t\t}\n-\t\telse {\n-\t\t\treturn getDefaultConverter(sourceType, targetType);\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"Matched cached converter \" + converter);\n+\t\t\t}\n+\t\t\treturn converter != NO_MATCH ? converter : null; \n+\t\t} else {\t\t\t\n+\t\t\tconverter = findConverterForClassPair(sourceType, targetType);\n+\t\t\tif (converter != null) {\n+\t\t\t\tif (logger.isTraceEnabled()) {\n+\t\t\t\t\tlogger.trace(\"Caching under \" + key);\n+\t\t\t\t}\n+\t\t\t\tconverterCache.put(key, converter);\n+\t\t\t\treturn converter;\n+\t\t\t}\n+\t\t\tconverter = getDefaultConverter(sourceType, targetType);\n+\t\t\tif (converter != null) {\n+\t\t\t\tif (logger.isTraceEnabled()) {\n+\t\t\t\t\tlogger.trace(\"Caching under \" + key);\n+\t\t\t\t}\n+\t\t\t\tconverterCache.put(key, converter);\n+\t\t\t\treturn converter;\t\t\t\t\n+\t\t\t}\n+\t\t\tif (logger.isTraceEnabled()) {\n+\t\t\t\tlogger.trace(\"Caching NO_MATCH under \" + key);\n+\t\t\t}\n+\t\t\tconverterCache.put(key, NO_MATCH);\n+\t\t\treturn null;\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d85dc01e282d0e215cf6db0f8b45eb04eecf3eca": {
			"type": "Ybodychange",
			"commitMessage": "moved generic converter to spi; added entity converter; removed various service impls in favor of service factory\n",
			"commitDate": "2009-11-19, 1:10 AM",
			"commitName": "d85dc01e282d0e215cf6db0f8b45eb04eecf3eca",
			"commitAuthor": "Keith Donald",
			"commitDateOld": "2009-11-11, 10:57 PM",
			"commitNameOld": "70fe75384d9e387de6ae7abf1d513ed9e4cfc03a",
			"commitAuthorOld": "Keith Donald",
			"daysBetweenCommits": 7.09,
			"commitsBetweenForRepo": 63,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,8 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n \t\tGenericConverter converter = findConverterForClassPair(sourceType, targetType);\n \t\tif (converter != null) {\n \t\t\treturn converter;\n-\t\t} else if (this.parent != null && this.parent.canConvert(sourceType, targetType)) {\n-\t\t\treturn this.parentConverterAdapter;\n \t\t} else {\n \t\t\treturn getDefaultConverter(sourceType, targetType);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f0de1c3069aea81a529555e5045ab44f553f586c": {
			"type": "Ybodychange",
			"commitMessage": "revised matchable converter lookup algorithm; added conversion service bean container tests\n",
			"commitDate": "2009-11-05, 6:52 AM",
			"commitName": "f0de1c3069aea81a529555e5045ab44f553f586c",
			"commitAuthor": "Keith Donald",
			"commitDateOld": "2009-11-04, 2:53 PM",
			"commitNameOld": "9ec337b736cb0dc1b087f1070fff34e11b8ccd08",
			"commitAuthorOld": "Keith Donald",
			"daysBetweenCommits": 0.67,
			"commitsBetweenForRepo": 9,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,10 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n-\t\tMatchableConverters matchable = findMatchableConvertersForClassPair(sourceType.getObjectType(), targetType\n-\t\t\t\t.getObjectType());\n-\t\tGenericConverter converter = matchConverter(matchable, sourceType, targetType);\n+\t\tGenericConverter converter = findConverterForClassPair(sourceType, targetType);\n \t\tif (converter != null) {\n \t\t\treturn converter;\n \t\t} else if (this.parent != null && this.parent.canConvert(sourceType, targetType)) {\n \t\t\treturn this.parentConverterAdapter;\n \t\t} else {\n \t\t\treturn getDefaultConverter(sourceType, targetType);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0a78287a8f0c0e80481fdaa586e9341d95f0a79e": {
			"type": "Ybodychange",
			"commitMessage": "formatters now plugged into unified type conversion api with formatter specific registry spi\n",
			"commitDate": "2009-11-03, 4:08 PM",
			"commitName": "0a78287a8f0c0e80481fdaa586e9341d95f0a79e",
			"commitAuthor": "Keith Donald",
			"commitDateOld": "2009-10-30, 11:44 AM",
			"commitNameOld": "913bc03a3b65d1aabf89dd4fe58310416dee495e",
			"commitAuthorOld": "Keith Donald",
			"daysBetweenCommits": 4.23,
			"commitsBetweenForRepo": 15,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,11 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n-\t\tGenericConverter converter = findConverterByClassPair(sourceType.getObjectType(), targetType.getObjectType());\n+\t\tMatchableConverters matchable = findMatchableConvertersForClassPair(sourceType.getObjectType(), targetType.getObjectType());\n+\t\tGenericConverter converter = matchConverter(matchable, sourceType, targetType);\n \t\tif (converter != null) {\n \t\t\treturn converter;\n \t\t} else if (this.parent != null && this.parent.canConvert(sourceType, targetType)) {\n \t\t\treturn this.parentConverterAdapter;\n \t\t} else {\n \t\t\treturn getDefaultConverter(sourceType, targetType);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0f5074db2b5fd37f25976449d6e270ccd47fab93": {
			"type": "Ybodychange",
			"commitMessage": "spel mapping, polish\n",
			"commitDate": "2009-10-06, 2:31 PM",
			"commitName": "0f5074db2b5fd37f25976449d6e270ccd47fab93",
			"commitAuthor": "Keith Donald",
			"commitDateOld": "2009-10-03, 9:13 PM",
			"commitNameOld": "e7c8f1ef8b87b7763b9c27caf3e028321d5c5b62",
			"commitAuthorOld": "Keith Donald",
			"daysBetweenCommits": 2.72,
			"commitsBetweenForRepo": 13,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,14 +1,10 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n \t\tGenericConverter converter = findConverterByClassPair(sourceType.getObjectType(), targetType.getObjectType());\n \t\tif (converter != null) {\n \t\t\treturn converter;\n \t\t} else if (this.parent != null && this.parent.canConvert(sourceType, targetType)) {\n \t\t\treturn this.parentConverterAdapter;\n \t\t} else {\n-\t\t\tif (sourceType.isAssignableTo(targetType)) {\n-\t\t\t\treturn NO_OP_CONVERTER;\n-\t\t\t} else {\n-\t\t\t\treturn null;\n-\t\t\t}\n+\t\t\treturn getDefaultConverter(sourceType, targetType);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"871fc14fbbfe528d1d91a6dede52fc28795de887": {
			"type": "Ybodychange",
			"commitMessage": "restored parent property to accept ConversionService instead of GenericConversionService\n",
			"commitDate": "2009-09-22, 6:37 AM",
			"commitName": "871fc14fbbfe528d1d91a6dede52fc28795de887",
			"commitAuthor": "Juergen Hoeller",
			"commitDateOld": "2009-09-21, 3:35 PM",
			"commitNameOld": "e9416db4722cae44cfe82276e625a62c519c16a4",
			"commitAuthorOld": "Keith Donald",
			"daysBetweenCommits": 0.63,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,17 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n \t\tGenericConverter converter = findConverterByClassPair(sourceType.getObjectType(), targetType.getObjectType());\n \t\tif (converter != null) {\n \t\t\treturn converter;\n \t\t}\n-\t\tif (this.parent != null) {\n-\t\t\treturn this.parent.getConverter(sourceType, targetType);\n-\t\t} else {\n+\t\telse if (this.parent != null && this.parent.canConvert(sourceType, targetType)) {\n+\t\t\treturn this.parentConverterAdapter;\n+\t\t}\n+\t\telse {\n \t\t\tif (sourceType.isAssignableTo(targetType)) {\n \t\t\t\treturn NO_OP_CONVERTER;\n-\t\t\t} else {\n+\t\t\t}\n+\t\t\telse {\n \t\t\t\treturn null;\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"01e900c33a2f4be526cd24000acdbf3f5c8ee27b": {
			"type": "Ybodychange",
			"commitMessage": "documented hooks\n",
			"commitDate": "2009-09-21, 3:24 PM",
			"commitName": "01e900c33a2f4be526cd24000acdbf3f5c8ee27b",
			"commitAuthor": "Keith Donald",
			"commitDateOld": "2009-09-21, 2:32 PM",
			"commitNameOld": "a6e28f4eb5822892133bc4bdd32d12f42a8c00ed",
			"commitAuthorOld": "Keith Donald",
			"daysBetweenCommits": 0.04,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,15 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n \t\tGenericConverter converter = findConverterByClassPair(sourceType.getObjectType(), targetType.getObjectType());\n \t\tif (converter != null) {\n \t\t\treturn converter;\n \t\t}\n \t\tif (this.parent != null) {\n \t\t\treturn this.parent.getConverter(sourceType, targetType);\n \t\t} else {\n \t\t\tif (sourceType.isAssignableTo(targetType)) {\n \t\t\t\treturn NO_OP_CONVERTER;\n \t\t\t} else {\n-\t\t\t\tthrow new ConverterNotFoundException(sourceType, targetType);\n+\t\t\t\treturn null;\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"6ce33dba7564a71c5ccca6696f3c20083a1e34d0": {
			"type": "Ybodychange",
			"commitMessage": "getConverter calls now throw exception and query parent\n",
			"commitDate": "2009-09-21, 2:24 PM",
			"commitName": "6ce33dba7564a71c5ccca6696f3c20083a1e34d0",
			"commitAuthor": "Keith Donald",
			"commitDateOld": "2009-09-20, 10:39 PM",
			"commitNameOld": "17f7796d42d9a579bbb841e4d68ad0dd602da294",
			"commitAuthorOld": "Keith Donald",
			"daysBetweenCommits": 0.66,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,3 +1,15 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n-\t\treturn findConverterByClassPair(sourceType.getObjectType(), targetType.getObjectType());\n+\t\tGenericConverter converter = findConverterByClassPair(sourceType.getObjectType(), targetType.getObjectType());\n+\t\tif (converter != null) {\n+\t\t\treturn converter;\n+\t\t}\n+\t\tif (this.parent != null) {\n+\t\t\treturn this.parent.getConverter(sourceType, targetType);\n+\t\t} else {\n+\t\t\tif (sourceType.isAssignableTo(targetType)) {\n+\t\t\t\treturn NO_OP_CONVERTER;\n+\t\t\t} else {\n+\t\t\t\tthrow new ConverterNotFoundException(sourceType, targetType);\n+\t\t\t}\n+\t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"67c02f6c35cc94625381ed7debd7bf89932c8d05": {
			"type": "Ybodychange",
			"commitMessage": "generic converter revising\n",
			"commitDate": "2009-09-20, 10:14 PM",
			"commitName": "67c02f6c35cc94625381ed7debd7bf89932c8d05",
			"commitAuthor": "Keith Donald",
			"commitDateOld": "2009-09-18, 4:02 PM",
			"commitNameOld": "48bc060a77bb02caf319d1ad9aa618a1bfac7d1c",
			"commitAuthorOld": "Keith Donald",
			"daysBetweenCommits": 2.26,
			"commitsBetweenForRepo": 6,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,3 @@\n \tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n-\t\tGenericConverter converter = matchConverterByClassPair(sourceType.getObjectType(), targetType.getObjectType());\n-\t\tif (converter == null) {\n-\t\t\tfor (GenericConverter matchableConverter : this.matchableConverters) {\n-\t\t\t\tif (matchableConverter.canConvert(sourceType, targetType)) {\n-\t\t\t\t\treturn matchableConverter;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn converter;\n+\t\treturn findConverterByClassPair(sourceType.getObjectType(), targetType.getObjectType());\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d3b43ebccb923c6d5825b10d4f4f305b54ee549d": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "refined generic converter concept\n",
			"commitDate": "2009-09-18, 12:57 PM",
			"commitName": "d3b43ebccb923c6d5825b10d4f4f305b54ee549d",
			"commitAuthor": "Keith Donald",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "refined generic converter concept\n",
					"commitDate": "2009-09-18, 12:57 PM",
					"commitName": "d3b43ebccb923c6d5825b10d4f4f305b54ee549d",
					"commitAuthor": "Keith Donald",
					"commitDateOld": "2009-09-18, 7:30 AM",
					"commitNameOld": "8e800f03226747a12adc235ca80bd94513b67ca8",
					"commitAuthorOld": "Keith Donald",
					"daysBetweenCommits": 0.23,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,39 +1,11 @@\n-\tprotected GenericConverter getConverter(Class sourceType, TypeDescriptor targetType) {\n-\t\tif (sourceType.isInterface()) {\n-\t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n-\t\t\tclassQueue.addFirst(sourceType);\n-\t\t\twhile (!classQueue.isEmpty()) {\n-\t\t\t\tClass currentClass = classQueue.removeLast();\n-\t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n-\t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n-\t\t\t\tif (converter != null) {\n-\t\t\t\t\treturn converter;\n-\t\t\t\t}\n-\t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n-\t\t\t\tfor (Class ifc : interfaces) {\n-\t\t\t\t\tclassQueue.addFirst(ifc);\n+\tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n+\t\tGenericConverter converter = matchConverterByClassPair(sourceType.getObjectType(), targetType.getObjectType());\n+\t\tif (converter == null) {\n+\t\t\tfor (GenericConverter matchableConverter : this.matchableConverters) {\n+\t\t\t\tif (matchableConverter.canConvert(sourceType, targetType)) {\n+\t\t\t\t\treturn matchableConverter;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tMap<Class, GenericConverter> objectConverters = getConvertersForSource(Object.class);\n-\t\t\treturn getConverter(objectConverters, targetType);\n-\t\t} else {\n-\t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n-\t\t\tclassQueue.addFirst(sourceType);\n-\t\t\twhile (!classQueue.isEmpty()) {\n-\t\t\t\tClass currentClass = classQueue.removeLast();\n-\t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n-\t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n-\t\t\t\tif (converter != null) {\n-\t\t\t\t\treturn converter;\n-\t\t\t\t}\n-\t\t\t\tif (currentClass.getSuperclass() != null) {\n-\t\t\t\t\tclassQueue.addFirst(currentClass.getSuperclass());\n-\t\t\t\t}\n-\t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n-\t\t\t\tfor (Class ifc : interfaces) {\n-\t\t\t\t\tclassQueue.addFirst(ifc);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn null;\n \t\t}\n+\t\treturn converter;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[sourceType-Class, targetType-TypeDescriptor]",
						"newValue": "[sourceType-TypeDescriptor, targetType-TypeDescriptor]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "refined generic converter concept\n",
					"commitDate": "2009-09-18, 12:57 PM",
					"commitName": "d3b43ebccb923c6d5825b10d4f4f305b54ee549d",
					"commitAuthor": "Keith Donald",
					"commitDateOld": "2009-09-18, 7:30 AM",
					"commitNameOld": "8e800f03226747a12adc235ca80bd94513b67ca8",
					"commitAuthorOld": "Keith Donald",
					"daysBetweenCommits": 0.23,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,39 +1,11 @@\n-\tprotected GenericConverter getConverter(Class sourceType, TypeDescriptor targetType) {\n-\t\tif (sourceType.isInterface()) {\n-\t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n-\t\t\tclassQueue.addFirst(sourceType);\n-\t\t\twhile (!classQueue.isEmpty()) {\n-\t\t\t\tClass currentClass = classQueue.removeLast();\n-\t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n-\t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n-\t\t\t\tif (converter != null) {\n-\t\t\t\t\treturn converter;\n-\t\t\t\t}\n-\t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n-\t\t\t\tfor (Class ifc : interfaces) {\n-\t\t\t\t\tclassQueue.addFirst(ifc);\n+\tprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\n+\t\tGenericConverter converter = matchConverterByClassPair(sourceType.getObjectType(), targetType.getObjectType());\n+\t\tif (converter == null) {\n+\t\t\tfor (GenericConverter matchableConverter : this.matchableConverters) {\n+\t\t\t\tif (matchableConverter.canConvert(sourceType, targetType)) {\n+\t\t\t\t\treturn matchableConverter;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tMap<Class, GenericConverter> objectConverters = getConvertersForSource(Object.class);\n-\t\t\treturn getConverter(objectConverters, targetType);\n-\t\t} else {\n-\t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n-\t\t\tclassQueue.addFirst(sourceType);\n-\t\t\twhile (!classQueue.isEmpty()) {\n-\t\t\t\tClass currentClass = classQueue.removeLast();\n-\t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n-\t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n-\t\t\t\tif (converter != null) {\n-\t\t\t\t\treturn converter;\n-\t\t\t\t}\n-\t\t\t\tif (currentClass.getSuperclass() != null) {\n-\t\t\t\t\tclassQueue.addFirst(currentClass.getSuperclass());\n-\t\t\t\t}\n-\t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n-\t\t\t\tfor (Class ifc : interfaces) {\n-\t\t\t\t\tclassQueue.addFirst(ifc);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn null;\n \t\t}\n+\t\treturn converter;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"31441627de02bcc4ac2dcf307809b3c94b642e7b": {
			"type": "Yparameterchange",
			"commitMessage": "updated formatter conversion service adapter to work with type descriptor\n",
			"commitDate": "2009-09-17, 12:48 PM",
			"commitName": "31441627de02bcc4ac2dcf307809b3c94b642e7b",
			"commitAuthor": "Keith Donald",
			"commitDateOld": "2009-09-17, 12:24 PM",
			"commitNameOld": "33c19b8b14b534ba423c9cee51c90536daa6e119",
			"commitAuthorOld": "Keith Donald",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,39 +1,39 @@\n-\tprotected GenericConverter getConverter(Class<?> sourceType, Class<?> targetType) {\n+\tprotected GenericConverter getConverter(Class sourceType, TypeDescriptor targetType) {\n \t\tif (sourceType.isInterface()) {\n \t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n \t\t\tclassQueue.addFirst(sourceType);\n \t\t\twhile (!classQueue.isEmpty()) {\n \t\t\t\tClass currentClass = classQueue.removeLast();\n \t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n \t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n \t\t\t\tfor (Class ifc : interfaces) {\n \t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n \t\t\tMap<Class, GenericConverter> objectConverters = getConvertersForSource(Object.class);\n \t\t\treturn getConverter(objectConverters, targetType);\n \t\t} else {\n \t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n \t\t\tclassQueue.addFirst(sourceType);\n \t\t\twhile (!classQueue.isEmpty()) {\n \t\t\t\tClass currentClass = classQueue.removeLast();\n \t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n \t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tif (currentClass.getSuperclass() != null) {\n \t\t\t\t\tclassQueue.addFirst(currentClass.getSuperclass());\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n \t\t\t\tfor (Class ifc : interfaces) {\n \t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn null;\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[sourceType-Class<?>, targetType-Class<?>]",
				"newValue": "[sourceType-Class, targetType-TypeDescriptor]"
			}
		},
		"33c19b8b14b534ba423c9cee51c90536daa6e119": {
			"type": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
			"commitMessage": "Converter system implementation cleanup and tidying; wip\n",
			"commitDate": "2009-09-17, 12:24 PM",
			"commitName": "33c19b8b14b534ba423c9cee51c90536daa6e119",
			"commitAuthor": "Keith Donald",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Converter system implementation cleanup and tidying; wip\n",
					"commitDate": "2009-09-17, 12:24 PM",
					"commitName": "33c19b8b14b534ba423c9cee51c90536daa6e119",
					"commitAuthor": "Keith Donald",
					"commitDateOld": "2009-09-16, 12:24 PM",
					"commitNameOld": "1c6965132f05ab9d127157d637728bddce5d0b39",
					"commitAuthorOld": "Keith Donald",
					"daysBetweenCommits": 1,
					"commitsBetweenForRepo": 8,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,37 +1,39 @@\n-\tprivate Converter getConverter(Map<Class, Object> converters, Class<?> targetType) {\n-\t\tif (targetType.isInterface()) {\n+\tprotected GenericConverter getConverter(Class<?> sourceType, Class<?> targetType) {\n+\t\tif (sourceType.isInterface()) {\n \t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n-\t\t\tclassQueue.addFirst(targetType);\n+\t\t\tclassQueue.addFirst(sourceType);\n \t\t\twhile (!classQueue.isEmpty()) {\n \t\t\t\tClass currentClass = classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n+\t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n+\t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n \t\t\t\tfor (Class ifc : interfaces) {\n \t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n-\t\t\treturn getConverter(converters, Object.class, targetType);\n-\t\t}\n-\t\telse {\n+\t\t\tMap<Class, GenericConverter> objectConverters = getConvertersForSource(Object.class);\n+\t\t\treturn getConverter(objectConverters, targetType);\n+\t\t} else {\n \t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n-\t\t\tclassQueue.addFirst(targetType);\n+\t\t\tclassQueue.addFirst(sourceType);\n \t\t\twhile (!classQueue.isEmpty()) {\n \t\t\t\tClass currentClass = classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n+\t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n+\t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tif (currentClass.getSuperclass() != null) {\n \t\t\t\t\tclassQueue.addFirst(currentClass.getSuperclass());\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n \t\t\t\tfor (Class ifc : interfaces) {\n \t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn null;\n-\t\t}\t\t\n+\t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[converters-Map<Class,Object>, targetType-Class<?>]",
						"newValue": "[sourceType-Class<?>, targetType-Class<?>]"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "Converter system implementation cleanup and tidying; wip\n",
					"commitDate": "2009-09-17, 12:24 PM",
					"commitName": "33c19b8b14b534ba423c9cee51c90536daa6e119",
					"commitAuthor": "Keith Donald",
					"commitDateOld": "2009-09-16, 12:24 PM",
					"commitNameOld": "1c6965132f05ab9d127157d637728bddce5d0b39",
					"commitAuthorOld": "Keith Donald",
					"daysBetweenCommits": 1,
					"commitsBetweenForRepo": 8,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,37 +1,39 @@\n-\tprivate Converter getConverter(Map<Class, Object> converters, Class<?> targetType) {\n-\t\tif (targetType.isInterface()) {\n+\tprotected GenericConverter getConverter(Class<?> sourceType, Class<?> targetType) {\n+\t\tif (sourceType.isInterface()) {\n \t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n-\t\t\tclassQueue.addFirst(targetType);\n+\t\t\tclassQueue.addFirst(sourceType);\n \t\t\twhile (!classQueue.isEmpty()) {\n \t\t\t\tClass currentClass = classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n+\t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n+\t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n \t\t\t\tfor (Class ifc : interfaces) {\n \t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n-\t\t\treturn getConverter(converters, Object.class, targetType);\n-\t\t}\n-\t\telse {\n+\t\t\tMap<Class, GenericConverter> objectConverters = getConvertersForSource(Object.class);\n+\t\t\treturn getConverter(objectConverters, targetType);\n+\t\t} else {\n \t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n-\t\t\tclassQueue.addFirst(targetType);\n+\t\t\tclassQueue.addFirst(sourceType);\n \t\t\twhile (!classQueue.isEmpty()) {\n \t\t\t\tClass currentClass = classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n+\t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n+\t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tif (currentClass.getSuperclass() != null) {\n \t\t\t\t\tclassQueue.addFirst(currentClass.getSuperclass());\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n \t\t\t\tfor (Class ifc : interfaces) {\n \t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn null;\n-\t\t}\t\t\n+\t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "Converter",
						"newValue": "GenericConverter"
					}
				},
				{
					"type": "Ymodifierchange",
					"commitMessage": "Converter system implementation cleanup and tidying; wip\n",
					"commitDate": "2009-09-17, 12:24 PM",
					"commitName": "33c19b8b14b534ba423c9cee51c90536daa6e119",
					"commitAuthor": "Keith Donald",
					"commitDateOld": "2009-09-16, 12:24 PM",
					"commitNameOld": "1c6965132f05ab9d127157d637728bddce5d0b39",
					"commitAuthorOld": "Keith Donald",
					"daysBetweenCommits": 1,
					"commitsBetweenForRepo": 8,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,37 +1,39 @@\n-\tprivate Converter getConverter(Map<Class, Object> converters, Class<?> targetType) {\n-\t\tif (targetType.isInterface()) {\n+\tprotected GenericConverter getConverter(Class<?> sourceType, Class<?> targetType) {\n+\t\tif (sourceType.isInterface()) {\n \t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n-\t\t\tclassQueue.addFirst(targetType);\n+\t\t\tclassQueue.addFirst(sourceType);\n \t\t\twhile (!classQueue.isEmpty()) {\n \t\t\t\tClass currentClass = classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n+\t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n+\t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n \t\t\t\tfor (Class ifc : interfaces) {\n \t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n-\t\t\treturn getConverter(converters, Object.class, targetType);\n-\t\t}\n-\t\telse {\n+\t\t\tMap<Class, GenericConverter> objectConverters = getConvertersForSource(Object.class);\n+\t\t\treturn getConverter(objectConverters, targetType);\n+\t\t} else {\n \t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n-\t\t\tclassQueue.addFirst(targetType);\n+\t\t\tclassQueue.addFirst(sourceType);\n \t\t\twhile (!classQueue.isEmpty()) {\n \t\t\t\tClass currentClass = classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n+\t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n+\t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tif (currentClass.getSuperclass() != null) {\n \t\t\t\t\tclassQueue.addFirst(currentClass.getSuperclass());\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n \t\t\t\tfor (Class ifc : interfaces) {\n \t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn null;\n-\t\t}\t\t\n+\t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[private]",
						"newValue": "[protected]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Converter system implementation cleanup and tidying; wip\n",
					"commitDate": "2009-09-17, 12:24 PM",
					"commitName": "33c19b8b14b534ba423c9cee51c90536daa6e119",
					"commitAuthor": "Keith Donald",
					"commitDateOld": "2009-09-16, 12:24 PM",
					"commitNameOld": "1c6965132f05ab9d127157d637728bddce5d0b39",
					"commitAuthorOld": "Keith Donald",
					"daysBetweenCommits": 1,
					"commitsBetweenForRepo": 8,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,37 +1,39 @@\n-\tprivate Converter getConverter(Map<Class, Object> converters, Class<?> targetType) {\n-\t\tif (targetType.isInterface()) {\n+\tprotected GenericConverter getConverter(Class<?> sourceType, Class<?> targetType) {\n+\t\tif (sourceType.isInterface()) {\n \t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n-\t\t\tclassQueue.addFirst(targetType);\n+\t\t\tclassQueue.addFirst(sourceType);\n \t\t\twhile (!classQueue.isEmpty()) {\n \t\t\t\tClass currentClass = classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n+\t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n+\t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n \t\t\t\tfor (Class ifc : interfaces) {\n \t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n-\t\t\treturn getConverter(converters, Object.class, targetType);\n-\t\t}\n-\t\telse {\n+\t\t\tMap<Class, GenericConverter> objectConverters = getConvertersForSource(Object.class);\n+\t\t\treturn getConverter(objectConverters, targetType);\n+\t\t} else {\n \t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n-\t\t\tclassQueue.addFirst(targetType);\n+\t\t\tclassQueue.addFirst(sourceType);\n \t\t\twhile (!classQueue.isEmpty()) {\n \t\t\t\tClass currentClass = classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n+\t\t\t\tMap<Class, GenericConverter> converters = getConvertersForSource(currentClass);\n+\t\t\t\tGenericConverter converter = getConverter(converters, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tif (currentClass.getSuperclass() != null) {\n \t\t\t\t\tclassQueue.addFirst(currentClass.getSuperclass());\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n \t\t\t\tfor (Class ifc : interfaces) {\n \t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn null;\n-\t\t}\t\t\n+\t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"45a0cadf8e7fc5cc082c11ef03f77dc017af64c4": {
			"type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
			"commitMessage": "revised core conversion package for BeanWrapper/BeanFactory integration\n",
			"commitDate": "2009-08-08, 5:46 PM",
			"commitName": "45a0cadf8e7fc5cc082c11ef03f77dc017af64c4",
			"commitAuthor": "Juergen Hoeller",
			"subchanges": [
				{
					"type": "Yfilerename",
					"commitMessage": "revised core conversion package for BeanWrapper/BeanFactory integration\n",
					"commitDate": "2009-08-08, 5:46 PM",
					"commitName": "45a0cadf8e7fc5cc082c11ef03f77dc017af64c4",
					"commitAuthor": "Juergen Hoeller",
					"commitDateOld": "2009-08-08, 1:37 PM",
					"commitNameOld": "e9823b57b4ff5a8a0b82e56b5720a96b5e5bbbd3",
					"commitAuthorOld": "Juergen Hoeller",
					"daysBetweenCommits": 0.17,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,36 +1,37 @@\n-\tprivate Converter getConverter(Map converters, Class targetType) {\n+\tprivate Converter getConverter(Map<Class, Object> converters, Class<?> targetType) {\n \t\tif (targetType.isInterface()) {\n-\t\t\tLinkedList classQueue = new LinkedList();\n+\t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n \t\t\tclassQueue.addFirst(targetType);\n \t\t\twhile (!classQueue.isEmpty()) {\n-\t\t\t\tClass currentClass = (Class) classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverterImpl(converters, currentClass, targetType);\n+\t\t\t\tClass currentClass = classQueue.removeLast();\n+\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n-\t\t\t\tfor (int i = 0; i < interfaces.length; i++) {\n-\t\t\t\t\tclassQueue.addFirst(interfaces[i]);\n+\t\t\t\tfor (Class ifc : interfaces) {\n+\t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n-\t\t\treturn getConverterImpl(converters, Object.class, targetType);\n-\t\t} else {\n-\t\t\tLinkedList classQueue = new LinkedList();\n+\t\t\treturn getConverter(converters, Object.class, targetType);\n+\t\t}\n+\t\telse {\n+\t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n \t\t\tclassQueue.addFirst(targetType);\n \t\t\twhile (!classQueue.isEmpty()) {\n-\t\t\t\tClass currentClass = (Class) classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverterImpl(converters, currentClass, targetType);\n+\t\t\t\tClass currentClass = classQueue.removeLast();\n+\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tif (currentClass.getSuperclass() != null) {\n \t\t\t\t\tclassQueue.addFirst(currentClass.getSuperclass());\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n-\t\t\t\tfor (int i = 0; i < interfaces.length; i++) {\n-\t\t\t\t\tclassQueue.addFirst(interfaces[i]);\n+\t\t\t\tfor (Class ifc : interfaces) {\n+\t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn null;\n \t\t}\t\t\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericTypeConverter.java",
						"newPath": "org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "revised core conversion package for BeanWrapper/BeanFactory integration\n",
					"commitDate": "2009-08-08, 5:46 PM",
					"commitName": "45a0cadf8e7fc5cc082c11ef03f77dc017af64c4",
					"commitAuthor": "Juergen Hoeller",
					"commitDateOld": "2009-08-08, 1:37 PM",
					"commitNameOld": "e9823b57b4ff5a8a0b82e56b5720a96b5e5bbbd3",
					"commitAuthorOld": "Juergen Hoeller",
					"daysBetweenCommits": 0.17,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,36 +1,37 @@\n-\tprivate Converter getConverter(Map converters, Class targetType) {\n+\tprivate Converter getConverter(Map<Class, Object> converters, Class<?> targetType) {\n \t\tif (targetType.isInterface()) {\n-\t\t\tLinkedList classQueue = new LinkedList();\n+\t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n \t\t\tclassQueue.addFirst(targetType);\n \t\t\twhile (!classQueue.isEmpty()) {\n-\t\t\t\tClass currentClass = (Class) classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverterImpl(converters, currentClass, targetType);\n+\t\t\t\tClass currentClass = classQueue.removeLast();\n+\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n-\t\t\t\tfor (int i = 0; i < interfaces.length; i++) {\n-\t\t\t\t\tclassQueue.addFirst(interfaces[i]);\n+\t\t\t\tfor (Class ifc : interfaces) {\n+\t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n-\t\t\treturn getConverterImpl(converters, Object.class, targetType);\n-\t\t} else {\n-\t\t\tLinkedList classQueue = new LinkedList();\n+\t\t\treturn getConverter(converters, Object.class, targetType);\n+\t\t}\n+\t\telse {\n+\t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n \t\t\tclassQueue.addFirst(targetType);\n \t\t\twhile (!classQueue.isEmpty()) {\n-\t\t\t\tClass currentClass = (Class) classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverterImpl(converters, currentClass, targetType);\n+\t\t\t\tClass currentClass = classQueue.removeLast();\n+\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tif (currentClass.getSuperclass() != null) {\n \t\t\t\t\tclassQueue.addFirst(currentClass.getSuperclass());\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n-\t\t\t\tfor (int i = 0; i < interfaces.length; i++) {\n-\t\t\t\t\tclassQueue.addFirst(interfaces[i]);\n+\t\t\t\tfor (Class ifc : interfaces) {\n+\t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn null;\n \t\t}\t\t\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				},
				{
					"type": "Yparameterchange",
					"commitMessage": "revised core conversion package for BeanWrapper/BeanFactory integration\n",
					"commitDate": "2009-08-08, 5:46 PM",
					"commitName": "45a0cadf8e7fc5cc082c11ef03f77dc017af64c4",
					"commitAuthor": "Juergen Hoeller",
					"commitDateOld": "2009-08-08, 1:37 PM",
					"commitNameOld": "e9823b57b4ff5a8a0b82e56b5720a96b5e5bbbd3",
					"commitAuthorOld": "Juergen Hoeller",
					"daysBetweenCommits": 0.17,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,36 +1,37 @@\n-\tprivate Converter getConverter(Map converters, Class targetType) {\n+\tprivate Converter getConverter(Map<Class, Object> converters, Class<?> targetType) {\n \t\tif (targetType.isInterface()) {\n-\t\t\tLinkedList classQueue = new LinkedList();\n+\t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n \t\t\tclassQueue.addFirst(targetType);\n \t\t\twhile (!classQueue.isEmpty()) {\n-\t\t\t\tClass currentClass = (Class) classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverterImpl(converters, currentClass, targetType);\n+\t\t\t\tClass currentClass = classQueue.removeLast();\n+\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n-\t\t\t\tfor (int i = 0; i < interfaces.length; i++) {\n-\t\t\t\t\tclassQueue.addFirst(interfaces[i]);\n+\t\t\t\tfor (Class ifc : interfaces) {\n+\t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n-\t\t\treturn getConverterImpl(converters, Object.class, targetType);\n-\t\t} else {\n-\t\t\tLinkedList classQueue = new LinkedList();\n+\t\t\treturn getConverter(converters, Object.class, targetType);\n+\t\t}\n+\t\telse {\n+\t\t\tLinkedList<Class> classQueue = new LinkedList<Class>();\n \t\t\tclassQueue.addFirst(targetType);\n \t\t\twhile (!classQueue.isEmpty()) {\n-\t\t\t\tClass currentClass = (Class) classQueue.removeLast();\n-\t\t\t\tConverter converter = getConverterImpl(converters, currentClass, targetType);\n+\t\t\t\tClass currentClass = classQueue.removeLast();\n+\t\t\t\tConverter converter = getConverter(converters, currentClass, targetType);\n \t\t\t\tif (converter != null) {\n \t\t\t\t\treturn converter;\n \t\t\t\t}\n \t\t\t\tif (currentClass.getSuperclass() != null) {\n \t\t\t\t\tclassQueue.addFirst(currentClass.getSuperclass());\n \t\t\t\t}\n \t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n-\t\t\t\tfor (int i = 0; i < interfaces.length; i++) {\n-\t\t\t\t\tclassQueue.addFirst(interfaces[i]);\n+\t\t\t\tfor (Class ifc : interfaces) {\n+\t\t\t\t\tclassQueue.addFirst(ifc);\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn null;\n \t\t}\t\t\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[converters-Map, targetType-Class]",
						"newValue": "[converters-Map<Class,Object>, targetType-Class<?>]"
					}
				}
			]
		},
		"b33be88c9da6182aa2141b0ba773d5a2b4cd59bf": {
			"type": "Ybodychange",
			"commitMessage": "tests passing again\n",
			"commitDate": "2009-05-15, 2:31 PM",
			"commitName": "b33be88c9da6182aa2141b0ba773d5a2b4cd59bf",
			"commitAuthor": "Keith Donald",
			"commitDateOld": "2009-05-15, 1:32 PM",
			"commitNameOld": "46c9a003eb1e0230aef78f2433203b75bc9934bb",
			"commitAuthorOld": "Keith Donald",
			"daysBetweenCommits": 0.04,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,3 +1,36 @@\n \tprivate Converter getConverter(Map converters, Class targetType) {\n-\t\treturn (Converter) converters.get(targetType);\n+\t\tif (targetType.isInterface()) {\n+\t\t\tLinkedList classQueue = new LinkedList();\n+\t\t\tclassQueue.addFirst(targetType);\n+\t\t\twhile (!classQueue.isEmpty()) {\n+\t\t\t\tClass currentClass = (Class) classQueue.removeLast();\n+\t\t\t\tConverter converter = getConverterImpl(converters, currentClass, targetType);\n+\t\t\t\tif (converter != null) {\n+\t\t\t\t\treturn converter;\n+\t\t\t\t}\n+\t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n+\t\t\t\tfor (int i = 0; i < interfaces.length; i++) {\n+\t\t\t\t\tclassQueue.addFirst(interfaces[i]);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn getConverterImpl(converters, Object.class, targetType);\n+\t\t} else {\n+\t\t\tLinkedList classQueue = new LinkedList();\n+\t\t\tclassQueue.addFirst(targetType);\n+\t\t\twhile (!classQueue.isEmpty()) {\n+\t\t\t\tClass currentClass = (Class) classQueue.removeLast();\n+\t\t\t\tConverter converter = getConverterImpl(converters, currentClass, targetType);\n+\t\t\t\tif (converter != null) {\n+\t\t\t\t\treturn converter;\n+\t\t\t\t}\n+\t\t\t\tif (currentClass.getSuperclass() != null) {\n+\t\t\t\t\tclassQueue.addFirst(currentClass.getSuperclass());\n+\t\t\t\t}\n+\t\t\t\tClass[] interfaces = currentClass.getInterfaces();\n+\t\t\t\tfor (int i = 0; i < interfaces.length; i++) {\n+\t\t\t\t\tclassQueue.addFirst(interfaces[i]);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\t\t\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"6f74369cb34910de299a84ad7272e4fe3f527d4e": {
			"type": "Yfilerename",
			"commitMessage": "polish\n",
			"commitDate": "2009-05-15, 10:28 AM",
			"commitName": "6f74369cb34910de299a84ad7272e4fe3f527d4e",
			"commitAuthor": "Keith Donald",
			"commitDateOld": "2009-05-15, 10:01 AM",
			"commitNameOld": "acf17381b9d37de98619f54ea1e150e76d6e15aa",
			"commitAuthorOld": "Ben Hale",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java",
				"newPath": "org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericTypeConverter.java"
			}
		},
		"9a261470ade2f556b4c36c7feca69c50216ebfed": {
			"type": "Yfilerename",
			"commitMessage": "converter system refactoring from community input\n",
			"commitDate": "2009-05-14, 2:36 PM",
			"commitName": "9a261470ade2f556b4c36c7feca69c50216ebfed",
			"commitAuthor": "Keith Donald",
			"commitDateOld": "2009-05-13, 1:52 PM",
			"commitNameOld": "a1793457b212bae29cf521661d26cc3155e30d94",
			"commitAuthorOld": "Juergen Hoeller",
			"daysBetweenCommits": 1.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "org.springframework.core/src/main/java/org/springframework/core/convert/service/GenericConversionService.java",
				"newPath": "org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java"
			}
		},
		"ebb203a25155f822e0eec8719b7f2327fcd664c0": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "removed custom converter for m3 to add back in rc1; also ensure type descriptor get type always returns wrapper types if primitive\n",
			"commitDate": "2009-04-10, 8:57 AM",
			"commitName": "ebb203a25155f822e0eec8719b7f2327fcd664c0",
			"commitAuthor": "Keith Donald",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "removed custom converter for m3 to add back in rc1; also ensure type descriptor get type always returns wrapper types if primitive\n",
					"commitDate": "2009-04-10, 8:57 AM",
					"commitName": "ebb203a25155f822e0eec8719b7f2327fcd664c0",
					"commitAuthor": "Keith Donald",
					"commitDateOld": "2009-04-08, 3:10 PM",
					"commitNameOld": "9ce71f67ffe94aa46542c8d32e04efbaae96eb87",
					"commitAuthorOld": "Keith Donald",
					"daysBetweenCommits": 1.74,
					"commitsBetweenForRepo": 21,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,3 +1,3 @@\n-\tprivate Converter getConverter(Map converters, Class targetClass) {\n-\t\treturn (Converter) converters.get(targetClass);\n+\tprivate Converter getConverter(Map converters, Class targetType) {\n+\t\treturn (Converter) converters.get(targetType);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[converters-Map, targetClass-Class]",
						"newValue": "[converters-Map, targetType-Class]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "removed custom converter for m3 to add back in rc1; also ensure type descriptor get type always returns wrapper types if primitive\n",
					"commitDate": "2009-04-10, 8:57 AM",
					"commitName": "ebb203a25155f822e0eec8719b7f2327fcd664c0",
					"commitAuthor": "Keith Donald",
					"commitDateOld": "2009-04-08, 3:10 PM",
					"commitNameOld": "9ce71f67ffe94aa46542c8d32e04efbaae96eb87",
					"commitAuthorOld": "Keith Donald",
					"daysBetweenCommits": 1.74,
					"commitsBetweenForRepo": 21,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,3 +1,3 @@\n-\tprivate Converter getConverter(Map converters, Class targetClass) {\n-\t\treturn (Converter) converters.get(targetClass);\n+\tprivate Converter getConverter(Map converters, Class targetType) {\n+\t\treturn (Converter) converters.get(targetType);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"0ef0ff60f0b08b521ddc8fc093b38d7c9eb98326": {
			"type": "Yintroduced",
			"commitMessage": "super converter implementation\n",
			"commitDate": "2009-03-08, 12:47 AM",
			"commitName": "0ef0ff60f0b08b521ddc8fc093b38d7c9eb98326",
			"commitAuthor": "Keith Donald",
			"diff": "@@ -0,0 +1,3 @@\n+\tprivate Converter getConverter(Map converters, Class targetClass) {\n+\t\treturn (Converter) converters.get(targetClass);\n+\t}\n\\ No newline at end of file\n"
		}
	},
	"sha": "b325c74216fd9564a36602158fa1269e2e832874"
}