{
	"repo": "https://github.com/checkstyle/checkstyle.git",
	"file": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
	"method": {
		"longName": "Checker::process(List<File> files)",
		"startLine": 206,
		"methodName": "process",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "public"
	},
	"history": {
		"327c0bc843612486ab4ded32a2f01038e1271fd0": {
			"type": "Ybodychange",
			"commitMessage": "Issue #3254: UT to verify all property types and values in XDocs",
			"commitDate": "2018-01-03, 6:30 PM",
			"commitName": "327c0bc843612486ab4ded32a2f01038e1271fd0",
			"commitAuthor": "rnveach",
			"commitDateOld": "2018-01-02, 2:24 PM",
			"commitNameOld": "dabb75d43c7e02317565dde4c5e60f380d3b16b8",
			"commitAuthorOld": "Roman Ivanov",
			"daysBetweenCommits": 1.17,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n     public int process(List<File> files) throws CheckstyleException {\n-        if (cache != null) {\n-            cache.putExternalResources(getExternalResourceLocations());\n+        if (cacheFile != null) {\n+            cacheFile.putExternalResources(getExternalResourceLocations());\n         }\n \n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         processFiles(files);\n \n         // Finish up\n         // It may also log!!!\n         fileSetChecks.forEach(FileSetCheck::finishProcessing);\n \n         // It may also log!!!\n         fileSetChecks.forEach(FileSetCheck::destroy);\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"de022d2434e58dd633fd50a7f9bb50565a8767b5": {
			"type": "Ybodychange",
			"commitMessage": "Issue #3233: Resolve IntelijIdea inspection violations for java8 migration (#3434)\n\n",
			"commitDate": "2016-09-08, 6:30 AM",
			"commitName": "de022d2434e58dd633fd50a7f9bb50565a8767b5",
			"commitAuthor": "Mariia Mykhailova",
			"commitDateOld": "2016-05-27, 7:42 AM",
			"commitNameOld": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
			"commitAuthorOld": "rnveach",
			"daysBetweenCommits": 103.95,
			"commitsBetweenForRepo": 185,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,24 @@\n     public int process(List<File> files) throws CheckstyleException {\n         if (cache != null) {\n             cache.putExternalResources(getExternalResourceLocations());\n         }\n \n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         processFiles(files);\n \n         // Finish up\n-        for (final FileSetCheck fsc : fileSetChecks) {\n-            // It may also log!!!\n-            fsc.finishProcessing();\n-        }\n+        // It may also log!!!\n+        fileSetChecks.forEach(FileSetCheck::finishProcessing);\n \n-        for (final FileSetCheck fsc : fileSetChecks) {\n-            // It may also log!!!\n-            fsc.destroy();\n-        }\n+        // It may also log!!!\n+        fileSetChecks.forEach(FileSetCheck::destroy);\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ecbeaa6e1df7cb021745e111b04395b9fbd509c7": {
			"type": "Ybodychange",
			"commitMessage": "Issue #407: Fix cache usage in presence of modules which use external resources for configuration (#3092)",
			"commitDate": "2016-05-16, 2:53 PM",
			"commitName": "ecbeaa6e1df7cb021745e111b04395b9fbd509c7",
			"commitAuthor": "Andrei Selkin",
			"commitDateOld": "2016-05-07, 10:41 AM",
			"commitNameOld": "871b20e88b5bfedb324f3e1996b37d0c68eb727b",
			"commitAuthorOld": "rnveach",
			"daysBetweenCommits": 9.17,
			"commitsBetweenForRepo": 17,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,28 @@\n     public int process(List<File> files) throws CheckstyleException {\n+        if (cache != null) {\n+            cache.putExternalResources(getExternalResourceLocations());\n+        }\n+\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         processFiles(files);\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.finishProcessing();\n         }\n \n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d46c2cf0e9df06bb5f424dbd7645574f082f7609": {
			"type": "Ybodychange",
			"commitMessage": "Issue #569: Move TreeWalker cache to Checker\n",
			"commitDate": "2016-02-09, 10:50 AM",
			"commitName": "d46c2cf0e9df06bb5f424dbd7645574f082f7609",
			"commitAuthor": "Andrei Selkin",
			"commitDateOld": "2016-01-04, 5:25 PM",
			"commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
			"commitAuthorOld": "Roman Ivanov",
			"daysBetweenCommits": 35.73,
			"commitsBetweenForRepo": 80,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,55 +1,24 @@\n     public int process(List<File> files) throws CheckstyleException {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n-        // Process each file\n-        for (final File file : files) {\n-            try {\n-                if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n-                    continue;\n-                }\n-                final String fileName = file.getAbsolutePath();\n-                fireFileStarted(fileName);\n-                final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n-                try {\n-                    final FileText theText = new FileText(file.getAbsoluteFile(),\n-                            charset);\n-                    for (final FileSetCheck fsc : fileSetChecks) {\n-                        fileMessages.addAll(fsc.process(file, theText));\n-                    }\n-                }\n-                catch (final IOException ioe) {\n-                    LOG.debug(\"IOException occurred.\", ioe);\n-                    fileMessages.add(new LocalizedMessage(0,\n-                            Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",\n-                            new String[] {ioe.getMessage()}, null, getClass(),\n-                            null));\n-                }\n-                fireErrors(fileName, fileMessages);\n-                fireFileFinished(fileName);\n-            }\n-            catch (Exception ex) {\n-                // We need to catch all exception to put a reason failure(file name) in exception\n-                throw new CheckstyleException(\"Exception was thrown while processing \"\n-                        + file.getPath(), ex);\n-            }\n-        }\n+        processFiles(files);\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.finishProcessing();\n         }\n \n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f020066f8bdfb378df36904af3df8b5bc48858fd": {
			"type": "Ybodychange",
			"commitMessage": "Issue #2109: CLI should print a file name where exception is happen\n",
			"commitDate": "2015-11-01, 6:52 AM",
			"commitName": "f020066f8bdfb378df36904af3df8b5bc48858fd",
			"commitAuthor": "Roman Ivanov",
			"commitDateOld": "2015-10-16, 5:35 PM",
			"commitNameOld": "ce196814d857a4244a80c51d5151cc35e90b6749",
			"commitAuthorOld": "Michal Kordas",
			"daysBetweenCommits": 15.6,
			"commitsBetweenForRepo": 100,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,48 +1,55 @@\n     public int process(List<File> files) throws CheckstyleException {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n         for (final File file : files) {\n-            if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n-                continue;\n-            }\n-            final String fileName = file.getAbsolutePath();\n-            fireFileStarted(fileName);\n-            final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n-                final FileText theText = new FileText(file.getAbsoluteFile(),\n-                        charset);\n-                for (final FileSetCheck fsc : fileSetChecks) {\n-                    fileMessages.addAll(fsc.process(file, theText));\n+                if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n+                    continue;\n                 }\n+                final String fileName = file.getAbsolutePath();\n+                fireFileStarted(fileName);\n+                final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n+                try {\n+                    final FileText theText = new FileText(file.getAbsoluteFile(),\n+                            charset);\n+                    for (final FileSetCheck fsc : fileSetChecks) {\n+                        fileMessages.addAll(fsc.process(file, theText));\n+                    }\n+                }\n+                catch (final IOException ioe) {\n+                    LOG.debug(\"IOException occurred.\", ioe);\n+                    fileMessages.add(new LocalizedMessage(0,\n+                            Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",\n+                            new String[] {ioe.getMessage()}, null, getClass(),\n+                            null));\n+                }\n+                fireErrors(fileName, fileMessages);\n+                fireFileFinished(fileName);\n             }\n-            catch (final IOException ioe) {\n-                LOG.debug(\"IOException occurred.\", ioe);\n-                fileMessages.add(new LocalizedMessage(0,\n-                        Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",\n-                        new String[] {ioe.getMessage()}, null, getClass(),\n-                        null));\n+            catch (Exception ex) {\n+                // We need to catch all exception to put a reason failure(file name) in exception\n+                throw new CheckstyleException(\"Exception was thrown while processing \"\n+                        + file.getPath(), ex);\n             }\n-            fireErrors(fileName, fileMessages);\n-            fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.finishProcessing();\n         }\n \n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"2b4a02d2c8a498a8a1ee38e9396426209fa65fad": {
			"type": "Ybodychange",
			"commitMessage": "Issue #2080: Fix typos in code\n\nFixes `SpellCheckingInspection` inspection violations introduced in recent commits.\n\nDescription:\n>Spellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
			"commitDate": "2015-09-03, 7:06 PM",
			"commitName": "2b4a02d2c8a498a8a1ee38e9396426209fa65fad",
			"commitAuthor": "Michal Kordas",
			"commitDateOld": "2015-08-31, 1:58 PM",
			"commitNameOld": "49a0ee81710e0c43ed06a01f1d64ac7f5598a934",
			"commitAuthorOld": "Baratali Izmailov",
			"daysBetweenCommits": 3.21,
			"commitsBetweenForRepo": 61,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,48 +1,48 @@\n     public int process(List<File> files) throws CheckstyleException {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n         for (final File file : files) {\n             if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n                 continue;\n             }\n             final String fileName = file.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(file.getAbsoluteFile(),\n                         charset);\n                 for (final FileSetCheck fsc : fileSetChecks) {\n                     fileMessages.addAll(fsc.process(file, theText));\n                 }\n             }\n             catch (final IOException ioe) {\n-                LOG.debug(\"IOException occured.\", ioe);\n+                LOG.debug(\"IOException occurred.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.finishProcessing();\n         }\n \n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"5922d5a6730d7582d7d66121eb911ef9426f9e24": {
			"type": "Yexceptionschange",
			"commitMessage": "Issue #1566: IllegalCatch violations fixed for TreeWalker\n",
			"commitDate": "2015-08-30, 11:06 PM",
			"commitName": "5922d5a6730d7582d7d66121eb911ef9426f9e24",
			"commitAuthor": "Ruslan Diachenko",
			"commitDateOld": "2015-08-30, 11:02 PM",
			"commitNameOld": "d740f2e1cdb05f20a48bf7d5dcebdcd0faae6ddd",
			"commitAuthorOld": "Ruslan Diachenko",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,48 +1,48 @@\n-    public int process(List<File> files) {\n+    public int process(List<File> files) throws CheckstyleException {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n         for (final File file : files) {\n             if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n                 continue;\n             }\n             final String fileName = file.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(file.getAbsoluteFile(),\n                         charset);\n                 for (final FileSetCheck fsc : fileSetChecks) {\n                     fileMessages.addAll(fsc.process(file, theText));\n                 }\n             }\n             catch (final IOException ioe) {\n                 LOG.debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.finishProcessing();\n         }\n \n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[]",
				"newValue": "[CheckstyleException]"
			}
		},
		"46a52f84c014e4d25379f429f11ed3de11fe8ae7": {
			"type": "Ybodychange",
			"commitMessage": "Issue #1555: Rename methods returning boolean to use question word\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n>Reports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
			"commitDate": "2015-08-28, 11:50 PM",
			"commitName": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
			"commitAuthor": "Michal Kordas",
			"commitDateOld": "2015-08-27, 11:30 PM",
			"commitNameOld": "95f8b08af84a2287dbd93c9cc740b6732e9e43b1",
			"commitAuthorOld": "Michal Kordas",
			"daysBetweenCommits": 1.01,
			"commitsBetweenForRepo": 49,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,48 +1,48 @@\n     public int process(List<File> files) {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n         for (final File file : files) {\n-            if (!CommonUtils.fileExtensionMatches(file, fileExtensions)) {\n+            if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n                 continue;\n             }\n             final String fileName = file.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(file.getAbsoluteFile(),\n                         charset);\n                 for (final FileSetCheck fsc : fileSetChecks) {\n                     fileMessages.addAll(fsc.process(file, theText));\n                 }\n             }\n             catch (final IOException ioe) {\n                 LOG.debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.finishProcessing();\n         }\n \n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
			"type": "Ybodychange",
			"commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
			"commitDate": "2015-08-27, 6:17 AM",
			"commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
			"commitAuthor": "Ilja Dubinin",
			"commitDateOld": "2015-08-27, 6:17 AM",
			"commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
			"commitAuthorOld": "Ilja Dubinin",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,48 +1,48 @@\n     public int process(List<File> files) {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n         for (final File file : files) {\n-            if (!Utils.fileExtensionMatches(file, fileExtensions)) {\n+            if (!CommonUtils.fileExtensionMatches(file, fileExtensions)) {\n                 continue;\n             }\n             final String fileName = file.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(file.getAbsoluteFile(),\n                         charset);\n                 for (final FileSetCheck fsc : fileSetChecks) {\n                     fileMessages.addAll(fsc.process(file, theText));\n                 }\n             }\n             catch (final IOException ioe) {\n                 LOG.debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.finishProcessing();\n         }\n \n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": {
			"type": "Ybodychange",
			"commitMessage": "Remove unnecessary this keyword. #1555\n\nFixes `UnnecessaryThis` inspection violations.\n\nDescription:\n>Reports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.\n For example:\n ```\n this.a = 3;\n ```\n",
			"commitDate": "2015-08-09, 8:41 AM",
			"commitName": "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
			"commitAuthor": "Michal Kordas",
			"commitDateOld": "2015-08-08, 8:28 PM",
			"commitNameOld": "f7f377f5065c11d31b29fb8df19a14220ffb8500",
			"commitAuthorOld": "Michal Kordas",
			"daysBetweenCommits": 0.51,
			"commitsBetweenForRepo": 22,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,48 +1,48 @@\n     public int process(List<File> files) {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n         for (final File file : files) {\n             if (!Utils.fileExtensionMatches(file, fileExtensions)) {\n                 continue;\n             }\n             final String fileName = file.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(file.getAbsoluteFile(),\n                         charset);\n                 for (final FileSetCheck fsc : fileSetChecks) {\n                     fileMessages.addAll(fsc.process(file, theText));\n                 }\n             }\n             catch (final IOException ioe) {\n                 LOG.debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",\n-                        new String[] {ioe.getMessage()}, null, this.getClass(),\n+                        new String[] {ioe.getMessage()}, null, getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.finishProcessing();\n         }\n \n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f1e80e4ecae727087ca135dfd02f72e2d6213efb": {
			"type": "Ybodychange",
			"commitMessage": "Rename variables with 'standard' names of unexpected types. #1555\n\nFixes `StandardVariableNames` inspection violations.\n\nDescription:\n>Reports on any variables with 'standard' names which are of unexpected types. Such names may be confusing. Standard names and types are as follows:\n* i, j, k, m, n - int\n* f - float\n* d - double\n* b - byte\n* c, ch - char\n* l - long\n* s, str - String\n",
			"commitDate": "2015-08-07, 10:38 PM",
			"commitName": "f1e80e4ecae727087ca135dfd02f72e2d6213efb",
			"commitAuthor": "Michal Kordas",
			"commitDateOld": "2015-08-05, 8:06 AM",
			"commitNameOld": "ead1a5e5dca96e2ad15426696f48a9c244385aff",
			"commitAuthorOld": "Roman Ivanov",
			"daysBetweenCommits": 2.61,
			"commitsBetweenForRepo": 21,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,48 +1,48 @@\n     public int process(List<File> files) {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n-        for (final File f : files) {\n-            if (!Utils.fileExtensionMatches(f, fileExtensions)) {\n+        for (final File file : files) {\n+            if (!Utils.fileExtensionMatches(file, fileExtensions)) {\n                 continue;\n             }\n-            final String fileName = f.getAbsolutePath();\n+            final String fileName = file.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n-                final FileText theText = new FileText(f.getAbsoluteFile(),\n+                final FileText theText = new FileText(file.getAbsoluteFile(),\n                         charset);\n                 for (final FileSetCheck fsc : fileSetChecks) {\n-                    fileMessages.addAll(fsc.process(f, theText));\n+                    fileMessages.addAll(fsc.process(file, theText));\n                 }\n             }\n             catch (final IOException ioe) {\n                 LOG.debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.finishProcessing();\n         }\n \n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ead1a5e5dca96e2ad15426696f48a9c244385aff": {
			"type": "Ybodychange",
			"commitMessage": "100% UTs coverage for Checker (no way to reproduce/mock IOException). #1294\n",
			"commitDate": "2015-08-05, 8:06 AM",
			"commitName": "ead1a5e5dca96e2ad15426696f48a9c244385aff",
			"commitAuthor": "Roman Ivanov",
			"commitDateOld": "2015-07-22, 11:58 PM",
			"commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
			"commitAuthorOld": "Aleksandr Ivanov",
			"daysBetweenCommits": 13.34,
			"commitsBetweenForRepo": 143,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,54 +1,48 @@\n     public int process(List<File> files) {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n         for (final File f : files) {\n             if (!Utils.fileExtensionMatches(f, fileExtensions)) {\n                 continue;\n             }\n             final String fileName = f.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(f.getAbsoluteFile(),\n                         charset);\n                 for (final FileSetCheck fsc : fileSetChecks) {\n                     fileMessages.addAll(fsc.process(f, theText));\n                 }\n             }\n-            catch (final FileNotFoundException fnfe) {\n-                LOG.debug(\"FileNotFoundException occured.\", fnfe);\n-                fileMessages.add(new LocalizedMessage(0,\n-                        Definitions.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n-                        null, this.getClass(), null));\n-            }\n             catch (final IOException ioe) {\n                 LOG.debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.finishProcessing();\n         }\n \n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f374e2e7a0b0fe2df21ed85aef77a91630b1dd66": {
			"type": "Ybodychange",
			"commitMessage": "Fix AvoidStaticImport check violations in codebase, issue #979\n",
			"commitDate": "2015-04-26, 10:13 AM",
			"commitName": "f374e2e7a0b0fe2df21ed85aef77a91630b1dd66",
			"commitAuthor": "Michal Kordas",
			"commitDateOld": "2015-04-24, 3:09 PM",
			"commitNameOld": "b29ca6b5f676e92243186abdba84a7501baea1bd",
			"commitAuthorOld": "Michal Kordas",
			"daysBetweenCommits": 1.79,
			"commitsBetweenForRepo": 8,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,55 +1,55 @@\n     public int process(List<File> files)\n     {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n         for (final File f : files) {\n-            if (!fileExtensionMatches(f, fileExtensions)) {\n+            if (!Utils.fileExtensionMatches(f, fileExtensions)) {\n                 continue;\n             }\n             final String fileName = f.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(f.getAbsoluteFile(),\n                         charset);\n                 for (final FileSetCheck fsc : fileSetChecks) {\n                     fileMessages.addAll(fsc.process(f, theText));\n                 }\n             }\n             catch (final FileNotFoundException fnfe) {\n                 LOG.debug(\"FileNotFoundException occured.\", fnfe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Definitions.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n                         null, this.getClass(), null));\n             }\n             catch (final IOException ioe) {\n                 LOG.debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.finishProcessing();\n         }\n \n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b29ca6b5f676e92243186abdba84a7501baea1bd": {
			"type": "Ybodychange",
			"commitMessage": "Fix and suppress PMD violations from ShortClassName rule, issue #982\n",
			"commitDate": "2015-04-24, 3:09 PM",
			"commitName": "b29ca6b5f676e92243186abdba84a7501baea1bd",
			"commitAuthor": "Michal Kordas",
			"commitDateOld": "2015-04-23, 11:38 AM",
			"commitNameOld": "dd6b080a16e0933b3d19305f84ba01c8893839f3",
			"commitAuthorOld": "Roman Ivanov",
			"daysBetweenCommits": 1.15,
			"commitsBetweenForRepo": 22,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,55 +1,55 @@\n     public int process(List<File> files)\n     {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n         for (final File f : files) {\n             if (!fileExtensionMatches(f, fileExtensions)) {\n                 continue;\n             }\n             final String fileName = f.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(f.getAbsoluteFile(),\n                         charset);\n                 for (final FileSetCheck fsc : fileSetChecks) {\n                     fileMessages.addAll(fsc.process(f, theText));\n                 }\n             }\n             catch (final FileNotFoundException fnfe) {\n                 LOG.debug(\"FileNotFoundException occured.\", fnfe);\n                 fileMessages.add(new LocalizedMessage(0,\n-                        Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n+                        Definitions.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n                         null, this.getClass(), null));\n             }\n             catch (final IOException ioe) {\n                 LOG.debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n-                        Defn.CHECKSTYLE_BUNDLE, \"general.exception\",\n+                        Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.finishProcessing();\n         }\n \n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1": {
			"type": "Ybodychange",
			"commitMessage": "Fix PMD violations from 'logging-jakarta' ruleset, issue #871\n",
			"commitDate": "2015-04-13, 3:43 PM",
			"commitName": "ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1",
			"commitAuthor": "Michal Kordas",
			"commitDateOld": "2015-03-31, 12:25 PM",
			"commitNameOld": "3a20dbe8edafe0cca300b7b9dfa48effa9a36a06",
			"commitAuthorOld": "Michal Kordas",
			"daysBetweenCommits": 13.14,
			"commitsBetweenForRepo": 35,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,56 +1,55 @@\n     public int process(List<File> files)\n     {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n         for (final File f : files) {\n             if (!fileExtensionMatches(f, fileExtensions)) {\n                 continue;\n             }\n             final String fileName = f.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(f.getAbsoluteFile(),\n                         charset);\n                 for (final FileSetCheck fsc : fileSetChecks) {\n                     fileMessages.addAll(fsc.process(f, theText));\n                 }\n             }\n             catch (final FileNotFoundException fnfe) {\n-                Utils.getExceptionLogger().debug(\n-                        \"FileNotFoundException occured.\", fnfe);\n+                LOG.debug(\"FileNotFoundException occured.\", fnfe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n                         null, this.getClass(), null));\n             }\n             catch (final IOException ioe) {\n-                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n+                LOG.debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.finishProcessing();\n         }\n \n         for (final FileSetCheck fsc : fileSetChecks) {\n             // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d347f55756052db6b23ae41168c44e324807c621": {
			"type": "Ybodychange",
			"commitMessage": "Issue #26 SuppressionCommentFilter does not suppress StrictDuplicateCode Warnings\n",
			"commitDate": "2015-03-18, 11:30 PM",
			"commitName": "d347f55756052db6b23ae41168c44e324807c621",
			"commitAuthor": "ychulovskyy",
			"commitDateOld": "2015-03-15, 3:22 PM",
			"commitNameOld": "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
			"commitAuthorOld": "alexkravin",
			"daysBetweenCommits": 3.34,
			"commitsBetweenForRepo": 31,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,52 +1,56 @@\n     public int process(List<File> files)\n     {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n         for (final File f : files) {\n             if (!fileExtensionMatches(f, fileExtensions)) {\n                 continue;\n             }\n             final String fileName = f.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(f.getAbsoluteFile(),\n                         charset);\n                 for (final FileSetCheck fsc : fileSetChecks) {\n                     fileMessages.addAll(fsc.process(f, theText));\n                 }\n             }\n             catch (final FileNotFoundException fnfe) {\n                 Utils.getExceptionLogger().debug(\n                         \"FileNotFoundException occured.\", fnfe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n                         null, this.getClass(), null));\n             }\n             catch (final IOException ioe) {\n                 Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n-            // They may also log!!!\n+            // It may also log!!!\n             fsc.finishProcessing();\n+        }\n+\n+        for (final FileSetCheck fsc : fileSetChecks) {\n+            // It may also log!!!\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"204c073294cdca6756bcd546d6af85a797ad7d79": {
			"type": "Ybodychange",
			"commitMessage": "Added file extensions property to Checker & TreeWalker, issue #25\n",
			"commitDate": "2015-01-25, 2:30 AM",
			"commitName": "204c073294cdca6756bcd546d6af85a797ad7d79",
			"commitAuthor": "alexkravin",
			"commitDateOld": "2015-01-19, 7:38 AM",
			"commitNameOld": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
			"commitAuthorOld": "alexkravin",
			"daysBetweenCommits": 5.79,
			"commitsBetweenForRepo": 16,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,49 +1,52 @@\n     public int process(List<File> files)\n     {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : fileSetChecks) {\n             fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n         for (final File f : files) {\n+            if (!fileExtensionMatches(f, fileExtensions)) {\n+                continue;\n+            }\n             final String fileName = f.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(f.getAbsoluteFile(),\n                         charset);\n                 for (final FileSetCheck fsc : fileSetChecks) {\n                     fileMessages.addAll(fsc.process(f, theText));\n                 }\n             }\n             catch (final FileNotFoundException fnfe) {\n                 Utils.getExceptionLogger().debug(\n                         \"FileNotFoundException occured.\", fnfe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n                         null, this.getClass(), null));\n             }\n             catch (final IOException ioe) {\n                 Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : fileSetChecks) {\n             // They may also log!!!\n             fsc.finishProcessing();\n             fsc.destroy();\n         }\n \n         final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
			"commitDate": "2015-01-19, 7:38 AM",
			"commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
			"commitAuthor": "alexkravin",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
					"commitDate": "2015-01-19, 7:38 AM",
					"commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
					"commitAuthor": "alexkravin",
					"commitDateOld": "2015-01-11, 11:10 AM",
					"commitNameOld": "8ec1a1a97188c112f4af5cc00caffae2ac0cc530",
					"commitAuthorOld": "Lars Ködderitzsch",
					"daysBetweenCommits": 7.85,
					"commitsBetweenForRepo": 28,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,49 +1,49 @@\n-    public int process(List<File> aFiles)\n+    public int process(List<File> files)\n     {\n         // Prepare to start\n         fireAuditStarted();\n-        for (final FileSetCheck fsc : mFileSetChecks) {\n-            fsc.beginProcessing(mCharset);\n+        for (final FileSetCheck fsc : fileSetChecks) {\n+            fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n-        for (final File f : aFiles) {\n+        for (final File f : files) {\n             final String fileName = f.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(f.getAbsoluteFile(),\n-                        mCharset);\n-                for (final FileSetCheck fsc : mFileSetChecks) {\n+                        charset);\n+                for (final FileSetCheck fsc : fileSetChecks) {\n                     fileMessages.addAll(fsc.process(f, theText));\n                 }\n             }\n             catch (final FileNotFoundException fnfe) {\n                 Utils.getExceptionLogger().debug(\n                         \"FileNotFoundException occured.\", fnfe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n                         null, this.getClass(), null));\n             }\n             catch (final IOException ioe) {\n                 Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n-        for (final FileSetCheck fsc : mFileSetChecks) {\n+        for (final FileSetCheck fsc : fileSetChecks) {\n             // They may also log!!!\n             fsc.finishProcessing();\n             fsc.destroy();\n         }\n \n-        final int errorCount = mCounter.getCount();\n+        final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[aFiles-List<File>]",
						"newValue": "[files-List<File>]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
					"commitDate": "2015-01-19, 7:38 AM",
					"commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
					"commitAuthor": "alexkravin",
					"commitDateOld": "2015-01-11, 11:10 AM",
					"commitNameOld": "8ec1a1a97188c112f4af5cc00caffae2ac0cc530",
					"commitAuthorOld": "Lars Ködderitzsch",
					"daysBetweenCommits": 7.85,
					"commitsBetweenForRepo": 28,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,49 +1,49 @@\n-    public int process(List<File> aFiles)\n+    public int process(List<File> files)\n     {\n         // Prepare to start\n         fireAuditStarted();\n-        for (final FileSetCheck fsc : mFileSetChecks) {\n-            fsc.beginProcessing(mCharset);\n+        for (final FileSetCheck fsc : fileSetChecks) {\n+            fsc.beginProcessing(charset);\n         }\n \n         // Process each file\n-        for (final File f : aFiles) {\n+        for (final File f : files) {\n             final String fileName = f.getAbsolutePath();\n             fireFileStarted(fileName);\n             final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(f.getAbsoluteFile(),\n-                        mCharset);\n-                for (final FileSetCheck fsc : mFileSetChecks) {\n+                        charset);\n+                for (final FileSetCheck fsc : fileSetChecks) {\n                     fileMessages.addAll(fsc.process(f, theText));\n                 }\n             }\n             catch (final FileNotFoundException fnfe) {\n                 Utils.getExceptionLogger().debug(\n                         \"FileNotFoundException occured.\", fnfe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n                         null, this.getClass(), null));\n             }\n             catch (final IOException ioe) {\n                 Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n-        for (final FileSetCheck fsc : mFileSetChecks) {\n+        for (final FileSetCheck fsc : fileSetChecks) {\n             // They may also log!!!\n             fsc.finishProcessing();\n             fsc.destroy();\n         }\n \n-        final int errorCount = mCounter.getCount();\n+        final int errorCount = counter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"f1efb27670a93690577f1bae17fc9dcbd88a795d": {
			"type": "Yfilerename",
			"commitMessage": "moving to standard directory layout\n",
			"commitDate": "2014-03-04, 10:18 AM",
			"commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
			"commitAuthor": "Ivan Sopov",
			"commitDateOld": "2014-02-26, 11:35 PM",
			"commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
			"commitAuthorOld": "Andrew Gaul",
			"daysBetweenCommits": 5.45,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
				"newPath": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java"
			}
		},
		"1d614c3a7ecf8a3ede4df8a50da46e71792d0025": {
			"type": "Ybodychange",
			"commitMessage": "poartial fix for #46 - Sonarqube found problems in Checkstyle\n",
			"commitDate": "2013-12-05, 10:12 AM",
			"commitName": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
			"commitAuthor": "Ivan Sopov",
			"commitDateOld": "2013-10-04, 10:22 PM",
			"commitNameOld": "788f87df4db1368ee0563e1ba1199177618cc01f",
			"commitAuthorOld": "picomancer",
			"daysBetweenCommits": 61.54,
			"commitsBetweenForRepo": 13,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,49 +1,49 @@\n     public int process(List<File> aFiles)\n     {\n         // Prepare to start\n         fireAuditStarted();\n         for (final FileSetCheck fsc : mFileSetChecks) {\n             fsc.beginProcessing(mCharset);\n         }\n \n         // Process each file\n         for (final File f : aFiles) {\n             final String fileName = f.getAbsolutePath();\n             fireFileStarted(fileName);\n-            final TreeSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n+            final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(f.getAbsoluteFile(),\n                         mCharset);\n                 for (final FileSetCheck fsc : mFileSetChecks) {\n                     fileMessages.addAll(fsc.process(f, theText));\n                 }\n             }\n             catch (final FileNotFoundException fnfe) {\n                 Utils.getExceptionLogger().debug(\n                         \"FileNotFoundException occured.\", fnfe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n                         null, this.getClass(), null));\n             }\n             catch (final IOException ioe) {\n                 Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (final FileSetCheck fsc : mFileSetChecks) {\n             // They may also log!!!\n             fsc.finishProcessing();\n             fsc.destroy();\n         }\n \n         final int errorCount = mCounter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"e00c478dd61d9d883e41b500b780ab217582c2e7": {
			"type": "Ybodychange",
			"commitMessage": "clean up the code that was assigning to a parameter.\n",
			"commitDate": "2010-10-21, 2:42 AM",
			"commitName": "e00c478dd61d9d883e41b500b780ab217582c2e7",
			"commitAuthor": "Oliver Burn",
			"commitDateOld": "2010-09-29, 9:36 PM",
			"commitNameOld": "6f46bd4e83204417edf9605f97098bb9d34da728",
			"commitAuthorOld": "Oliver Burn",
			"daysBetweenCommits": 21.21,
			"commitsBetweenForRepo": 50,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,49 +1,49 @@\n     public int process(List<File> aFiles)\n     {\n         // Prepare to start\n         fireAuditStarted();\n-        for (FileSetCheck fsc : mFileSetChecks) {\n+        for (final FileSetCheck fsc : mFileSetChecks) {\n             fsc.beginProcessing(mCharset);\n         }\n \n         // Process each file\n-        for (File f : aFiles) {\n+        for (final File f : aFiles) {\n             final String fileName = f.getAbsolutePath();\n             fireFileStarted(fileName);\n             final TreeSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final FileText theText = new FileText(f.getAbsoluteFile(),\n                         mCharset);\n-                for (FileSetCheck fsc : mFileSetChecks) {\n+                for (final FileSetCheck fsc : mFileSetChecks) {\n                     fileMessages.addAll(fsc.process(f, theText));\n                 }\n             }\n             catch (final FileNotFoundException fnfe) {\n                 Utils.getExceptionLogger().debug(\n                         \"FileNotFoundException occured.\", fnfe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n                         null, this.getClass(), null));\n             }\n             catch (final IOException ioe) {\n                 Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n-        for (FileSetCheck fsc : mFileSetChecks) {\n+        for (final FileSetCheck fsc : mFileSetChecks) {\n             // They may also log!!!\n             fsc.finishProcessing();\n             fsc.destroy();\n         }\n \n         final int errorCount = mCounter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3cd6646941eca3da7d3b9a221c88e4c1d214876e": {
			"type": "Ybodychange",
			"commitMessage": "Apply patch #2783226 that uses FileText as an implementation for\nList<String> to pass lines around\n",
			"commitDate": "2010-06-28, 7:02 AM",
			"commitName": "3cd6646941eca3da7d3b9a221c88e4c1d214876e",
			"commitAuthor": "Oliver Burn",
			"commitDateOld": "2010-02-12, 7:57 PM",
			"commitNameOld": "523080bbf2be11354b94b851ac85d06e7e8a2c14",
			"commitAuthorOld": "Oliver Burn",
			"daysBetweenCommits": 135.42,
			"commitsBetweenForRepo": 15,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,50 +1,49 @@\n     public int process(List<File> aFiles)\n     {\n         // Prepare to start\n         fireAuditStarted();\n         for (FileSetCheck fsc : mFileSetChecks) {\n             fsc.beginProcessing(mCharset);\n         }\n \n         // Process each file\n         for (File f : aFiles) {\n             final String fileName = f.getAbsolutePath();\n             fireFileStarted(fileName);\n             final TreeSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n-                final String[] lines = Utils.getLines(f.getAbsolutePath(),\n+                final FileText theText = new FileText(f.getAbsoluteFile(),\n                         mCharset);\n-                final List<String> theLines = Lists.newArrayList(lines);\n                 for (FileSetCheck fsc : mFileSetChecks) {\n-                    fileMessages.addAll(fsc.process(f, theLines));\n+                    fileMessages.addAll(fsc.process(f, theText));\n                 }\n             }\n             catch (final FileNotFoundException fnfe) {\n                 Utils.getExceptionLogger().debug(\n                         \"FileNotFoundException occured.\", fnfe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n                         null, this.getClass(), null));\n             }\n             catch (final IOException ioe) {\n                 Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (FileSetCheck fsc : mFileSetChecks) {\n             // They may also log!!!\n             fsc.finishProcessing();\n             fsc.destroy();\n         }\n \n         final int errorCount = mCounter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f1fcae23142431016234774318e6ce3b5ccb48f4": {
			"type": "Ybodychange",
			"commitMessage": "remove an unneeded setter.\n",
			"commitDate": "2008-11-09, 3:43 AM",
			"commitName": "f1fcae23142431016234774318e6ce3b5ccb48f4",
			"commitAuthor": "Oliver Burn",
			"commitDateOld": "2008-11-09, 3:19 AM",
			"commitNameOld": "2e4762f1716c8d12c9652aad68cb4558181bb60c",
			"commitAuthorOld": "Oliver Burn",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,50 +1,50 @@\n     public int process(List<File> aFiles)\n     {\n         // Prepare to start\n         fireAuditStarted();\n         for (FileSetCheck fsc : mFileSetChecks) {\n-            fsc.beginProcessing(getCharset());\n+            fsc.beginProcessing(mCharset);\n         }\n \n         // Process each file\n         for (File f : aFiles) {\n             final String fileName = f.getAbsolutePath();\n             fireFileStarted(fileName);\n             final TreeSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n                 final String[] lines = Utils.getLines(f.getAbsolutePath(),\n-                        getCharset());\n+                        mCharset);\n                 final List<String> theLines = Lists.newArrayList(lines);\n                 for (FileSetCheck fsc : mFileSetChecks) {\n                     fileMessages.addAll(fsc.process(f, theLines));\n                 }\n             }\n             catch (final FileNotFoundException fnfe) {\n                 Utils.getExceptionLogger().debug(\n                         \"FileNotFoundException occured.\", fnfe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n                         null, this.getClass(), null));\n             }\n             catch (final IOException ioe) {\n                 Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (FileSetCheck fsc : mFileSetChecks) {\n             // They may also log!!!\n             fsc.finishProcessing();\n             fsc.destroy();\n         }\n \n         final int errorCount = mCounter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"2e4762f1716c8d12c9652aad68cb4558181bb60c": {
			"type": "Ybodychange",
			"commitMessage": "consolidate charset handling.\n",
			"commitDate": "2008-11-09, 3:19 AM",
			"commitName": "2e4762f1716c8d12c9652aad68cb4558181bb60c",
			"commitAuthor": "Oliver Burn",
			"commitDateOld": "2008-11-09, 2:37 AM",
			"commitNameOld": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
			"commitAuthorOld": "Oliver Burn",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,50 +1,50 @@\n     public int process(List<File> aFiles)\n     {\n         // Prepare to start\n         fireAuditStarted();\n         for (FileSetCheck fsc : mFileSetChecks) {\n-            fsc.beginProcessing();\n+            fsc.beginProcessing(getCharset());\n         }\n \n         // Process each file\n         for (File f : aFiles) {\n             final String fileName = f.getAbsolutePath();\n             fireFileStarted(fileName);\n             final TreeSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n             try {\n-                // TODO: Need to use , getCharset()\n-                final String[] lines = Utils.getLines(f.getAbsolutePath());\n+                final String[] lines = Utils.getLines(f.getAbsolutePath(),\n+                        getCharset());\n                 final List<String> theLines = Lists.newArrayList(lines);\n                 for (FileSetCheck fsc : mFileSetChecks) {\n                     fileMessages.addAll(fsc.process(f, theLines));\n                 }\n             }\n             catch (final FileNotFoundException fnfe) {\n                 Utils.getExceptionLogger().debug(\n                         \"FileNotFoundException occured.\", fnfe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n                         null, this.getClass(), null));\n             }\n             catch (final IOException ioe) {\n                 Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n                 fileMessages.add(new LocalizedMessage(0,\n                         Defn.CHECKSTYLE_BUNDLE, \"general.exception\",\n                         new String[] {ioe.getMessage()}, null, this.getClass(),\n                         null));\n             }\n             fireErrors(fileName, fileMessages);\n             fireFileFinished(fileName);\n         }\n \n         // Finish up\n         for (FileSetCheck fsc : mFileSetChecks) {\n             // They may also log!!!\n             fsc.finishProcessing();\n             fsc.destroy();\n         }\n \n         final int errorCount = mCounter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"13b7c634337e38d20daa92ca9d5e069a2e72ec55": {
			"type": "Ybodychange",
			"commitMessage": "A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:\n\n- reduces the logic required in each implementation of FileSetCheck.\n\n- reduces, but not eliminates, the number of times a file is reported as being audited.\n\n- reduces the amount of times a file needs to be read in from the file system.\n\nThe motivation is the desire to move more checks to be purely FileSetCheck based, like the TabCharacter check.\n\nI still need to do some tidying up of the documentation, and make Checker support \"charset\".\n",
			"commitDate": "2008-11-09, 2:37 AM",
			"commitName": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
			"commitAuthor": "Oliver Burn",
			"commitDateOld": "2008-04-24, 8:42 AM",
			"commitNameOld": "b3f724f871dd57c4db958556df1a73f71c8bd6e5",
			"commitAuthorOld": "Oliver Burn",
			"daysBetweenCommits": 198.79,
			"commitsBetweenForRepo": 49,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,50 @@\n     public int process(List<File> aFiles)\n     {\n+        // Prepare to start\n         fireAuditStarted();\n         for (FileSetCheck fsc : mFileSetChecks) {\n-            fsc.process(aFiles);\n+            fsc.beginProcessing();\n+        }\n+\n+        // Process each file\n+        for (File f : aFiles) {\n+            final String fileName = f.getAbsolutePath();\n+            fireFileStarted(fileName);\n+            final TreeSet<LocalizedMessage> fileMessages = Sets.newTreeSet();\n+            try {\n+                // TODO: Need to use , getCharset()\n+                final String[] lines = Utils.getLines(f.getAbsolutePath());\n+                final List<String> theLines = Lists.newArrayList(lines);\n+                for (FileSetCheck fsc : mFileSetChecks) {\n+                    fileMessages.addAll(fsc.process(f, theLines));\n+                }\n+            }\n+            catch (final FileNotFoundException fnfe) {\n+                Utils.getExceptionLogger().debug(\n+                        \"FileNotFoundException occured.\", fnfe);\n+                fileMessages.add(new LocalizedMessage(0,\n+                        Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,\n+                        null, this.getClass(), null));\n+            }\n+            catch (final IOException ioe) {\n+                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n+                fileMessages.add(new LocalizedMessage(0,\n+                        Defn.CHECKSTYLE_BUNDLE, \"general.exception\",\n+                        new String[] {ioe.getMessage()}, null, this.getClass(),\n+                        null));\n+            }\n+            fireErrors(fileName, fileMessages);\n+            fireFileFinished(fileName);\n+        }\n+\n+        // Finish up\n+        for (FileSetCheck fsc : mFileSetChecks) {\n+            // They may also log!!!\n+            fsc.finishProcessing();\n             fsc.destroy();\n         }\n+\n         final int errorCount = mCounter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f38d8abd42c3e824635e542e6031b3da1997c02e": {
			"type": "Yparameterchange",
			"commitMessage": "Removed a native array in favour of a List<File> -- was it worth it??\n\nAdded @Override where possible -- did this as I got bitten by a subtle bug when making the first change. The @Override would have prevented it.\n",
			"commitDate": "2007-12-19, 11:21 PM",
			"commitName": "f38d8abd42c3e824635e542e6031b3da1997c02e",
			"commitAuthor": "Oliver Burn",
			"commitDateOld": "2007-12-15, 3:28 AM",
			"commitNameOld": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
			"commitAuthorOld": "Oliver Burn",
			"daysBetweenCommits": 4.83,
			"commitsBetweenForRepo": 20,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,11 @@\n-    public int process(File[] aFiles)\n+    public int process(List<File> aFiles)\n     {\n         fireAuditStarted();\n         for (FileSetCheck fsc : mFileSetChecks) {\n             fsc.process(aFiles);\n             fsc.destroy();\n         }\n         final int errorCount = mCounter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[aFiles-File[]]",
				"newValue": "[aFiles-List<File>]"
			}
		},
		"f1afaf83f39b83cc3bd07a2388448b262652a76b": {
			"type": "Ybodychange",
			"commitMessage": "Finish of adding generics.\n",
			"commitDate": "2007-12-15, 1:14 AM",
			"commitName": "f1afaf83f39b83cc3bd07a2388448b262652a76b",
			"commitAuthor": "Oliver Burn",
			"commitDateOld": "2007-01-27, 7:51 AM",
			"commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
			"commitAuthorOld": "Lars Kühne",
			"daysBetweenCommits": 321.72,
			"commitsBetweenForRepo": 33,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,11 @@\n     public int process(File[] aFiles)\n     {\n         fireAuditStarted();\n-        for (int i = 0; i < mFileSetChecks.size(); i++) {\n-            final FileSetCheck fileSetCheck =\n-                (FileSetCheck) mFileSetChecks.get(i);\n-            fileSetCheck.process(aFiles);\n-            fileSetCheck.destroy();\n+        for (FileSetCheck fsc : mFileSetChecks) {\n+            fsc.process(aFiles);\n+            fsc.destroy();\n         }\n         final int errorCount = mCounter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"5d7063c660b241bce251f1a8c89394619f2791fb": {
			"type": "Ybodychange",
			"commitMessage": "Tighten up code\n",
			"commitDate": "2004-08-26, 7:34 AM",
			"commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
			"commitAuthor": "Oliver Burn",
			"commitDateOld": "2004-07-21, 5:35 AM",
			"commitNameOld": "80c8e1c7a8f32c0dd263fdd30d9d87ade317f51c",
			"commitAuthorOld": "Oliver Burn",
			"daysBetweenCommits": 36.08,
			"commitsBetweenForRepo": 18,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,13 @@\n     public int process(File[] aFiles)\n     {\n         fireAuditStarted();\n         for (int i = 0; i < mFileSetChecks.size(); i++) {\n-            FileSetCheck fileSetCheck = (FileSetCheck) mFileSetChecks.get(i);\n+            final FileSetCheck fileSetCheck =\n+                (FileSetCheck) mFileSetChecks.get(i);\n             fileSetCheck.process(aFiles);\n             fileSetCheck.destroy();\n         }\n-        int errorCount = mCounter.getCount();\n+        final int errorCount = mCounter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ce9f55c439621cd2a130519aea0ca4367bc7c67c": {
			"type": "Ybodychange",
			"commitMessage": "make sure that Checker calls the destroy method of FileSetCheck.\n\nClover is really cool, I found this bug by looking at the coverage\nof AbstractFileSetCheck - clover told me that destroy was never\nexecuted and that seemed strange to me.\n",
			"commitDate": "2002-12-04, 11:29 PM",
			"commitName": "ce9f55c439621cd2a130519aea0ca4367bc7c67c",
			"commitAuthor": "Lars Kühne",
			"commitDateOld": "2002-12-01, 2:01 AM",
			"commitNameOld": "0fb155232fd68c4a4546ec34e676fa655d7fe223",
			"commitAuthorOld": "Lars Kühne",
			"daysBetweenCommits": 3.89,
			"commitsBetweenForRepo": 18,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,12 @@\n     public int process(File[] aFiles)\n     {\n         fireAuditStarted();\n         for (int i = 0; i < mFileSetChecks.size(); i++) {\n             FileSetCheck fileSetCheck = (FileSetCheck) mFileSetChecks.get(i);\n             fileSetCheck.process(aFiles);\n+            fileSetCheck.destroy();\n         }\n         int errorCount = mCounter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"abff1a2489ea8af10e1bc0a335551262d22f44e7": {
			"type": "Ybodychange",
			"commitMessage": "Made TreeWalker a FileSetCheck and moved the\nprocessing logic from Checker to TreeWalker.\n\nChecker is now only concerned with managing FileSetChecks,\nalthough the setup is still hardcoded in the constructor,\nc.f. TODO comments in Checker constructor.\n\nUncommenting the addFileSetCheck calls for real is\nleft until we have better control our configuration.\n",
			"commitDate": "2002-11-19, 1:21 PM",
			"commitName": "abff1a2489ea8af10e1bc0a335551262d22f44e7",
			"commitAuthor": "Lars Kühne",
			"commitDateOld": "2002-11-19, 12:17 PM",
			"commitNameOld": "54a09706ec1db32435b09e6b6910813325558f8d",
			"commitAuthorOld": "Lars Kühne",
			"daysBetweenCommits": 0.04,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,11 @@\n     public int process(File[] aFiles)\n     {\n         fireAuditStarted();\n-        for (int i = 0; i < aFiles.length; i++) {\n-            process(aFiles[i]);\n+        for (int i = 0; i < mFileSetChecks.size(); i++) {\n+            FileSetCheck fileSetCheck = (FileSetCheck) mFileSetChecks.get(i);\n+            fileSetCheck.process(aFiles);\n         }\n         int errorCount = mCounter.getCount();\n         fireAuditFinished();\n         return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"54a09706ec1db32435b09e6b6910813325558f8d": {
			"type": "Ybodychange",
			"commitMessage": "Introduced MessageDispatcher interface so\nFileSetChecks do not need to be tightly coupled\nwith Checker to report errors.\n\nFileSetCheck implementations report errors now.\n\nError counting in Checker is now done via an\nAuditListener, no need to bother about that in\neach individual FileSetCheck.\n",
			"commitDate": "2002-11-19, 12:17 PM",
			"commitName": "54a09706ec1db32435b09e6b6910813325558f8d",
			"commitAuthor": "Lars Kühne",
			"commitDateOld": "2002-11-17, 1:24 AM",
			"commitNameOld": "82b2ba526976588d550cac698e512f8de6c1ffc6",
			"commitAuthorOld": "Lars Kühne",
			"daysBetweenCommits": 2.45,
			"commitsBetweenForRepo": 9,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,10 @@\n     public int process(File[] aFiles)\n     {\n-        int total = 0;\n         fireAuditStarted();\n         for (int i = 0; i < aFiles.length; i++) {\n-            total += process(aFiles[i]);\n+            process(aFiles[i]);\n         }\n+        int errorCount = mCounter.getCount();\n         fireAuditFinished();\n-        return total;\n+        return errorCount;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"822384a711290170148b43b5ae390dd4e8cfaf4f": {
			"type": "Yparameterchange",
			"commitMessage": "Changed signature of Checker.process(String[]) to process(File[])\n\nThis is a step towards making TreeWalker a FileSetCheck, next some\nmethods need to be moved around.\n",
			"commitDate": "2002-11-16, 11:48 PM",
			"commitName": "822384a711290170148b43b5ae390dd4e8cfaf4f",
			"commitAuthor": "Lars Kühne",
			"commitDateOld": "2002-11-15, 11:18 AM",
			"commitNameOld": "3c0608f33a6c41cf96056c52ae99070cbe5062d5",
			"commitAuthorOld": "Rick Giles",
			"daysBetweenCommits": 1.52,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,10 @@\n-    public int process(String[] aFiles)\n+    public int process(File[] aFiles)\n     {\n         int total = 0;\n         fireAuditStarted();\n         for (int i = 0; i < aFiles.length; i++) {\n             total += process(aFiles[i]);\n         }\n         fireAuditFinished();\n         return total;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[aFiles-String[]]",
				"newValue": "[aFiles-File[]]"
			}
		},
		"788044ce8170fb926d33d0a048b3caa5152aca65": {
			"type": "Ybodychange",
			"commitMessage": "removed old package.html check\n",
			"commitDate": "2002-11-14, 11:04 AM",
			"commitName": "788044ce8170fb926d33d0a048b3caa5152aca65",
			"commitAuthor": "Lars Kühne",
			"commitDateOld": "2002-11-14, 3:07 AM",
			"commitNameOld": "6f4247181beca3530b5c2dc762d9c5c6a018a06c",
			"commitAuthorOld": "Rick Giles",
			"daysBetweenCommits": 0.33,
			"commitsBetweenForRepo": 9,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,10 @@\n     public int process(String[] aFiles)\n     {\n-        // TODO: rename and blow away the old stuff\n         int total = 0;\n         fireAuditStarted();\n-\n-        // If you move checkPackageHtml() around beware of the caching\n-        // functionality of checkstyle. Make sure that package.html\n-        // checks are not skipped because of caching. Otherwise you\n-        // might e.g. have a package.html file, check all java files\n-        // without errors, delete package.html and then recheck without\n-        // errors because the html file is not covered by the cache.\n-        total += checkPackageHtml(aFiles);\n-\n         for (int i = 0; i < aFiles.length; i++) {\n             total += process(aFiles[i]);\n         }\n         fireAuditFinished();\n         return total;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"4cbd709c019cf1b69796858506d673f7b66d37c7": {
			"type": "Ybodychange",
			"commitMessage": "This is a really enjoyable commit to make. I have finally got to remove the\nugly Verifier class. The only remaining check are based on the new fileset\ncheck that Lars putting together. Magic. :-)\n",
			"commitDate": "2002-11-12, 9:21 PM",
			"commitName": "4cbd709c019cf1b69796858506d673f7b66d37c7",
			"commitAuthor": "Oliver Burn",
			"commitDateOld": "2002-11-05, 8:57 PM",
			"commitNameOld": "5fc3ff2bfbed94f88e1af95f38e970a832e4dbe6",
			"commitAuthorOld": "Oliver Burn",
			"daysBetweenCommits": 7.02,
			"commitsBetweenForRepo": 61,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,20 @@\n     public int process(String[] aFiles)\n     {\n-        // TODO: delete\n+        // TODO: rename and blow away the old stuff\n         int total = 0;\n         fireAuditStarted();\n \n         // If you move checkPackageHtml() around beware of the caching\n         // functionality of checkstyle. Make sure that package.html\n         // checks are not skipped because of caching. Otherwise you\n         // might e.g. have a package.html file, check all java files\n         // without errors, delete package.html and then recheck without\n         // errors because the html file is not covered by the cache.\n         total += checkPackageHtml(aFiles);\n \n         for (int i = 0; i < aFiles.length; i++) {\n             total += process(aFiles[i]);\n         }\n         fireAuditFinished();\n         return total;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b84b3fd04ad9c45e1466e35b707a2b59f5baf66b": {
			"type": "Ybodychange",
			"commitMessage": "Implemented a new version of Checker for that uses the Checks. The intent is\nto be able reuse the existing checker.\n\nOT: Due to ISP problems, I am unable to receive email at the moment.\n",
			"commitDate": "2002-09-24, 12:34 AM",
			"commitName": "b84b3fd04ad9c45e1466e35b707a2b59f5baf66b",
			"commitAuthor": "Oliver Burn",
			"commitDateOld": "2002-09-19, 3:07 AM",
			"commitNameOld": "03f8352479400cd2c80511bfe0242932a4f00f11",
			"commitAuthorOld": "Oliver Burn",
			"daysBetweenCommits": 4.89,
			"commitsBetweenForRepo": 9,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,20 @@\n     public int process(String[] aFiles)\n     {\n+        // TODO: delete\n         int total = 0;\n         fireAuditStarted();\n \n         // If you move checkPackageHtml() around beware of the caching\n         // functionality of checkstyle. Make sure that package.html\n         // checks are not skipped because of caching. Otherwise you\n         // might e.g. have a package.html file, check all java files\n         // without errors, delete package.html and then recheck without\n         // errors because the html file is not covered by the cache.\n         total += checkPackageHtml(aFiles);\n \n         for (int i = 0; i < aFiles.length; i++) {\n             total += process(aFiles[i]);\n         }\n         fireAuditFinished();\n         return total;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"6df3e84393d095000c982b2087344de84a91f9ef": {
			"type": "Ybodychange",
			"commitMessage": "Changed a comment to C++ style\n",
			"commitDate": "2002-02-05, 10:49 PM",
			"commitName": "6df3e84393d095000c982b2087344de84a91f9ef",
			"commitAuthor": "Oliver Burn",
			"commitDateOld": "2002-02-05, 1:22 PM",
			"commitNameOld": "c617457933a978f5fd861d7ea43d05bccf045c16",
			"commitAuthorOld": "Lars Kühne",
			"daysBetweenCommits": 0.39,
			"commitsBetweenForRepo": 8,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,25 +1,20 @@\n     public int process(String[] aFiles)\n     {\n         int total = 0;\n         fireAuditStarted();\n \n-        /*\n-\n-          If you move checkPackageHtml() around beware of the caching\n-          functionality of checkstyle. Make sure that package.html\n-          checks are not skipped because of caching. Otherwise you\n-          might e.g. have a package.html file, check all java files\n-          without errors, delete package.html and then recheck without\n-          errors because the html file is not covered by the cache.\n-\n-        */\n-\n+        // If you move checkPackageHtml() around beware of the caching\n+        // functionality of checkstyle. Make sure that package.html\n+        // checks are not skipped because of caching. Otherwise you\n+        // might e.g. have a package.html file, check all java files\n+        // without errors, delete package.html and then recheck without\n+        // errors because the html file is not covered by the cache.\n         total += checkPackageHtml(aFiles);\n-        \n+\n         for (int i = 0; i < aFiles.length; i++)\n         {\n             total += process(aFiles[i]);\n         }\n         fireAuditFinished();\n         return total;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c617457933a978f5fd861d7ea43d05bccf045c16": {
			"type": "Ybodychange",
			"commitMessage": "Implementation for RFEs 466756, 500378, 504964, 510441\n\nDetails:\n\n466756 - Check for package.html:\n - new parameter requirePackageHtml, default is false\n\n500378 - Check names of methods + local variables\n - new parameters methodPattern and localVarPattern,\n   default is ^[a-z][a-zA-Z0-9]*$\n\n504964 - no default access\n510441 - allowprotect should incl. packageprivate (requests the same feature)\n - new parameter allowPackage, default is false\n\nSorry that I did not split this into separate patches, I had this in\nmy local tree as is and it would require too much work to split it.  I\nthink the changes are easy enough to review three feature\nimplementations in one go.\n",
			"commitDate": "2002-02-05, 1:22 PM",
			"commitName": "c617457933a978f5fd861d7ea43d05bccf045c16",
			"commitAuthor": "Lars Kühne",
			"commitDateOld": "2002-02-04, 5:44 AM",
			"commitNameOld": "b779f3c1da7bacfe57900ccba7cd95de7ab54071",
			"commitAuthorOld": "Oliver Burn",
			"daysBetweenCommits": 1.32,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,25 @@\n     public int process(String[] aFiles)\n     {\n         int total = 0;\n         fireAuditStarted();\n-        for (int i = 0; i < aFiles.length; i++) {\n+\n+        /*\n+\n+          If you move checkPackageHtml() around beware of the caching\n+          functionality of checkstyle. Make sure that package.html\n+          checks are not skipped because of caching. Otherwise you\n+          might e.g. have a package.html file, check all java files\n+          without errors, delete package.html and then recheck without\n+          errors because the html file is not covered by the cache.\n+\n+        */\n+\n+        total += checkPackageHtml(aFiles);\n+        \n+        for (int i = 0; i < aFiles.length; i++)\n+        {\n             total += process(aFiles[i]);\n         }\n         fireAuditFinished();\n         return total;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"edf2c95634cd0c657465723eb0dc2e6f1834eeba": {
			"type": "Ymodifierchange",
			"commitMessage": "Made Checker & Configuration public so they can be used outside the package.\nA requested feature to that Checkstyle can be integrated into IDE's like\nNetBeans, JBuilder.\n",
			"commitDate": "2002-01-06, 12:40 AM",
			"commitName": "edf2c95634cd0c657465723eb0dc2e6f1834eeba",
			"commitAuthor": "Oliver Burn",
			"commitDateOld": "2002-01-05, 6:18 AM",
			"commitNameOld": "efcb63fd741d3e07f37e986e2d8ab6fe6da8d43b",
			"commitAuthorOld": "Oliver Burn",
			"daysBetweenCommits": 0.77,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,10 @@\n-    int process(String[] aFiles)\n+    public int process(String[] aFiles)\n     {\n         int total = 0;\n         fireAuditStarted();\n         for (int i = 0; i < aFiles.length; i++) {\n             total += process(aFiles[i]);\n         }\n         fireAuditFinished();\n         return total;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[]",
				"newValue": "[public]"
			}
		},
		"0e3fe5643667a53079dbd114e5b1e9aa91fde083": {
			"type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
			"commitMessage": "started to incorporate logging events\n",
			"commitDate": "2001-08-30, 10:13 AM",
			"commitName": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
			"commitAuthor": "Oliver Burn",
			"subchanges": [
				{
					"type": "Ymovefromfile",
					"commitMessage": "started to incorporate logging events\n",
					"commitDate": "2001-08-30, 10:13 AM",
					"commitName": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
					"commitAuthor": "Oliver Burn",
					"commitDateOld": "2001-08-30, 7:09 AM",
					"commitNameOld": "f34eba11cbd8559d4d06f96e19affa70abaf86ff",
					"commitAuthorOld": "Oliver Burn",
					"daysBetweenCommits": 0.13,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,8 +1,10 @@\n-    private int process(String aDir, String[] aFiles, Checker aChecker)\n+    int process(String[] aFiles)\n     {\n-        int retVal = 0;\n+        int total = 0;\n+        fireAuditStarted();\n         for (int i = 0; i < aFiles.length; i++) {\n-            retVal += aChecker.process(aDir + File.separator + aFiles[i]);\n+            total += process(aFiles[i]);\n         }\n-        return retVal;\n+        fireAuditFinished();\n+        return total;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
						"newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
						"oldMethodName": "process",
						"newMethodName": "process"
					}
				},
				{
					"type": "Ymodifierchange",
					"commitMessage": "started to incorporate logging events\n",
					"commitDate": "2001-08-30, 10:13 AM",
					"commitName": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
					"commitAuthor": "Oliver Burn",
					"commitDateOld": "2001-08-30, 7:09 AM",
					"commitNameOld": "f34eba11cbd8559d4d06f96e19affa70abaf86ff",
					"commitAuthorOld": "Oliver Burn",
					"daysBetweenCommits": 0.13,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,8 +1,10 @@\n-    private int process(String aDir, String[] aFiles, Checker aChecker)\n+    int process(String[] aFiles)\n     {\n-        int retVal = 0;\n+        int total = 0;\n+        fireAuditStarted();\n         for (int i = 0; i < aFiles.length; i++) {\n-            retVal += aChecker.process(aDir + File.separator + aFiles[i]);\n+            total += process(aFiles[i]);\n         }\n-        return retVal;\n+        fireAuditFinished();\n+        return total;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[private]",
						"newValue": "[]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "started to incorporate logging events\n",
					"commitDate": "2001-08-30, 10:13 AM",
					"commitName": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
					"commitAuthor": "Oliver Burn",
					"commitDateOld": "2001-08-30, 7:09 AM",
					"commitNameOld": "f34eba11cbd8559d4d06f96e19affa70abaf86ff",
					"commitAuthorOld": "Oliver Burn",
					"daysBetweenCommits": 0.13,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,8 +1,10 @@\n-    private int process(String aDir, String[] aFiles, Checker aChecker)\n+    int process(String[] aFiles)\n     {\n-        int retVal = 0;\n+        int total = 0;\n+        fireAuditStarted();\n         for (int i = 0; i < aFiles.length; i++) {\n-            retVal += aChecker.process(aDir + File.separator + aFiles[i]);\n+            total += process(aFiles[i]);\n         }\n-        return retVal;\n+        fireAuditFinished();\n+        return total;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				},
				{
					"type": "Yparameterchange",
					"commitMessage": "started to incorporate logging events\n",
					"commitDate": "2001-08-30, 10:13 AM",
					"commitName": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
					"commitAuthor": "Oliver Burn",
					"commitDateOld": "2001-08-30, 7:09 AM",
					"commitNameOld": "f34eba11cbd8559d4d06f96e19affa70abaf86ff",
					"commitAuthorOld": "Oliver Burn",
					"daysBetweenCommits": 0.13,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,8 +1,10 @@\n-    private int process(String aDir, String[] aFiles, Checker aChecker)\n+    int process(String[] aFiles)\n     {\n-        int retVal = 0;\n+        int total = 0;\n+        fireAuditStarted();\n         for (int i = 0; i < aFiles.length; i++) {\n-            retVal += aChecker.process(aDir + File.separator + aFiles[i]);\n+            total += process(aFiles[i]);\n         }\n-        return retVal;\n+        fireAuditFinished();\n+        return total;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[aDir-String, aFiles-String[], aChecker-Checker]",
						"newValue": "[aFiles-String[]]"
					}
				}
			]
		},
		"0fd69594a4c3e82f92f93f0371791da66938f8c3": {
			"type": "Yintroduced",
			"commitMessage": "first cut\n",
			"commitDate": "2001-06-22, 7:24 AM",
			"commitName": "0fd69594a4c3e82f92f93f0371791da66938f8c3",
			"commitAuthor": "Oliver Burn"
		}
	},
	"sha": "119fd4fb33bef9f5c66fc950396669af842c21a3"
}