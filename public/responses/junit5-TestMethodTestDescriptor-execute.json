{
	"repo": "https://github.com/junit-team/junit5.git",
	"file": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java",
	"method": {
		"longName": "public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor);",
		"startLine": 103,
		"methodName": "execute",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "public"
	},
	"history": {
		"b2cc5f49d5f892dbf022c62ec48f4e4bd95cf7cd": {
			"type": "Yfilerename",
			"commitMessage": "Rename MethodTestDescriptor to TestMethodTestDescriptor\n\nThis commit renames MethodTestDescriptor in order to align with the\nnaming convention for other test descriptors in Jupiter that pertain\nto methods.\n",
			"commitDate": "2017-07-16, 12:30 PM",
			"commitName": "b2cc5f49d5f892dbf022c62ec48f4e4bd95cf7cd",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-07-16, 12:18 PM",
			"commitNameOld": "1ffeb82ee94582720e9928c5868d180acd589d4d",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
				"newPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java"
			}
		},
		"fc3c61b41f014a2500f176e23fe8ad2989d20565": {
			"type": "Yparameterchange",
			"commitMessage": "Replace Consumer<TestDescriptor> with custom interface\n\nIssue: #14\n",
			"commitDate": "2017-02-24, 12:20 PM",
			"commitName": "fc3c61b41f014a2500f176e23fe8ad2989d20565",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-02-24, 12:20 PM",
			"commitNameOld": "74fb7c6ff29566e28b9b04b9bbcc50c0a8632ec7",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 12,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n \tpublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context,\n-\t\t\tConsumer<TestDescriptor> dynamicTestExecutor) throws Exception {\n+\t\t\tDynamicTestExecutor dynamicTestExecutor) throws Exception {\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\t// @formatter:off\n \t\tinvokeBeforeEachCallbacks(context);\n \t\t\tif (throwableCollector.isEmpty()) {\n \t\t\t\tinvokeBeforeEachMethods(context);\n \t\t\t\tif (throwableCollector.isEmpty()) {\n \t\t\t\t\tinvokeBeforeTestExecutionCallbacks(context);\n \t\t\t\t\tif (throwableCollector.isEmpty()) {\n \t\t\t\t\t\tinvokeTestMethod(context, dynamicTestExecutor);\n \t\t\t\t\t}\n \t\t\t\t\tinvokeAfterTestExecutionCallbacks(context);\n \t\t\t\t}\n \t\t\t\tinvokeAfterEachMethods(context);\n \t\t\t}\n \t\tinvokeAfterEachCallbacks(context);\n \t\t// @formatter:on\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-Consumer<TestDescriptor>]",
				"newValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-DynamicTestExecutor]"
			}
		},
		"4b41518fa052b28a953e99b087d505603a22c175": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
			"commitDate": "2017-02-24, 12:20 PM",
			"commitName": "4b41518fa052b28a953e99b087d505603a22c175",
			"commitAuthor": "Marc Philipp",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
					"commitDate": "2017-02-24, 12:20 PM",
					"commitName": "4b41518fa052b28a953e99b087d505603a22c175",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2017-01-18, 9:17 PM",
					"commitNameOld": "2f49071dfc9005f556543e34ca41027c63fde927",
					"commitAuthorOld": "Sam Brannen",
					"daysBetweenCommits": 36.63,
					"commitsBetweenForRepo": 48,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,23 +1,24 @@\n-\tpublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n+\tpublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context,\n+\t\t\tConsumer<TestDescriptor> dynamicTestExecutor) throws Exception {\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\t// @formatter:off\n \t\tinvokeBeforeEachCallbacks(context);\n \t\t\tif (throwableCollector.isEmpty()) {\n \t\t\t\tinvokeBeforeEachMethods(context);\n \t\t\t\tif (throwableCollector.isEmpty()) {\n \t\t\t\t\tinvokeBeforeTestExecutionCallbacks(context);\n \t\t\t\t\tif (throwableCollector.isEmpty()) {\n-\t\t\t\t\t\tinvokeTestMethod(context);\n+\t\t\t\t\t\tinvokeTestMethod(context, dynamicTestExecutor);\n \t\t\t\t\t}\n \t\t\t\t\tinvokeAfterTestExecutionCallbacks(context);\n \t\t\t\t}\n \t\t\t\tinvokeAfterEachMethods(context);\n \t\t\t}\n \t\tinvokeAfterEachCallbacks(context);\n \t\t// @formatter:on\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[context-JupiterEngineExecutionContext]",
						"newValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-Consumer<TestDescriptor>]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
					"commitDate": "2017-02-24, 12:20 PM",
					"commitName": "4b41518fa052b28a953e99b087d505603a22c175",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2017-01-18, 9:17 PM",
					"commitNameOld": "2f49071dfc9005f556543e34ca41027c63fde927",
					"commitAuthorOld": "Sam Brannen",
					"daysBetweenCommits": 36.63,
					"commitsBetweenForRepo": 48,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,23 +1,24 @@\n-\tpublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n+\tpublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context,\n+\t\t\tConsumer<TestDescriptor> dynamicTestExecutor) throws Exception {\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\t// @formatter:off\n \t\tinvokeBeforeEachCallbacks(context);\n \t\t\tif (throwableCollector.isEmpty()) {\n \t\t\t\tinvokeBeforeEachMethods(context);\n \t\t\t\tif (throwableCollector.isEmpty()) {\n \t\t\t\t\tinvokeBeforeTestExecutionCallbacks(context);\n \t\t\t\t\tif (throwableCollector.isEmpty()) {\n-\t\t\t\t\t\tinvokeTestMethod(context);\n+\t\t\t\t\t\tinvokeTestMethod(context, dynamicTestExecutor);\n \t\t\t\t\t}\n \t\t\t\t\tinvokeAfterTestExecutionCallbacks(context);\n \t\t\t\t}\n \t\t\t\tinvokeAfterEachMethods(context);\n \t\t\t}\n \t\tinvokeAfterEachCallbacks(context);\n \t\t// @formatter:on\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"3e3b402131a99f01480c57dd82c2e81ad6d9a4ea": {
			"type": "Ybodychange",
			"commitMessage": "Polish Jupiter TestDescriptor implementations\n",
			"commitDate": "2016-06-25, 1:02 PM",
			"commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-06-25, 10:30 AM",
			"commitNameOld": "6d2e88689252202ceb2efcdc54f78631f65752c5",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.11,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,25 +1,23 @@\n \tpublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n-\t\tExtensionRegistry registry = context.getExtensionRegistry();\n-\t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n-\t\tThrowableCollector throwableCollector = new ThrowableCollector();\n+\t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\t// @formatter:off\n-\t\tinvokeBeforeEachCallbacks(registry, testExtensionContext, throwableCollector);\n+\t\tinvokeBeforeEachCallbacks(context);\n \t\t\tif (throwableCollector.isEmpty()) {\n-\t\t\t\tinvokeBeforeEachMethods(registry, testExtensionContext, throwableCollector);\n+\t\t\t\tinvokeBeforeEachMethods(context);\n \t\t\t\tif (throwableCollector.isEmpty()) {\n-\t\t\t\t\tinvokeBeforeTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n+\t\t\t\t\tinvokeBeforeTestExecutionCallbacks(context);\n \t\t\t\t\tif (throwableCollector.isEmpty()) {\n-\t\t\t\t\t\tinvokeTestMethod(context, testExtensionContext, throwableCollector);\n+\t\t\t\t\t\tinvokeTestMethod(context);\n \t\t\t\t\t}\n-\t\t\t\t\tinvokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n+\t\t\t\t\tinvokeAfterTestExecutionCallbacks(context);\n \t\t\t\t}\n-\t\t\t\tinvokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n+\t\t\t\tinvokeAfterEachMethods(context);\n \t\t\t}\n-\t\tinvokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n+\t\tinvokeAfterEachCallbacks(context);\n \t\t// @formatter:on\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ef5a029e8ca36ec19cc699fc5d9b3c3090638912": {
			"type": "Ybodychange",
			"commitMessage": "Ensure afters are invoked if exception is thrown by test or a before\n\nbefore: @BeforeEach method, BeforeEachCallback, BeforeTestExecutionCallback\n\nafter:  @AfterEach method, AfterEachCallback, AfterTestExecutionCallback\n\nPrior to this commit, if an exception was thrown by a test method or a\n\"before\", then \"afters\" were never invoked, which is in strict contrast\nto the semantics of JUnit 4 and other frameworks.\n\nThis commit fixes this problem by ensuring that \"afters\" (for the\nappropriate nesting level) are invoked even if the test method or a\n\"before\" throws an exception.\n\nFixes: #357\n",
			"commitDate": "2016-06-25, 9:07 AM",
			"commitName": "ef5a029e8ca36ec19cc699fc5d9b3c3090638912",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-06-20, 6:08 AM",
			"commitNameOld": "babcc661bd906b38a272f287ac8779669268fc58",
			"commitAuthorOld": "JUnit Team",
			"daysBetweenCommits": 5.12,
			"commitsBetweenForRepo": 42,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,25 @@\n \tpublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n \t\tExtensionRegistry registry = context.getExtensionRegistry();\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n \t\t// @formatter:off\n-\t\tinvokeBeforeEachCallbacks(registry, testExtensionContext);\n-\t\t\tinvokeBeforeEachMethods(registry, testExtensionContext);\n-\t\t\t\tinvokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n-\t\t\t\t\tinvokeTestMethod(context, testExtensionContext, throwableCollector);\n-\t\t\t\tinvokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n-\t\t\tinvokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n+\t\tinvokeBeforeEachCallbacks(registry, testExtensionContext, throwableCollector);\n+\t\t\tif (throwableCollector.isEmpty()) {\n+\t\t\t\tinvokeBeforeEachMethods(registry, testExtensionContext, throwableCollector);\n+\t\t\t\tif (throwableCollector.isEmpty()) {\n+\t\t\t\t\tinvokeBeforeTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n+\t\t\t\t\tif (throwableCollector.isEmpty()) {\n+\t\t\t\t\t\tinvokeTestMethod(context, testExtensionContext, throwableCollector);\n+\t\t\t\t\t}\n+\t\t\t\t\tinvokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n+\t\t\t\t}\n+\t\t\t\tinvokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n+\t\t\t}\n \t\tinvokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n \t\t// @formatter:on\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"babcc661bd906b38a272f287ac8779669268fc58": {
			"type": "Ymultichange(Yparameterchange,Yreturntypechange)",
			"commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
			"commitDate": "2016-06-20, 6:08 AM",
			"commitName": "babcc661bd906b38a272f287ac8779669268fc58",
			"commitAuthor": "JUnit Team",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
					"commitDate": "2016-06-20, 6:08 AM",
					"commitName": "babcc661bd906b38a272f287ac8779669268fc58",
					"commitAuthor": "JUnit Team",
					"commitDateOld": "2016-06-20, 1:59 AM",
					"commitNameOld": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
					"commitAuthorOld": "JUnit Team",
					"daysBetweenCommits": 0.17,
					"commitsBetweenForRepo": 7,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,19 +1,19 @@\n-\tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n+\tpublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n \t\tExtensionRegistry registry = context.getExtensionRegistry();\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n \t\t// @formatter:off\n \t\tinvokeBeforeEachCallbacks(registry, testExtensionContext);\n \t\t\tinvokeBeforeEachMethods(registry, testExtensionContext);\n \t\t\t\tinvokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n \t\t\t\t\tinvokeTestMethod(context, testExtensionContext, throwableCollector);\n \t\t\t\tinvokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n \t\t\tinvokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n \t\tinvokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n \t\t// @formatter:on\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[context-JUnit5EngineExecutionContext]",
						"newValue": "[context-JupiterEngineExecutionContext]"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
					"commitDate": "2016-06-20, 6:08 AM",
					"commitName": "babcc661bd906b38a272f287ac8779669268fc58",
					"commitAuthor": "JUnit Team",
					"commitDateOld": "2016-06-20, 1:59 AM",
					"commitNameOld": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
					"commitAuthorOld": "JUnit Team",
					"daysBetweenCommits": 0.17,
					"commitsBetweenForRepo": 7,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,19 +1,19 @@\n-\tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n+\tpublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n \t\tExtensionRegistry registry = context.getExtensionRegistry();\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n \t\t// @formatter:off\n \t\tinvokeBeforeEachCallbacks(registry, testExtensionContext);\n \t\t\tinvokeBeforeEachMethods(registry, testExtensionContext);\n \t\t\t\tinvokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n \t\t\t\t\tinvokeTestMethod(context, testExtensionContext, throwableCollector);\n \t\t\t\tinvokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n \t\t\tinvokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n \t\tinvokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n \t\t// @formatter:on\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "JUnit5EngineExecutionContext",
						"newValue": "JupiterEngineExecutionContext"
					}
				}
			]
		},
		"4972eb58d680a30e8fbd1ffb6cdc6477bef83374": {
			"type": "Yfilerename",
			"commitMessage": "Rename all JUnit 5 artifacts to platform, jupiter, & vintage\n\nIssue: #286\n",
			"commitDate": "2016-06-20, 1:59 AM",
			"commitName": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2016-06-19, 11:04 AM",
			"commitNameOld": "e5b7300ba40a0420e310d463a63ea4c10cc8d9b9",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.62,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
				"newPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java"
			}
		},
		"507e50872c6df8a66c32f45cb2153555f510c4b1": {
			"type": "Yfilerename",
			"commitMessage": "Rename base package of junit5-api and junit5-engine to org.junit.jupiter\n",
			"commitDate": "2016-06-18, 1:50 PM",
			"commitName": "507e50872c6df8a66c32f45cb2153555f510c4b1",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2016-06-18, 12:31 PM",
			"commitNameOld": "f7741ec30a0578d2ffaf76bca83d4fa31eb666a5",
			"commitAuthorOld": "JUnit Team",
			"daysBetweenCommits": 0.06,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
				"newPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java"
			}
		},
		"f68eba6bd690e5686b9b6492db3ea36f758b7b4c": {
			"type": "Ybodychange",
			"commitMessage": "Rename AfterTestMethodCallback to AfterTestExecutionCallback\n\nIssue: #249\n",
			"commitDate": "2016-05-24, 3:33 PM",
			"commitName": "f68eba6bd690e5686b9b6492db3ea36f758b7b4c",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-24, 3:25 PM",
			"commitNameOld": "6b9f227921f86893f4a759b578f4d197437cbae9",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,19 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n \t\tExtensionRegistry registry = context.getExtensionRegistry();\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n \t\t// @formatter:off\n \t\tinvokeBeforeEachCallbacks(registry, testExtensionContext);\n \t\t\tinvokeBeforeEachMethods(registry, testExtensionContext);\n \t\t\t\tinvokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n \t\t\t\t\tinvokeTestMethod(context, testExtensionContext, throwableCollector);\n-\t\t\t\tinvokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n+\t\t\t\tinvokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n \t\t\tinvokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n \t\tinvokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n \t\t// @formatter:on\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"6b9f227921f86893f4a759b578f4d197437cbae9": {
			"type": "Ybodychange",
			"commitMessage": "Rename BeforeTestMethodCallback to BeforeTestExecutionCallback\n\nIssue: #249\n",
			"commitDate": "2016-05-24, 3:25 PM",
			"commitName": "6b9f227921f86893f4a759b578f4d197437cbae9",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-24, 3:18 PM",
			"commitNameOld": "c7c0d24a3b6b46868d732e6358834c2ddf81ad48",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,19 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n \t\tExtensionRegistry registry = context.getExtensionRegistry();\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n \t\t// @formatter:off\n \t\tinvokeBeforeEachCallbacks(registry, testExtensionContext);\n \t\t\tinvokeBeforeEachMethods(registry, testExtensionContext);\n-\t\t\t\tinvokeBeforeTestMethodCallbacks(registry, testExtensionContext);\n+\t\t\t\tinvokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n \t\t\t\t\tinvokeTestMethod(context, testExtensionContext, throwableCollector);\n \t\t\t\tinvokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n \t\t\tinvokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n \t\tinvokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n \t\t// @formatter:on\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ac7bb522519cd8a600324aa909a5c17a110cb97f": {
			"type": "Ybodychange",
			"commitMessage": "Execution of simple dynamic tests (#58)\n\n- HierarchicalTestExecutor only executes children from containers\n- Unique IDs for dynamic tests are created using index\n- Add tests for discovery of dynamic test by method selector (#58)\n",
			"commitDate": "2016-05-23, 12:21 PM",
			"commitName": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2016-05-15, 12:09 PM",
			"commitNameOld": "ff6c3f635a444ccc92039420616402e32d3506a9",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 8.01,
			"commitsBetweenForRepo": 42,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,19 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n \t\tExtensionRegistry registry = context.getExtensionRegistry();\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n \t\t// @formatter:off\n \t\tinvokeBeforeEachCallbacks(registry, testExtensionContext);\n \t\t\tinvokeBeforeEachMethods(registry, testExtensionContext);\n \t\t\t\tinvokeBeforeTestMethodCallbacks(registry, testExtensionContext);\n-\t\t\t\t\tinvokeTestMethod(registry, testExtensionContext, throwableCollector);\n+\t\t\t\t\tinvokeTestMethod(context, testExtensionContext, throwableCollector);\n \t\t\t\tinvokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n \t\t\tinvokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n \t\tinvokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n \t\t// @formatter:on\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"65e0bd5483c8923393fa85955ddaf24d68fd8042": {
			"type": "Ybodychange",
			"commitMessage": "Apply InstancePostProcessor extensions for every test instance\n\nPrior to this commit, InstancePostProcessor extensions were only applied\nduring the execution of a MethodTestDescriptor instead of at the point\nwhen such an instance was physically instantiated. Consequently,\nInstancePostProcessor extensions were never applied to instances of\nouter classes when test methods in a nested class were executed, which\nlead to improperly initialized outer instances (e.g,\nNullPointerExceptions, etc.).\n\nThis commit fixes this bug by relocating the invocation of\nInstancePostProcessor extensions to places in the framework where test\ninstances are physically instantiated (i.e., in ClassTestDescriptor and\nNestedClassTestDescriptor).\n\nFurthermore, the argument list for the postProcessTestInstance() method\nin the InstancePostProcessor API has been modified to accept the test\ninstance and a generic ExtensionContext.\n\nIssue: #252\n",
			"commitDate": "2016-05-13, 6:55 AM",
			"commitName": "65e0bd5483c8923393fa85955ddaf24d68fd8042",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-02, 3:18 PM",
			"commitNameOld": "dfe33b0e7e22b64b712593ea3b635675edbd6f73",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 10.65,
			"commitsBetweenForRepo": 42,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,19 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n \t\tExtensionRegistry registry = context.getExtensionRegistry();\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n-\t\tinvokeInstancePostProcessors(registry, testExtensionContext);\n-\n \t\t// @formatter:off\n \t\tinvokeBeforeEachCallbacks(registry, testExtensionContext);\n \t\t\tinvokeBeforeEachMethods(registry, testExtensionContext);\n \t\t\t\tinvokeBeforeTestMethodCallbacks(registry, testExtensionContext);\n \t\t\t\t\tinvokeTestMethod(registry, testExtensionContext, throwableCollector);\n \t\t\t\tinvokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n \t\t\tinvokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n \t\tinvokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n \t\t// @formatter:on\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b2ba6b95138382f25ca757a5ca2a7295bee4c3b8": {
			"type": "Ybodychange",
			"commitMessage": "Do not mix execution of extensions and user code\n\nThis commit separates the execution of extensions and user code with\nregard to test lifecycle callbacks.\n\nIssue: #232\n",
			"commitDate": "2016-05-02, 8:30 AM",
			"commitName": "b2ba6b95138382f25ca757a5ca2a7295bee4c3b8",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-02, 8:30 AM",
			"commitNameOld": "36b132b0fc63a723ec0926e58921379020326c2b",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,21 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n+\t\tExtensionRegistry registry = context.getExtensionRegistry();\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n-\t\tinvokeInstancePostProcessors(context.getExtensionRegistry(), testExtensionContext);\n-\t\tinvokeBeforeEachCallbacks(context.getExtensionRegistry(), testExtensionContext);\n-\t\tinvokeBeforeTestMethodCallbacks(context.getExtensionRegistry(), testExtensionContext);\n-\t\tinvokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n-\t\tinvokeAfterTestMethodCallbacks(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n-\t\tinvokeAfterEachCallbacks(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n+\t\tinvokeInstancePostProcessors(registry, testExtensionContext);\n+\n+\t\t// @formatter:off\n+\t\tinvokeBeforeEachCallbacks(registry, testExtensionContext);\n+\t\t\tinvokeBeforeEachMethods(registry, testExtensionContext);\n+\t\t\t\tinvokeBeforeTestMethodCallbacks(registry, testExtensionContext);\n+\t\t\t\t\tinvokeTestMethod(registry, testExtensionContext, throwableCollector);\n+\t\t\t\tinvokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n+\t\t\tinvokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n+\t\tinvokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n+\t\t// @formatter:on\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"7d84c39939665d7366e6425bf2e9d52e417822f5": {
			"type": "Ybodychange",
			"commitMessage": "Introduce before & after test method callback APIs\n\nIssue: #232\n",
			"commitDate": "2016-05-02, 8:30 AM",
			"commitName": "7d84c39939665d7366e6425bf2e9d52e417822f5",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-02, 8:30 AM",
			"commitNameOld": "9027966eb5c513f451e7ec2bebcd51b7b1bfa27e",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,15 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n \t\tinvokeInstancePostProcessors(context.getExtensionRegistry(), testExtensionContext);\n \t\tinvokeBeforeEachCallbacks(context.getExtensionRegistry(), testExtensionContext);\n+\t\tinvokeBeforeTestMethodCallbacks(context.getExtensionRegistry(), testExtensionContext);\n \t\tinvokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n+\t\tinvokeAfterTestMethodCallbacks(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n \t\tinvokeAfterEachCallbacks(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9027966eb5c513f451e7ec2bebcd51b7b1bfa27e": {
			"type": "Ybodychange",
			"commitMessage": "Rename test lifecycle callback extension APIs\n\nIssue: #232\n",
			"commitDate": "2016-05-02, 8:30 AM",
			"commitName": "9027966eb5c513f451e7ec2bebcd51b7b1bfa27e",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-02, 8:30 AM",
			"commitNameOld": "23c20e541adffed56fcb34ad297d843081eaa796",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,13 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n \t\tinvokeInstancePostProcessors(context.getExtensionRegistry(), testExtensionContext);\n-\t\tinvokeBeforeEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n+\t\tinvokeBeforeEachCallbacks(context.getExtensionRegistry(), testExtensionContext);\n \t\tinvokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n-\t\tinvokeAfterEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n+\t\tinvokeAfterEachCallbacks(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"23c20e541adffed56fcb34ad297d843081eaa796": {
			"type": "Ybodychange",
			"commitMessage": "Rename ExceptionHandlerExtensionPoint to ExceptionHandler\n\nIssue: #232\n",
			"commitDate": "2016-05-02, 8:30 AM",
			"commitName": "23c20e541adffed56fcb34ad297d843081eaa796",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-03-11, 2:52 AM",
			"commitNameOld": "5382b682db28f81e71737cec46b9883bfff73800",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 52.19,
			"commitsBetweenForRepo": 142,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,13 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n-\t\tinvokeInstancePostProcessorExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n+\t\tinvokeInstancePostProcessors(context.getExtensionRegistry(), testExtensionContext);\n \t\tinvokeBeforeEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n \t\tinvokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n \t\tinvokeAfterEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f250792f7f2a6a40cdec82f3090ce88d99aad152": {
			"type": "Ybodychange",
			"commitMessage": "#103 ExceptionHandlerExtensionPoint now called. Chaining does not work yet.\n",
			"commitDate": "2016-01-21, 6:16 AM",
			"commitName": "f250792f7f2a6a40cdec82f3090ce88d99aad152",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2016-01-21, 5:03 AM",
			"commitNameOld": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.05,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,13 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n \t\tinvokeInstancePostProcessorExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n \t\tinvokeBeforeEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n-\t\tinvokeTestMethod(testExtensionContext, context.getExtensionRegistry(), throwableCollector);\n+\t\tinvokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n \t\tinvokeAfterEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c0a0e14d2c11bb77bfe25aee9594b04e793b04aa": {
			"type": "Ybodychange",
			"commitMessage": "Rename TestExtensionRegistry to ExtensionRegistry\n\nIssue: #112\n",
			"commitDate": "2016-01-21, 5:03 AM",
			"commitName": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-01-18, 6:34 AM",
			"commitNameOld": "763cf502451c5053cd72248aac3561cd1530b719",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 2.94,
			"commitsBetweenForRepo": 84,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,13 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n-\t\tinvokeInstancePostProcessorExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n-\t\tinvokeBeforeEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n-\t\tinvokeTestMethod(testExtensionContext, context.getTestExtensionRegistry(), throwableCollector);\n-\t\tinvokeAfterEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext, throwableCollector);\n+\t\tinvokeInstancePostProcessorExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n+\t\tinvokeBeforeEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n+\t\tinvokeTestMethod(testExtensionContext, context.getExtensionRegistry(), throwableCollector);\n+\t\tinvokeAfterEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"266b9b90ab55ed3ffdfd43960309606300db8758": {
			"type": "Yexceptionschange",
			"commitMessage": "Consistently throw Exception instead of Throwable\n\nIssue: #64\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nSamuraism, Inc. (http://samuraism.com/) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2016-01-02, 10:50 AM",
			"commitName": "266b9b90ab55ed3ffdfd43960309606300db8758",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-01-02, 9:37 AM",
			"commitNameOld": "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.05,
			"commitsBetweenForRepo": 7,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,13 @@\n-\tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n+\tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n \t\tinvokeInstancePostProcessorExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n \t\tinvokeBeforeEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n \t\tinvokeTestMethod(testExtensionContext, context.getTestExtensionRegistry(), throwableCollector);\n \t\tinvokeAfterEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext, throwableCollector);\n \n \t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[Throwable]",
				"newValue": "[Exception]"
			}
		},
		"a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab": {
			"type": "Ybodychange",
			"commitMessage": "Mask checked exceptions as unchecked exceptions in ReflectionUtils\n\nPrior to this commit, ReflectionUtils.handleException() wrapped checked\nexceptions in a TargetExceptionWrapper (a subclass of RuntimeException).\nThis forced clients of ReflectionUtils to manually handle unwrapping of\nchecked exceptions.\n\nThis commit introduces a new throwAsRuntimeException() method in\nReflectionUtils which uses a reflective hack (based on generics and type\nerasure) that tricks the Java compiler into believing that the thrown\nexception is an unchecked exception. This approach allows both checked\nand unchecked exceptions to transparently propagate up the call stack\nwithout forcing callers to explicitly handle checked exceptions. In\naddition, this approach avoids the need to wrap/unwrap checked\nexceptions via the TargetExceptionWrapper.\n\nFurthermore, this commit refactors exception handling code within the\nJUnit 5 engine to use the newly introduced ThrowableCollector API for\nconsistent, simplified tracking of exceptions.\n\nIssue: #64\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nSamuraism, Inc. (http://samuraism.com/) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2016-01-02, 9:37 AM",
			"commitName": "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-01-02, 9:23 AM",
			"commitNameOld": "355d64b574c534f35b4faeae1339b458a0787579",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,14 +1,13 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n+\t\tThrowableCollector throwableCollector = new ThrowableCollector();\n \n \t\tinvokeInstancePostProcessorExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n \t\tinvokeBeforeEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n+\t\tinvokeTestMethod(testExtensionContext, context.getTestExtensionRegistry(), throwableCollector);\n+\t\tinvokeAfterEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext, throwableCollector);\n \n-\t\tList<Throwable> throwablesCollector = new LinkedList<>();\n-\t\tinvokeTestMethod(testExtensionContext, context.getTestExtensionRegistry(), throwablesCollector);\n-\n-\t\tinvokeAfterEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext, throwablesCollector);\n-\t\tthrowIfAnyThrowablePresent(throwablesCollector);\n+\t\tthrowableCollector.assertEmpty();\n \n \t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0027ade00fd483e08714ece1021a7715bb1855da": {
			"type": "Ybodychange",
			"commitMessage": "Added skipping for methods and classes.\nSome duplication and naming issues left.\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nGradleware (https://gradle.org) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-22, 1:34 AM",
			"commitName": "0027ade00fd483e08714ece1021a7715bb1855da",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-12-18, 8:25 AM",
			"commitNameOld": "b2f64779aee87021348c8b8465be89675b700b16",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 3.71,
			"commitsBetweenForRepo": 38,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,25 +1,15 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n \n-\t\tTestExtensionRegistry newTestExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testMethod,\n-\t\t\tcontext.getTestExtensionRegistry());\n+\t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \n-\t\tJUnit5EngineExecutionContext newContext = context.extend().withTestExtensionRegistry(\n-\t\t\tnewTestExtensionRegistry).build();\n-\n-\t\tObject testInstance = context.getTestInstanceProvider().getTestInstance();\n-\t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(context.getExtensionContext(),\n-\t\t\tthis, testInstance);\n-\n-\t\tinvokeInstancePostProcessorExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n-\n-\t\tinvokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n+\t\tinvokeInstancePostProcessorExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n+\t\tinvokeBeforeEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n \n \t\tList<Throwable> throwablesCollector = new LinkedList<>();\n-\t\tinvokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n+\t\tinvokeTestMethod(testExtensionContext, context.getTestExtensionRegistry(), throwablesCollector);\n \n-\t\tinvokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n-\n+\t\tinvokeAfterEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext, throwablesCollector);\n \t\tthrowIfAnyThrowablePresent(throwablesCollector);\n \n-\t\treturn newContext;\n+\t\treturn context;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b2f64779aee87021348c8b8465be89675b700b16": {
			"type": "Ybodychange",
			"commitMessage": "Built in call to InstancePostProcessor.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-18, 8:25 AM",
			"commitName": "b2f64779aee87021348c8b8465be89675b700b16",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-12-18, 6:47 AM",
			"commitNameOld": "12bbe5afc72f457e5bba4bbcf68c49d6e4b77a4e",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 0.07,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,23 +1,25 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n \n \t\tTestExtensionRegistry newTestExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testMethod,\n \t\t\tcontext.getTestExtensionRegistry());\n \n \t\tJUnit5EngineExecutionContext newContext = context.extend().withTestExtensionRegistry(\n \t\t\tnewTestExtensionRegistry).build();\n \n \t\tObject testInstance = context.getTestInstanceProvider().getTestInstance();\n \t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(context.getExtensionContext(),\n \t\t\tthis, testInstance);\n \n+\t\tinvokeInstancePostProcessorExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n+\n \t\tinvokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n \n \t\tList<Throwable> throwablesCollector = new LinkedList<>();\n \t\tinvokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n \n \t\tinvokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n \n \t\tthrowIfAnyThrowablePresent(throwablesCollector);\n \n \t\treturn newContext;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c2d9a533b97ee808e5f51ffd94eb4a0524ff8362": {
			"type": "Ybodychange",
			"commitMessage": "Before/AfterAll callbacks work. Before/AfterAll methods not yet.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-17, 11:54 AM",
			"commitName": "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-12-17, 4:48 AM",
			"commitNameOld": "8db7e41d03b3d1f989c458e040f86f7e30e153d7",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 0.3,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,27 +1,23 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n \n \t\tTestExtensionRegistry newTestExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testMethod,\n \t\t\tcontext.getTestExtensionRegistry());\n \n \t\tJUnit5EngineExecutionContext newContext = context.extend().withTestExtensionRegistry(\n \t\t\tnewTestExtensionRegistry).build();\n \n \t\tObject testInstance = context.getTestInstanceProvider().getTestInstance();\n \t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(context.getExtensionContext(),\n \t\t\tthis, testInstance);\n \n \t\tinvokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n \n \t\tList<Throwable> throwablesCollector = new LinkedList<>();\n \t\tinvokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n \n \t\tinvokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n \n-\t\tif (!throwablesCollector.isEmpty()) {\n-\t\t\tThrowable t = throwablesCollector.get(0);\n-\t\t\tthrowablesCollector.stream().skip(1).forEach(t::addSuppressed);\n-\t\t\tthrow t;\n-\t\t}\n+\t\tthrowIfAnyThrowablePresent(throwablesCollector);\n \n \t\treturn newContext;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"8db7e41d03b3d1f989c458e040f86f7e30e153d7": {
			"type": "Ybodychange",
			"commitMessage": "BeforeEach and AfterEach methods are now registered as ExtensionPoints\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-17, 4:48 AM",
			"commitName": "8db7e41d03b3d1f989c458e040f86f7e30e153d7",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-12-14, 8:45 PM",
			"commitNameOld": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 2.34,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,31 +1,27 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n \n \t\tTestExtensionRegistry newTestExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testMethod,\n \t\t\tcontext.getTestExtensionRegistry());\n \n \t\tJUnit5EngineExecutionContext newContext = context.extend().withTestExtensionRegistry(\n \t\t\tnewTestExtensionRegistry).build();\n \n \t\tObject testInstance = context.getTestInstanceProvider().getTestInstance();\n \t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(context.getExtensionContext(),\n \t\t\tthis, testInstance);\n \n \t\tinvokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n \n-\t\tcontext.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n-\n \t\tList<Throwable> throwablesCollector = new LinkedList<>();\n \t\tinvokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n \n-\t\tcontext.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwablesCollector);\n-\n \t\tinvokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n \n \t\tif (!throwablesCollector.isEmpty()) {\n \t\t\tThrowable t = throwablesCollector.get(0);\n \t\t\tthrowablesCollector.stream().skip(1).forEach(t::addSuppressed);\n \t\t\tthrow t;\n \t\t}\n \n \t\treturn newContext;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8": {
			"type": "Ybodychange",
			"commitMessage": "Fixed double invocation of before/after each extensions in nested tests.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-14, 8:45 PM",
			"commitName": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-12-14, 2:56 PM",
			"commitNameOld": "30aa4cfa124dd4d987dcc3cb3aa482ed60108cee",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 0.24,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,31 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n+\n+\t\tTestExtensionRegistry newTestExtensionRegistry = populateNewTestExtensionRegistryFromExtendWith(testMethod,\n+\t\t\tcontext.getTestExtensionRegistry());\n+\n \t\tJUnit5EngineExecutionContext newContext = context.extend().withTestExtensionRegistry(\n-\t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n+\t\t\tnewTestExtensionRegistry).build();\n \n \t\tObject testInstance = context.getTestInstanceProvider().getTestInstance();\n \t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(context.getExtensionContext(),\n \t\t\tthis, testInstance);\n \n+\t\tinvokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n+\n \t\tcontext.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n \n-\t\tOptional<Throwable> throwable = invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n+\t\tList<Throwable> throwablesCollector = new LinkedList<>();\n+\t\tinvokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n \n-\t\tList<Throwable> throwables = new LinkedList<>();\n-\t\tthrowable.ifPresent(throwables::add);\n+\t\tcontext.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwablesCollector);\n \n-\t\tcontext.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwables);\n-\t\tif (!throwables.isEmpty()) {\n-\t\t\tThrowable t = throwables.get(0);\n-\t\t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n+\t\tinvokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n+\n+\t\tif (!throwablesCollector.isEmpty()) {\n+\t\t\tThrowable t = throwablesCollector.get(0);\n+\t\t\tthrowablesCollector.stream().skip(1).forEach(t::addSuppressed);\n \t\t\tthrow t;\n \t\t}\n \n \t\treturn newContext;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"30aa4cfa124dd4d987dcc3cb3aa482ed60108cee": {
			"type": "Ybodychange",
			"commitMessage": "Some refactoring in exception handling and callback argument names.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-14, 2:56 PM",
			"commitName": "30aa4cfa124dd4d987dcc3cb3aa482ed60108cee",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-12-12, 8:55 AM",
			"commitNameOld": "634890bff8f38128db31c244486d257b8ef729d7",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 2.25,
			"commitsBetweenForRepo": 20,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,16 +1,24 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n \t\tJUnit5EngineExecutionContext newContext = context.extend().withTestExtensionRegistry(\n \t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n \n \t\tObject testInstance = context.getTestInstanceProvider().getTestInstance();\n \t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(context.getExtensionContext(),\n \t\t\tthis, testInstance);\n \n \t\tcontext.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n \n \t\tOptional<Throwable> throwable = invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n \n-\t\tcontext.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n+\t\tList<Throwable> throwables = new LinkedList<>();\n+\t\tthrowable.ifPresent(throwables::add);\n+\n+\t\tcontext.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwables);\n+\t\tif (!throwables.isEmpty()) {\n+\t\t\tThrowable t = throwables.get(0);\n+\t\t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n+\t\t\tthrow t;\n+\t\t}\n \n \t\treturn newContext;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"634890bff8f38128db31c244486d257b8ef729d7": {
			"type": "Ybodychange",
			"commitMessage": "Added ClassBasedExtensionContext and getParent implementations\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nsynyx GmbH & Co. KG (http://www.synyx.de) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-12, 8:55 AM",
			"commitName": "634890bff8f38128db31c244486d257b8ef729d7",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-12-10, 5:39 AM",
			"commitNameOld": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 2.14,
			"commitsBetweenForRepo": 30,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,16 @@\n \tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n \t\tJUnit5EngineExecutionContext newContext = context.extend().withTestExtensionRegistry(\n \t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n \n \t\tObject testInstance = context.getTestInstanceProvider().getTestInstance();\n-\t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(this, testInstance);\n+\t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(context.getExtensionContext(),\n+\t\t\tthis, testInstance);\n \n \t\tcontext.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n \n \t\tOptional<Throwable> throwable = invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n \n \t\tcontext.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n \n \t\treturn newContext;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3f9c11b9326b7d3051cb2a50568cd91113a0c0da": {
			"type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
			"commitMessage": "Group discussion renaming results\n",
			"commitDate": "2015-12-10, 5:39 AM",
			"commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
			"commitAuthor": "Marc Philipp",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Group discussion renaming results\n",
					"commitDate": "2015-12-10, 5:39 AM",
					"commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-09, 2:00 PM",
					"commitNameOld": "b67bd2e32f8274fb0972e3a98157e2398140dcbf",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.65,
					"commitsBetweenForRepo": 3,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,15 +1,15 @@\n-\tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n-\t\tJUnit5Context newContext = context.extend().withTestExtensionRegistry(\n+\tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n+\t\tJUnit5EngineExecutionContext newContext = context.extend().withTestExtensionRegistry(\n \t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n \n \t\tObject testInstance = context.getTestInstanceProvider().getTestInstance();\n \t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(this, testInstance);\n \n \t\tcontext.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n \n \t\tOptional<Throwable> throwable = invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n \n \t\tcontext.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n \n \t\treturn newContext;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[context-JUnit5Context]",
						"newValue": "[context-JUnit5EngineExecutionContext]"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "Group discussion renaming results\n",
					"commitDate": "2015-12-10, 5:39 AM",
					"commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-09, 2:00 PM",
					"commitNameOld": "b67bd2e32f8274fb0972e3a98157e2398140dcbf",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.65,
					"commitsBetweenForRepo": 3,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,15 +1,15 @@\n-\tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n-\t\tJUnit5Context newContext = context.extend().withTestExtensionRegistry(\n+\tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n+\t\tJUnit5EngineExecutionContext newContext = context.extend().withTestExtensionRegistry(\n \t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n \n \t\tObject testInstance = context.getTestInstanceProvider().getTestInstance();\n \t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(this, testInstance);\n \n \t\tcontext.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n \n \t\tOptional<Throwable> throwable = invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n \n \t\tcontext.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n \n \t\treturn newContext;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "JUnit5Context",
						"newValue": "JUnit5EngineExecutionContext"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Group discussion renaming results\n",
					"commitDate": "2015-12-10, 5:39 AM",
					"commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-09, 2:00 PM",
					"commitNameOld": "b67bd2e32f8274fb0972e3a98157e2398140dcbf",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.65,
					"commitsBetweenForRepo": 3,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,15 +1,15 @@\n-\tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n-\t\tJUnit5Context newContext = context.extend().withTestExtensionRegistry(\n+\tpublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n+\t\tJUnit5EngineExecutionContext newContext = context.extend().withTestExtensionRegistry(\n \t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n \n \t\tObject testInstance = context.getTestInstanceProvider().getTestInstance();\n \t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(this, testInstance);\n \n \t\tcontext.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n \n \t\tOptional<Throwable> throwable = invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n \n \t\tcontext.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n \n \t\treturn newContext;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"11ece8b11085a01a95a10e7bf26e4eb51034ac00": {
			"type": "Ybodychange",
			"commitMessage": "Inject parameters into @BeforeEach and @AfterEach\n",
			"commitDate": "2015-12-09, 1:51 PM",
			"commitName": "11ece8b11085a01a95a10e7bf26e4eb51034ac00",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-09, 1:37 PM",
			"commitNameOld": "fc5ff8d87c124e43601f64da76668e516758a74a",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,15 @@\n \tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n \t\tJUnit5Context newContext = context.extend().withTestExtensionRegistry(\n \t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n \n \t\tObject testInstance = context.getTestInstanceProvider().getTestInstance();\n \t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(this, testInstance);\n \n \t\tcontext.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n \n-\t\tOptional<Throwable> throwable = invokeTestMethod(newContext, testExtensionContext);\n+\t\tOptional<Throwable> throwable = invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n \n \t\tcontext.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n \n \t\treturn newContext;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"fc5ff8d87c124e43601f64da76668e516758a74a": {
			"type": "Ybodychange",
			"commitMessage": "Execute @AfterEach methods in AfterEachCallback\n",
			"commitDate": "2015-12-09, 1:37 PM",
			"commitName": "fc5ff8d87c124e43601f64da76668e516758a74a",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-09, 1:16 PM",
			"commitNameOld": "efb867427dd0722262fea5c869ac37cd64ea0070",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,35 +1,15 @@\n \tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n-\t\tJUnit5Context myContext = context.extend().withTestExtensionRegistry(\n+\t\tJUnit5Context newContext = context.extend().withTestExtensionRegistry(\n \t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n \n-\t\tTestInstanceProvider provider = context.getTestInstanceProvider();\n-\t\tObject testInstance = provider.getTestInstance();\n+\t\tObject testInstance = context.getTestInstanceProvider().getTestInstance();\n \t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(this, testInstance);\n \n \t\tcontext.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n \n-\t\tList<Throwable> throwables = new LinkedList<>();\n-\t\ttry {\n-\t\t\tMethodContext methodContext = new MethodContextImpl(testInstance, testMethod);\n-\t\t\tnew MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n-\t\t}\n-\t\tcatch (Throwable t) {\n-\t\t\tthrowables.add(t);\n-\t\t}\n-\t\tfinally {\n-\t\t\tfor (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n-\t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n-\t\t\t\t\tthrowables.add(t);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tif (throwables.isEmpty()) {\n-\t\t\treturn myContext;\n-\t\t}\n-\t\tThrowable t = throwables.get(0);\n-\t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n-\t\tthrow t;\n+\t\tOptional<Throwable> throwable = invokeTestMethod(newContext, testExtensionContext);\n+\n+\t\tcontext.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n+\n+\t\treturn newContext;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"efb867427dd0722262fea5c869ac37cd64ea0070": {
			"type": "Ybodychange",
			"commitMessage": "Use Builder pattern to extend JUnit5Context\n",
			"commitDate": "2015-12-09, 1:16 PM",
			"commitName": "efb867427dd0722262fea5c869ac37cd64ea0070",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-09, 12:34 PM",
			"commitNameOld": "3cbb596f9b35b903e29675841eb20ab97e8cbb88",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,35 +1,35 @@\n \tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n-\t\tJUnit5Context myContext = context.withTestExtensionRegistry(\n-\t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry()));\n+\t\tJUnit5Context myContext = context.extend().withTestExtensionRegistry(\n+\t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n \n \t\tTestInstanceProvider provider = context.getTestInstanceProvider();\n \t\tObject testInstance = provider.getTestInstance();\n \t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(this, testInstance);\n \n \t\tcontext.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n \n \t\tList<Throwable> throwables = new LinkedList<>();\n \t\ttry {\n \t\t\tMethodContext methodContext = new MethodContextImpl(testInstance, testMethod);\n \t\t\tnew MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\tthrowables.add(t);\n \t\t}\n \t\tfinally {\n \t\t\tfor (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n \t\t\t\ttry {\n \t\t\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t\t\t}\n \t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tthrowables.add(t);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif (throwables.isEmpty()) {\n \t\t\treturn myContext;\n \t\t}\n \t\tThrowable t = throwables.get(0);\n \t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n \t\tthrow t;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3cbb596f9b35b903e29675841eb20ab97e8cbb88": {
			"type": "Ybodychange",
			"commitMessage": "Add MethodContext param to MethodParameterResolver\n",
			"commitDate": "2015-12-09, 12:34 PM",
			"commitName": "3cbb596f9b35b903e29675841eb20ab97e8cbb88",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-09, 5:44 AM",
			"commitNameOld": "1707de270bd5f59f4e93e080ef56e6f6460d03da",
			"commitAuthorOld": "JUnit Team",
			"daysBetweenCommits": 0.29,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,34 +1,35 @@\n \tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n \t\tJUnit5Context myContext = context.withTestExtensionRegistry(\n \t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry()));\n \n \t\tTestInstanceProvider provider = context.getTestInstanceProvider();\n \t\tObject testInstance = provider.getTestInstance();\n+\t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(this, testInstance);\n \n-\t\tcontext.getBeforeEachCallback().beforeEach(testInstance);\n+\t\tcontext.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n \n \t\tList<Throwable> throwables = new LinkedList<>();\n \t\ttry {\n-\t\t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(this, testInstance);\n-\t\t\tnew MethodInvoker(testMethod, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n+\t\t\tMethodContext methodContext = new MethodContextImpl(testInstance, testMethod);\n+\t\t\tnew MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\tthrowables.add(t);\n \t\t}\n \t\tfinally {\n \t\t\tfor (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n \t\t\t\ttry {\n \t\t\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t\t\t}\n \t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tthrowables.add(t);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif (throwables.isEmpty()) {\n \t\t\treturn myContext;\n \t\t}\n \t\tThrowable t = throwables.get(0);\n \t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n \t\tthrow t;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"1707de270bd5f59f4e93e080ef56e6f6460d03da": {
			"type": "Ybodychange",
			"commitMessage": "Separate ExtensionContext and subclasses\n",
			"commitDate": "2015-12-09, 5:44 AM",
			"commitName": "1707de270bd5f59f4e93e080ef56e6f6460d03da",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2015-12-09, 5:06 AM",
			"commitNameOld": "67ec62513564b48741925f79132f3fe6427e48b3",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,34 +1,34 @@\n \tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n \t\tJUnit5Context myContext = context.withTestExtensionRegistry(\n \t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry()));\n \n \t\tTestInstanceProvider provider = context.getTestInstanceProvider();\n \t\tObject testInstance = provider.getTestInstance();\n \n \t\tcontext.getBeforeEachCallback().beforeEach(testInstance);\n \n \t\tList<Throwable> throwables = new LinkedList<>();\n \t\ttry {\n-\t\t\tTestExecutionContext testExecutionContext = new TestExecutionContextImpl(this, myContext);\n-\t\t\tnew MethodInvoker(testMethod, testInstance, testExecutionContext).invoke();\n+\t\t\tTestExtensionContext testExtensionContext = new MethodBasedTestExtensionContext(this, testInstance);\n+\t\t\tnew MethodInvoker(testMethod, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\tthrowables.add(t);\n \t\t}\n \t\tfinally {\n \t\t\tfor (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n \t\t\t\ttry {\n \t\t\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t\t\t}\n \t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tthrowables.add(t);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif (throwables.isEmpty()) {\n \t\t\treturn myContext;\n \t\t}\n \t\tThrowable t = throwables.get(0);\n \t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n \t\tthrow t;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"67ec62513564b48741925f79132f3fe6427e48b3": {
			"type": "Ybodychange",
			"commitMessage": "Populate TestExtensionRegistry in JUnit5Context and call MethodParameterResolver\n",
			"commitDate": "2015-12-09, 5:06 AM",
			"commitName": "67ec62513564b48741925f79132f3fe6427e48b3",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-09, 2:56 AM",
			"commitNameOld": "fa681a536942811f712ca91be70f5510ca472020",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.09,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,34 @@\n \tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n+\t\tJUnit5Context myContext = context.withTestExtensionRegistry(\n+\t\t\tpopulateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry()));\n+\n \t\tTestInstanceProvider provider = context.getTestInstanceProvider();\n \t\tObject testInstance = provider.getTestInstance();\n+\n \t\tcontext.getBeforeEachCallback().beforeEach(testInstance);\n+\n \t\tList<Throwable> throwables = new LinkedList<>();\n \t\ttry {\n-\t\t\tReflectionUtils.invokeMethod(testMethod, testInstance);\n+\t\t\tTestExecutionContext testExecutionContext = new TestExecutionContextImpl(this, myContext);\n+\t\t\tnew MethodInvoker(testMethod, testInstance, testExecutionContext).invoke();\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\tthrowables.add(t);\n \t\t}\n \t\tfinally {\n \t\t\tfor (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n \t\t\t\ttry {\n \t\t\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t\t\t}\n \t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tthrowables.add(t);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif (throwables.isEmpty()) {\n-\t\t\treturn context;\n+\t\t\treturn myContext;\n \t\t}\n \t\tThrowable t = throwables.get(0);\n \t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n \t\tthrow t;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"fa681a536942811f712ca91be70f5510ca472020": {
			"type": "Ybodychange",
			"commitMessage": "Doubly nested @BeforeEach works\n",
			"commitDate": "2015-12-09, 2:56 AM",
			"commitName": "fa681a536942811f712ca91be70f5510ca472020",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-09, 1:08 AM",
			"commitNameOld": "470866bc19cac8717ac77b26efc1fe703bed264a",
			"commitAuthorOld": "JUnit Team",
			"daysBetweenCommits": 0.07,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,30 +1,28 @@\n \tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n \t\tTestInstanceProvider provider = context.getTestInstanceProvider();\n \t\tObject testInstance = provider.getTestInstance();\n-\t\tfor (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n-\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n-\t\t}\n+\t\tcontext.getBeforeEachCallback().beforeEach(testInstance);\n \t\tList<Throwable> throwables = new LinkedList<>();\n \t\ttry {\n \t\t\tReflectionUtils.invokeMethod(testMethod, testInstance);\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\tthrowables.add(t);\n \t\t}\n \t\tfinally {\n \t\t\tfor (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n \t\t\t\ttry {\n \t\t\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t\t\t}\n \t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tthrowables.add(t);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif (throwables.isEmpty()) {\n \t\t\treturn context;\n \t\t}\n \t\tThrowable t = throwables.get(0);\n \t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n \t\tthrow t;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"470866bc19cac8717ac77b26efc1fe703bed264a": {
			"type": "Ymultichange(Yfilerename,Ybodychange)",
			"commitMessage": "Reincarnate existing SpecificationResolver\n",
			"commitDate": "2015-12-09, 1:08 AM",
			"commitName": "470866bc19cac8717ac77b26efc1fe703bed264a",
			"commitAuthor": "JUnit Team",
			"subchanges": [
				{
					"type": "Yfilerename",
					"commitMessage": "Reincarnate existing SpecificationResolver\n",
					"commitDate": "2015-12-09, 1:08 AM",
					"commitName": "470866bc19cac8717ac77b26efc1fe703bed264a",
					"commitAuthor": "JUnit Team",
					"commitDateOld": "2015-12-08, 5:55 AM",
					"commitNameOld": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.8,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,30 +1,30 @@\n \tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n \t\tTestInstanceProvider provider = context.getTestInstanceProvider();\n \t\tObject testInstance = provider.getTestInstance();\n \t\tfor (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n \t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t}\n \t\tList<Throwable> throwables = new LinkedList<>();\n \t\ttry {\n-\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n+\t\t\tReflectionUtils.invokeMethod(testMethod, testInstance);\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\tthrowables.add(t);\n \t\t}\n \t\tfinally {\n \t\t\tfor (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n \t\t\t\ttry {\n \t\t\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t\t\t}\n \t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tthrowables.add(t);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif (throwables.isEmpty()) {\n \t\t\treturn context;\n \t\t}\n \t\tThrowable t = throwables.get(0);\n \t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n \t\tthrow t;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5MethodDescriptor.java",
						"newPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Reincarnate existing SpecificationResolver\n",
					"commitDate": "2015-12-09, 1:08 AM",
					"commitName": "470866bc19cac8717ac77b26efc1fe703bed264a",
					"commitAuthor": "JUnit Team",
					"commitDateOld": "2015-12-08, 5:55 AM",
					"commitNameOld": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.8,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,30 +1,30 @@\n \tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n \t\tTestInstanceProvider provider = context.getTestInstanceProvider();\n \t\tObject testInstance = provider.getTestInstance();\n \t\tfor (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n \t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t}\n \t\tList<Throwable> throwables = new LinkedList<>();\n \t\ttry {\n-\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n+\t\t\tReflectionUtils.invokeMethod(testMethod, testInstance);\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\tthrowables.add(t);\n \t\t}\n \t\tfinally {\n \t\t\tfor (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n \t\t\t\ttry {\n \t\t\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t\t\t}\n \t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tthrowables.add(t);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif (throwables.isEmpty()) {\n \t\t\treturn context;\n \t\t}\n \t\tThrowable t = throwables.get(0);\n \t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n \t\tthrow t;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"57b31220d25f59bb4aa4903dfee4b8ec2be4525e": {
			"type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
			"commitMessage": "TestEngine-specific context using type parameter\n",
			"commitDate": "2015-12-08, 5:55 AM",
			"commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
			"commitAuthor": "Marc Philipp",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "TestEngine-specific context using type parameter\n",
					"commitDate": "2015-12-08, 5:55 AM",
					"commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-08, 5:32 AM",
					"commitNameOld": "28ffd5ee9d1e996133445cac2256407f28380e91",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.02,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,30 +1,30 @@\n-\tpublic Context execute(Context context) throws Throwable {\n-\t\tTestInstanceProvider provider = context.get(\"TestInstanceProvider\", TestInstanceProvider.class);\n+\tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n+\t\tTestInstanceProvider provider = context.getTestInstanceProvider();\n \t\tObject testInstance = provider.getTestInstance();\n \t\tfor (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n \t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t}\n \t\tList<Throwable> throwables = new LinkedList<>();\n \t\ttry {\n \t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\tthrowables.add(t);\n \t\t}\n \t\tfinally {\n \t\t\tfor (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n \t\t\t\ttry {\n \t\t\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t\t\t}\n \t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tthrowables.add(t);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif (throwables.isEmpty()) {\n \t\t\treturn context;\n \t\t}\n \t\tThrowable t = throwables.get(0);\n \t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n \t\tthrow t;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[context-Context]",
						"newValue": "[context-JUnit5Context]"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "TestEngine-specific context using type parameter\n",
					"commitDate": "2015-12-08, 5:55 AM",
					"commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-08, 5:32 AM",
					"commitNameOld": "28ffd5ee9d1e996133445cac2256407f28380e91",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.02,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,30 +1,30 @@\n-\tpublic Context execute(Context context) throws Throwable {\n-\t\tTestInstanceProvider provider = context.get(\"TestInstanceProvider\", TestInstanceProvider.class);\n+\tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n+\t\tTestInstanceProvider provider = context.getTestInstanceProvider();\n \t\tObject testInstance = provider.getTestInstance();\n \t\tfor (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n \t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t}\n \t\tList<Throwable> throwables = new LinkedList<>();\n \t\ttry {\n \t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\tthrowables.add(t);\n \t\t}\n \t\tfinally {\n \t\t\tfor (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n \t\t\t\ttry {\n \t\t\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t\t\t}\n \t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tthrowables.add(t);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif (throwables.isEmpty()) {\n \t\t\treturn context;\n \t\t}\n \t\tThrowable t = throwables.get(0);\n \t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n \t\tthrow t;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "Context",
						"newValue": "JUnit5Context"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "TestEngine-specific context using type parameter\n",
					"commitDate": "2015-12-08, 5:55 AM",
					"commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-08, 5:32 AM",
					"commitNameOld": "28ffd5ee9d1e996133445cac2256407f28380e91",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.02,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,30 +1,30 @@\n-\tpublic Context execute(Context context) throws Throwable {\n-\t\tTestInstanceProvider provider = context.get(\"TestInstanceProvider\", TestInstanceProvider.class);\n+\tpublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n+\t\tTestInstanceProvider provider = context.getTestInstanceProvider();\n \t\tObject testInstance = provider.getTestInstance();\n \t\tfor (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n \t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t}\n \t\tList<Throwable> throwables = new LinkedList<>();\n \t\ttry {\n \t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\tthrowables.add(t);\n \t\t}\n \t\tfinally {\n \t\t\tfor (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n \t\t\t\ttry {\n \t\t\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n \t\t\t\t}\n \t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tthrowables.add(t);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif (throwables.isEmpty()) {\n \t\t\treturn context;\n \t\t}\n \t\tThrowable t = throwables.get(0);\n \t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n \t\tthrow t;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"28ffd5ee9d1e996133445cac2256407f28380e91": {
			"type": "Yintroduced",
			"commitMessage": "Spike tree-based \"implementation\" of JUnit5 engine\n",
			"commitDate": "2015-12-08, 5:32 AM",
			"commitName": "28ffd5ee9d1e996133445cac2256407f28380e91",
			"commitAuthor": "Marc Philipp",
			"diff": "@@ -0,0 +1,30 @@\n+\tpublic Context execute(Context context) throws Throwable {\n+\t\tTestInstanceProvider provider = context.get(\"TestInstanceProvider\", TestInstanceProvider.class);\n+\t\tObject testInstance = provider.getTestInstance();\n+\t\tfor (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n+\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n+\t\t}\n+\t\tList<Throwable> throwables = new LinkedList<>();\n+\t\ttry {\n+\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n+\t\t}\n+\t\tcatch (Throwable t) {\n+\t\t\tthrowables.add(t);\n+\t\t}\n+\t\tfinally {\n+\t\t\tfor (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n+\t\t\t\ttry {\n+\t\t\t\t\tReflectionUtils.invokeMethod(method, testInstance);\n+\t\t\t\t}\n+\t\t\t\tcatch (Throwable t) {\n+\t\t\t\t\tthrowables.add(t);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (throwables.isEmpty()) {\n+\t\t\treturn context;\n+\t\t}\n+\t\tThrowable t = throwables.get(0);\n+\t\tthrowables.stream().skip(1).forEach(t::addSuppressed);\n+\t\tthrow t;\n+\t}\n\\ No newline at end of file\n"
		}
	},
	"sha": "77cfe71e7f787c59626198e25350545f41e968bd"
}