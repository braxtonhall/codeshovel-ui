{
	"repo": "https://github.com/apache/commons-lang.git",
	"file": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
	"method": {
		"longName": "FastDatePrinter::parsePattern()",
		"startLine": 181,
		"methodName": "parsePattern",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "protected"
	},
	"history": {
		"4f82195afdc4279c05826fc20f8642bfdaaafec3": {
			"type": "Ybodychange",
			"commitMessage": "Remove redundant type arguments.",
			"commitDate": "2016-10-23, 11:52 AM",
			"commitName": "4f82195afdc4279c05826fc20f8642bfdaaafec3",
			"commitAuthor": "Gary Gregory",
			"commitDateOld": "2016-09-19, 5:21 AM",
			"commitNameOld": "0807eedad6aa9544d90b2e7cec103fb9c40b714d",
			"commitAuthorOld": "Benedikt Ritter",
			"daysBetweenCommits": 34.27,
			"commitsBetweenForRepo": 62,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,134 +1,134 @@\n     protected List<Rule> parsePattern() {\n         final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n-        final List<Rule> rules = new ArrayList<Rule>();\n+        final List<Rule> rules = new ArrayList<>();\n \n         final String[] ERAs = symbols.getEras();\n         final String[] months = symbols.getMonths();\n         final String[] shortMonths = symbols.getShortMonths();\n         final String[] weekdays = symbols.getWeekdays();\n         final String[] shortWeekdays = symbols.getShortWeekdays();\n         final String[] AmPmStrings = symbols.getAmPmStrings();\n \n         final int length = mPattern.length();\n         final int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             final String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             final int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n             case 'Y': // week year\n                 if (tokenLen == 2) {\n                     rule = TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n                 if (c == 'Y') {\n                     rule = new WeekYear((NumberRule) rule);\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'u': // day in week (number)\n                 rule = new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'X': // ISO 8601 \n                 rule = Iso8601_Rule.getRule(tokenLen);\n                 break;    \n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen == 2) {\n                     rule = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 final String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"afc942c7b2bc0317cb549a3fd05080646e7274fc": {
			"type": "Ybodychange",
			"commitMessage": "LANG-1192: FastDateFormat support of the week-year component (uppercase 'Y')\n",
			"commitDate": "2015-12-25, 1:44 PM",
			"commitName": "afc942c7b2bc0317cb549a3fd05080646e7274fc",
			"commitAuthor": "Chas Honton",
			"commitDateOld": "2015-12-17, 7:52 AM",
			"commitNameOld": "1002c9e243883654f9c1e6beae643fb4e72fc172",
			"commitAuthorOld": "Chas Honton",
			"daysBetweenCommits": 8.24,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,130 +1,134 @@\n     protected List<Rule> parsePattern() {\n         final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         final List<Rule> rules = new ArrayList<Rule>();\n \n         final String[] ERAs = symbols.getEras();\n         final String[] months = symbols.getMonths();\n         final String[] shortMonths = symbols.getShortMonths();\n         final String[] weekdays = symbols.getWeekdays();\n         final String[] shortWeekdays = symbols.getShortWeekdays();\n         final String[] AmPmStrings = symbols.getAmPmStrings();\n \n         final int length = mPattern.length();\n         final int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             final String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             final int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n+            case 'Y': // week year\n                 if (tokenLen == 2) {\n                     rule = TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n+                if (c == 'Y') {\n+                    rule = new WeekYear((NumberRule) rule);\n+                }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'u': // day in week (number)\n                 rule = new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'X': // ISO 8601 \n                 rule = Iso8601_Rule.getRule(tokenLen);\n                 break;    \n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen == 2) {\n                     rule = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 final String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"1002c9e243883654f9c1e6beae643fb4e72fc172": {
			"type": "Ybodychange",
			"commitMessage": "revert LANG-1192 while investigating travis failures\n",
			"commitDate": "2015-12-17, 7:52 AM",
			"commitName": "1002c9e243883654f9c1e6beae643fb4e72fc172",
			"commitAuthor": "Chas Honton",
			"commitDateOld": "2015-12-13, 5:38 PM",
			"commitNameOld": "2fa0b168d62a07365b2787d0ed97fa1c2cfb673b",
			"commitAuthorOld": "Chas Honton",
			"daysBetweenCommits": 3.59,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,134 +1,130 @@\n     protected List<Rule> parsePattern() {\n         final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         final List<Rule> rules = new ArrayList<Rule>();\n \n         final String[] ERAs = symbols.getEras();\n         final String[] months = symbols.getMonths();\n         final String[] shortMonths = symbols.getShortMonths();\n         final String[] weekdays = symbols.getWeekdays();\n         final String[] shortWeekdays = symbols.getShortWeekdays();\n         final String[] AmPmStrings = symbols.getAmPmStrings();\n \n         final int length = mPattern.length();\n         final int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             final String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             final int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n-            case 'Y': // week year\n                 if (tokenLen == 2) {\n                     rule = TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n-                if (c == 'Y') {\n-                    rule = new WeekYear((NumberRule) rule);\n-                }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'u': // day in week (number)\n                 rule = new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'X': // ISO 8601 \n                 rule = Iso8601_Rule.getRule(tokenLen);\n                 break;    \n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen == 2) {\n                     rule = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 final String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"2fa0b168d62a07365b2787d0ed97fa1c2cfb673b": {
			"type": "Ybodychange",
			"commitMessage": "LANG-1192: FastDateFormat support of the week-year component (uppercase 'Y')\n",
			"commitDate": "2015-12-13, 5:38 PM",
			"commitName": "2fa0b168d62a07365b2787d0ed97fa1c2cfb673b",
			"commitAuthor": "Chas Honton",
			"commitDateOld": "2015-12-11, 9:36 PM",
			"commitNameOld": "2ebf9a21d2dc99ab2f434111cac9dcd6da99d574",
			"commitAuthorOld": "Chas Honton",
			"daysBetweenCommits": 1.83,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,130 +1,134 @@\n     protected List<Rule> parsePattern() {\n         final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         final List<Rule> rules = new ArrayList<Rule>();\n \n         final String[] ERAs = symbols.getEras();\n         final String[] months = symbols.getMonths();\n         final String[] shortMonths = symbols.getShortMonths();\n         final String[] weekdays = symbols.getWeekdays();\n         final String[] shortWeekdays = symbols.getShortWeekdays();\n         final String[] AmPmStrings = symbols.getAmPmStrings();\n \n         final int length = mPattern.length();\n         final int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             final String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             final int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n+            case 'Y': // week year\n                 if (tokenLen == 2) {\n                     rule = TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n+                if (c == 'Y') {\n+                    rule = new WeekYear((NumberRule) rule);\n+                }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'u': // day in week (number)\n                 rule = new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'X': // ISO 8601 \n                 rule = Iso8601_Rule.getRule(tokenLen);\n                 break;    \n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen == 2) {\n                     rule = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 final String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"2ebf9a21d2dc99ab2f434111cac9dcd6da99d574": {
			"type": "Ybodychange",
			"commitMessage": "LANG-1192 partial: implement format 'u' for FastDateFormat, day number of week\n",
			"commitDate": "2015-12-11, 9:36 PM",
			"commitName": "2ebf9a21d2dc99ab2f434111cac9dcd6da99d574",
			"commitAuthor": "Chas Honton",
			"commitDateOld": "2015-10-14, 4:46 AM",
			"commitNameOld": "6d3796e64bdd5f3f4857bfca6982e6ecf98a2b33",
			"commitAuthorOld": "Michael Osipov",
			"daysBetweenCommits": 58.74,
			"commitsBetweenForRepo": 25,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,127 +1,130 @@\n     protected List<Rule> parsePattern() {\n         final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         final List<Rule> rules = new ArrayList<Rule>();\n \n         final String[] ERAs = symbols.getEras();\n         final String[] months = symbols.getMonths();\n         final String[] shortMonths = symbols.getShortMonths();\n         final String[] weekdays = symbols.getWeekdays();\n         final String[] shortWeekdays = symbols.getShortWeekdays();\n         final String[] AmPmStrings = symbols.getAmPmStrings();\n \n         final int length = mPattern.length();\n         final int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             final String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             final int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen == 2) {\n                     rule = TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n+            case 'u': // day in week (number)\n+                rule = new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n+                break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'X': // ISO 8601 \n                 rule = Iso8601_Rule.getRule(tokenLen);\n                 break;    \n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen == 2) {\n                     rule = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 final String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0add1e8975336c65513b26123d48b221e2515ddc": {
			"type": "Ybodychange",
			"commitMessage": "ZZ format not displaying Z for UTC with OpenJDK 6\n",
			"commitDate": "2015-05-02, 12:21 PM",
			"commitName": "0add1e8975336c65513b26123d48b221e2515ddc",
			"commitAuthor": "Chas Honton",
			"commitDateOld": "2015-04-30, 8:21 PM",
			"commitNameOld": "775203dd2cfce017910d04c58a0b1b4e0a64923c",
			"commitAuthorOld": "Chas Honton",
			"daysBetweenCommits": 1.67,
			"commitsBetweenForRepo": 16,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,127 +1,127 @@\n     protected List<Rule> parsePattern() {\n         final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         final List<Rule> rules = new ArrayList<Rule>();\n \n         final String[] ERAs = symbols.getEras();\n         final String[] months = symbols.getMonths();\n         final String[] shortMonths = symbols.getShortMonths();\n         final String[] weekdays = symbols.getWeekdays();\n         final String[] shortWeekdays = symbols.getShortWeekdays();\n         final String[] AmPmStrings = symbols.getAmPmStrings();\n \n         final int length = mPattern.length();\n         final int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             final String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             final int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen == 2) {\n                     rule = TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'X': // ISO 8601 \n                 rule = Iso8601_Rule.getRule(tokenLen);\n                 break;    \n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen == 2) {\n-                    rule = TimeZoneNumberRule.INSTANCE_ISO_8601;\n+                    rule = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 final String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"bbfa8eb7df16baf17239b412ff7efa11c7e0926b": {
			"type": "Ybodychange",
			"commitMessage": "LANG-1101 FastDateParser and FastDatePrinter support 'X' format\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1668511 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2015-03-22, 8:33 PM",
			"commitName": "bbfa8eb7df16baf17239b412ff7efa11c7e0926b",
			"commitAuthor": "Chas Honton",
			"commitDateOld": "2015-03-13, 2:29 PM",
			"commitNameOld": "8aa1b44ada759e7948f87f55bb29ab87b5eb5469",
			"commitAuthorOld": "Benedikt Ritter",
			"daysBetweenCommits": 9.25,
			"commitsBetweenForRepo": 13,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,124 +1,127 @@\n     protected List<Rule> parsePattern() {\n         final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         final List<Rule> rules = new ArrayList<Rule>();\n \n         final String[] ERAs = symbols.getEras();\n         final String[] months = symbols.getMonths();\n         final String[] shortMonths = symbols.getShortMonths();\n         final String[] weekdays = symbols.getWeekdays();\n         final String[] shortWeekdays = symbols.getShortWeekdays();\n         final String[] AmPmStrings = symbols.getAmPmStrings();\n \n         final int length = mPattern.length();\n         final int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             final String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             final int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen == 2) {\n                     rule = TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n+            case 'X': // ISO 8601 \n+            \trule = Iso8601_Rule.getRule(tokenLen);\n+                break;    \n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen == 2) {\n                     rule = TimeZoneNumberRule.INSTANCE_ISO_8601;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 final String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"22b6781a0b96418198dc9146e5191e51d381102f": {
			"type": "Ybodychange",
			"commitMessage": "Added missing support for ISO 8601 parsing and printing using \"ZZ\" pattern (code now matches Javadoc). Addresses LANG-1000.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1628061 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2014-09-28, 4:11 AM",
			"commitName": "22b6781a0b96418198dc9146e5191e51d381102f",
			"commitAuthor": "Duncan Jones",
			"commitDateOld": "2014-04-30, 3:49 PM",
			"commitNameOld": "b4b51a8fc9eed7274a045b2f3192d77782b0e4fa",
			"commitAuthorOld": "Gary D. Gregory",
			"daysBetweenCommits": 150.52,
			"commitsBetweenForRepo": 91,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,122 +1,124 @@\n     protected List<Rule> parsePattern() {\n         final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         final List<Rule> rules = new ArrayList<Rule>();\n \n         final String[] ERAs = symbols.getEras();\n         final String[] months = symbols.getMonths();\n         final String[] shortMonths = symbols.getShortMonths();\n         final String[] weekdays = symbols.getWeekdays();\n         final String[] shortWeekdays = symbols.getShortWeekdays();\n         final String[] AmPmStrings = symbols.getAmPmStrings();\n \n         final int length = mPattern.length();\n         final int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             final String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             final int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen == 2) {\n                     rule = TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else if (tokenLen == 2) {\n+                    rule = TimeZoneNumberRule.INSTANCE_ISO_8601;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 final String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"5292526e476ffbb19c6613a98464054236c86ace": {
			"type": "Ybodychange",
			"commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1436770 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2013-01-22, 12:09 AM",
			"commitName": "5292526e476ffbb19c6613a98464054236c86ace",
			"commitAuthor": "Gary D. Gregory",
			"commitDateOld": "2013-01-22, 12:07 AM",
			"commitNameOld": "5bd622dab027ef37001a630a7c825c5b8c19d1db",
			"commitAuthorOld": "Gary D. Gregory",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,122 +1,122 @@\n     protected List<Rule> parsePattern() {\n-        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n-        List<Rule> rules = new ArrayList<Rule>();\n+        final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n+        final List<Rule> rules = new ArrayList<Rule>();\n \n-        String[] ERAs = symbols.getEras();\n-        String[] months = symbols.getMonths();\n-        String[] shortMonths = symbols.getShortMonths();\n-        String[] weekdays = symbols.getWeekdays();\n-        String[] shortWeekdays = symbols.getShortWeekdays();\n-        String[] AmPmStrings = symbols.getAmPmStrings();\n+        final String[] ERAs = symbols.getEras();\n+        final String[] months = symbols.getMonths();\n+        final String[] shortMonths = symbols.getShortMonths();\n+        final String[] weekdays = symbols.getWeekdays();\n+        final String[] shortWeekdays = symbols.getShortWeekdays();\n+        final String[] AmPmStrings = symbols.getAmPmStrings();\n \n-        int length = mPattern.length();\n-        int[] indexRef = new int[1];\n+        final int length = mPattern.length();\n+        final int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n-            String token = parseToken(mPattern, indexRef);\n+            final String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n-            int tokenLen = token.length();\n+            final int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n-            char c = token.charAt(0);\n+            final char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen == 2) {\n                     rule = TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n-                String sub = token.substring(1);\n+                final String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"cc340ad2eb6a783f6abe8d02f2c32bb02b01505c": {
			"type": "Ymovefromfile",
			"commitMessage": "Applying Chas Honton's implementation of DateParser and subsequent integration into FastDateFormat and the time package. See LANG-462. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1236055 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2012-01-26, 12:00 AM",
			"commitName": "cc340ad2eb6a783f6abe8d02f2c32bb02b01505c",
			"commitAuthor": "Henri Yandell",
			"commitDateOld": "2012-01-23, 10:47 AM",
			"commitNameOld": "dfa6882a3b9ae6d17c386312ad5e5902d852fb4e",
			"commitAuthorOld": "Matthew Jason Benson",
			"daysBetweenCommits": 2.55,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
				"newPath": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
				"oldMethodName": "parsePattern",
				"newMethodName": "parsePattern"
			}
		},
		"34a6449c90a3b6074111a6bcbd31ad00ac1570f3": {
			"type": "Ybodychange",
			"commitMessage": "Adjust FastDateFormat for Java 7 behavior regarding format of the year pattern (LANG-719).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1146138 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2011-07-13, 11:01 AM",
			"commitName": "34a6449c90a3b6074111a6bcbd31ad00ac1570f3",
			"commitAuthor": "Joerg Schaible",
			"commitDateOld": "2011-05-04, 5:11 AM",
			"commitNameOld": "bfb76fae2f43d883d60b402e2114159cc198513d",
			"commitAuthorOld": "Sebastian Bazley",
			"daysBetweenCommits": 70.24,
			"commitsBetweenForRepo": 78,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,122 +1,122 @@\n     protected List<Rule> parsePattern() {\n         DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         List<Rule> rules = new ArrayList<Rule>();\n \n         String[] ERAs = symbols.getEras();\n         String[] months = symbols.getMonths();\n         String[] shortMonths = symbols.getShortMonths();\n         String[] weekdays = symbols.getWeekdays();\n         String[] shortWeekdays = symbols.getShortWeekdays();\n         String[] AmPmStrings = symbols.getAmPmStrings();\n \n         int length = mPattern.length();\n         int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n-                if (tokenLen >= 4) {\n-                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n-                } else {\n+                if (tokenLen == 2) {\n                     rule = TwoDigitYearField.INSTANCE;\n+                } else {\n+                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9ef322c33c465d8ae9a1d854dfa977f47f629009": {
			"type": "Ybodychange",
			"commitMessage": "Refactoring FastDateFormat per LANG-462 to use the FormatCache class created for an upcoming DateParser functionality. I've kept FormatCache package-private for now. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1095299 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2011-04-20, 12:51 AM",
			"commitName": "9ef322c33c465d8ae9a1d854dfa977f47f629009",
			"commitAuthor": "Henri Yandell",
			"commitDateOld": "2011-04-04, 11:31 PM",
			"commitNameOld": "3a0c152c22b6e96fc809fdee2d6ea5b816a139e6",
			"commitAuthorOld": "Henri Yandell",
			"daysBetweenCommits": 15.06,
			"commitsBetweenForRepo": 88,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,122 +1,122 @@\n     protected List<Rule> parsePattern() {\n         DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         List<Rule> rules = new ArrayList<Rule>();\n \n         String[] ERAs = symbols.getEras();\n         String[] months = symbols.getMonths();\n         String[] shortMonths = symbols.getShortMonths();\n         String[] weekdays = symbols.getWeekdays();\n         String[] shortWeekdays = symbols.getShortWeekdays();\n         String[] AmPmStrings = symbols.getAmPmStrings();\n \n         int length = mPattern.length();\n         int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen >= 4) {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule = TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n-                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n+                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"fc5c081e22a61bb5a6810af302be3f22f7966df4": {
			"type": "Yfilerename",
			"commitMessage": "Move main source to src/main/java\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@895322 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2010-01-02, 7:11 PM",
			"commitName": "fc5c081e22a61bb5a6810af302be3f22f7966df4",
			"commitAuthor": "Paul C. Benedict Jr",
			"commitDateOld": "2010-01-02, 7:09 PM",
			"commitNameOld": "6b32246f5f9f77c74b32a5290cdbdd4e0f5c71c6",
			"commitAuthorOld": "Paul C. Benedict Jr",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
				"newPath": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java"
			}
		},
		"debc02c6d9b94c717b4182ae4dd7a97d47293a52": {
			"type": "Yfilerename",
			"commitMessage": "Changing directory name from lang to lang3. Build will fail (probably) until Java code is changed in subsequent commit. LANG-563\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@889202 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2009-12-10, 4:33 AM",
			"commitName": "debc02c6d9b94c717b4182ae4dd7a97d47293a52",
			"commitAuthor": "Henri Yandell",
			"commitDateOld": "2009-12-10, 4:31 AM",
			"commitNameOld": "375d7d0954cae60c4c7292cc65abbc972178857c",
			"commitAuthorOld": "Henri Yandell",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
				"newPath": "src/java/org/apache/commons/lang3/time/FastDateFormat.java"
			}
		},
		"654fb75d80a63fa551ced73c3b652f4120573590": {
			"type": "Ymultichange(Yreturntypechange,Ybodychange)",
			"commitMessage": "Genericize some more classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@754810 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2009-03-15, 9:35 PM",
			"commitName": "654fb75d80a63fa551ced73c3b652f4120573590",
			"commitAuthor": "Sebastian Bazley",
			"subchanges": [
				{
					"type": "Yreturntypechange",
					"commitMessage": "Genericize some more classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@754810 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2009-03-15, 9:35 PM",
					"commitName": "654fb75d80a63fa551ced73c3b652f4120573590",
					"commitAuthor": "Sebastian Bazley",
					"commitDateOld": "2009-03-14, 8:57 AM",
					"commitNameOld": "7585da946c5bab3fd60188718d0be17ee6fa59e2",
					"commitAuthorOld": "Sebastian Bazley",
					"daysBetweenCommits": 1.53,
					"commitsBetweenForRepo": 47,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,122 +1,122 @@\n-    protected List parsePattern() {\n+    protected List<Rule> parsePattern() {\n         DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n-        List rules = new ArrayList();\n+        List<Rule> rules = new ArrayList<Rule>();\n \n         String[] ERAs = symbols.getEras();\n         String[] months = symbols.getMonths();\n         String[] shortMonths = symbols.getShortMonths();\n         String[] weekdays = symbols.getWeekdays();\n         String[] shortWeekdays = symbols.getShortWeekdays();\n         String[] AmPmStrings = symbols.getAmPmStrings();\n \n         int length = mPattern.length();\n         int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen >= 4) {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule = TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "List",
						"newValue": "List<Rule>"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Genericize some more classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@754810 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2009-03-15, 9:35 PM",
					"commitName": "654fb75d80a63fa551ced73c3b652f4120573590",
					"commitAuthor": "Sebastian Bazley",
					"commitDateOld": "2009-03-14, 8:57 AM",
					"commitNameOld": "7585da946c5bab3fd60188718d0be17ee6fa59e2",
					"commitAuthorOld": "Sebastian Bazley",
					"daysBetweenCommits": 1.53,
					"commitsBetweenForRepo": 47,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,122 +1,122 @@\n-    protected List parsePattern() {\n+    protected List<Rule> parsePattern() {\n         DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n-        List rules = new ArrayList();\n+        List<Rule> rules = new ArrayList<Rule>();\n \n         String[] ERAs = symbols.getEras();\n         String[] months = symbols.getMonths();\n         String[] shortMonths = symbols.getShortMonths();\n         String[] weekdays = symbols.getWeekdays();\n         String[] shortWeekdays = symbols.getShortWeekdays();\n         String[] AmPmStrings = symbols.getAmPmStrings();\n \n         int length = mPattern.length();\n         int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen >= 4) {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule = TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"3aab5ae02692d3ceac2618ec0b4514787f4b17d7": {
			"type": "Ybodychange",
			"commitMessage": "Fix for zero-padding of years.\n\nA commented out set of failing tests are added to the Unit Test and need to be addressed.\n\nSubmitted by:\tJerson Chua\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137932 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2004-09-11, 11:03 PM",
			"commitName": "3aab5ae02692d3ceac2618ec0b4514787f4b17d7",
			"commitAuthor": "Henri Yandell",
			"commitDateOld": "2004-07-05, 4:37 PM",
			"commitNameOld": "4301e384b8773c427609fdd2b38b8db2c78e10d6",
			"commitAuthorOld": "Stephen Colebourne",
			"daysBetweenCommits": 68.27,
			"commitsBetweenForRepo": 61,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,122 +1,122 @@\n     protected List parsePattern() {\n         DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         List rules = new ArrayList();\n \n         String[] ERAs = symbols.getEras();\n         String[] months = symbols.getMonths();\n         String[] shortMonths = symbols.getShortMonths();\n         String[] weekdays = symbols.getWeekdays();\n         String[] shortWeekdays = symbols.getShortWeekdays();\n         String[] AmPmStrings = symbols.getAmPmStrings();\n \n         int length = mPattern.length();\n         int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen >= 4) {\n-                    rule = UnpaddedNumberField.INSTANCE_YEAR;\n+                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule = TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"247c97f507c7ce3556f040624b6af28e911e6dfb": {
			"type": "Ybodychange",
			"commitMessage": "Remove unneeded String constructor as found by findBugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137495 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2003-07-25, 4:53 PM",
			"commitName": "247c97f507c7ce3556f040624b6af28e911e6dfb",
			"commitAuthor": "Stephen Colebourne",
			"commitDateOld": "2003-07-21, 6:09 PM",
			"commitNameOld": "e00c4a254616e100b02b0877f13077a30edca0ae",
			"commitAuthorOld": "Stephen Colebourne",
			"daysBetweenCommits": 3.95,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,122 +1,122 @@\n     protected List parsePattern() {\n         DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         List rules = new ArrayList();\n \n         String[] ERAs = symbols.getEras();\n         String[] months = symbols.getMonths();\n         String[] shortMonths = symbols.getShortMonths();\n         String[] weekdays = symbols.getWeekdays();\n         String[] shortWeekdays = symbols.getShortWeekdays();\n         String[] AmPmStrings = symbols.getAmPmStrings();\n \n         int length = mPattern.length();\n         int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n             String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen >= 4) {\n                     rule = UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n                     rule = TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n                     rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n-                    rule = new StringLiteral(new String(sub));\n+                    rule = new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"73ee6c3d270a91bd447f732b24c4d65169b0c8d6": {
			"type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
			"commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2003-06-08, 5:14 PM",
			"commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
			"commitAuthor": "Stephen Colebourne",
			"subchanges": [
				{
					"type": "Yrename",
					"commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2003-06-08, 5:14 PM",
					"commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2003-05-21, 5:39 PM",
					"commitNameOld": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 17.98,
					"commitsBetweenForRepo": 35,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,114 +1,122 @@\n-    private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+    protected List parsePattern() {\n+        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         List rules = new ArrayList();\n \n         String[] ERAs = symbols.getEras();\n         String[] months = symbols.getMonths();\n         String[] shortMonths = symbols.getShortMonths();\n         String[] weekdays = symbols.getWeekdays();\n         String[] shortWeekdays = symbols.getShortWeekdays();\n         String[] AmPmStrings = symbols.getAmPmStrings();\n \n-        int length = pattern.length();\n+        int length = mPattern.length();\n         int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n-            String token = parseToken(pattern, indexRef);\n+            String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen >= 4) {\n-                    rule = new UnpaddedNumberField(Calendar.YEAR);\n+                    rule = UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule = new TwoDigitYearField();\n+                    rule = TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n-                    rule = new TwoDigitMonthField();\n+                    rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule = new UnpaddedMonthField();\n+                    rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n-                    rule = new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule = new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case 'Z': // time zone (value)\n+                if (tokenLen == 1) {\n+                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "parse",
						"newValue": "parsePattern"
					}
				},
				{
					"type": "Yparameterchange",
					"commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2003-06-08, 5:14 PM",
					"commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2003-05-21, 5:39 PM",
					"commitNameOld": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 17.98,
					"commitsBetweenForRepo": 35,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,114 +1,122 @@\n-    private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+    protected List parsePattern() {\n+        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         List rules = new ArrayList();\n \n         String[] ERAs = symbols.getEras();\n         String[] months = symbols.getMonths();\n         String[] shortMonths = symbols.getShortMonths();\n         String[] weekdays = symbols.getWeekdays();\n         String[] shortWeekdays = symbols.getShortWeekdays();\n         String[] AmPmStrings = symbols.getAmPmStrings();\n \n-        int length = pattern.length();\n+        int length = mPattern.length();\n         int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n-            String token = parseToken(pattern, indexRef);\n+            String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen >= 4) {\n-                    rule = new UnpaddedNumberField(Calendar.YEAR);\n+                    rule = UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule = new TwoDigitYearField();\n+                    rule = TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n-                    rule = new TwoDigitMonthField();\n+                    rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule = new UnpaddedMonthField();\n+                    rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n-                    rule = new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule = new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case 'Z': // time zone (value)\n+                if (tokenLen == 1) {\n+                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[pattern-String, timeZone-TimeZone, locale-Locale, symbols-DateFormatSymbols]",
						"newValue": "[]"
					}
				},
				{
					"type": "Ymodifierchange",
					"commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2003-06-08, 5:14 PM",
					"commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2003-05-21, 5:39 PM",
					"commitNameOld": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 17.98,
					"commitsBetweenForRepo": 35,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,114 +1,122 @@\n-    private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+    protected List parsePattern() {\n+        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         List rules = new ArrayList();\n \n         String[] ERAs = symbols.getEras();\n         String[] months = symbols.getMonths();\n         String[] shortMonths = symbols.getShortMonths();\n         String[] weekdays = symbols.getWeekdays();\n         String[] shortWeekdays = symbols.getShortWeekdays();\n         String[] AmPmStrings = symbols.getAmPmStrings();\n \n-        int length = pattern.length();\n+        int length = mPattern.length();\n         int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n-            String token = parseToken(pattern, indexRef);\n+            String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen >= 4) {\n-                    rule = new UnpaddedNumberField(Calendar.YEAR);\n+                    rule = UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule = new TwoDigitYearField();\n+                    rule = TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n-                    rule = new TwoDigitMonthField();\n+                    rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule = new UnpaddedMonthField();\n+                    rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n-                    rule = new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule = new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case 'Z': // time zone (value)\n+                if (tokenLen == 1) {\n+                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[private, static]",
						"newValue": "[protected]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2003-06-08, 5:14 PM",
					"commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2003-05-21, 5:39 PM",
					"commitNameOld": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 17.98,
					"commitsBetweenForRepo": 35,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,114 +1,122 @@\n-    private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+    protected List parsePattern() {\n+        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         List rules = new ArrayList();\n \n         String[] ERAs = symbols.getEras();\n         String[] months = symbols.getMonths();\n         String[] shortMonths = symbols.getShortMonths();\n         String[] weekdays = symbols.getWeekdays();\n         String[] shortWeekdays = symbols.getShortWeekdays();\n         String[] AmPmStrings = symbols.getAmPmStrings();\n \n-        int length = pattern.length();\n+        int length = mPattern.length();\n         int[] indexRef = new int[1];\n \n         for (int i = 0; i < length; i++) {\n             indexRef[0] = i;\n-            String token = parseToken(pattern, indexRef);\n+            String token = parseToken(mPattern, indexRef);\n             i = indexRef[0];\n \n             int tokenLen = token.length();\n             if (tokenLen == 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c = token.charAt(0);\n \n             switch (c) {\n             case 'G': // era designator (text)\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n                 if (tokenLen >= 4) {\n-                    rule = new UnpaddedNumberField(Calendar.YEAR);\n+                    rule = UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule = new TwoDigitYearField();\n+                    rule = TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n                     rule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n-                    rule = new TwoDigitMonthField();\n+                    rule = TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule = new UnpaddedMonthField();\n+                    rule = UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case 'd': // day in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case 'h': // hour in am/pm (number, 1..12)\n                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case 'H': // hour in day (number, 0..23)\n                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case 'm': // minute in hour (number)\n                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case 's': // second in minute (number)\n                 rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case 'S': // millisecond (number)\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case 'F': // day of week in month (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case 'w': // week in year (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case 'W': // week in month (number)\n                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case 'a': // am/pm marker (text)\n                 rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case 'k': // hour in day (1..24)\n                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case 'K': // hour in am/pm (0..11)\n                 rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case 'z': // time zone (text)\n                 if (tokenLen >= 4) {\n-                    rule = new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule = new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case 'Z': // time zone (value)\n+                if (tokenLen == 1) {\n+                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case '\\'': // literal text\n                 String sub = token.substring(1);\n                 if (sub.length() == 1) {\n                     rule = new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule = new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"a99f7965b34b8dd0532c8d6f5e592d990ca220fc": {
			"type": "Yintroduced",
			"commitMessage": "A thread-safe, faster version of java.text's DateFormat. While JODA contains\nbetter, this version is religion-free.\n\nPermission given by Brian S O'Neill:\nhttp://archives.apache.org/eyebrowse/ReadMsg?listName=commons-dev@jakarta.apache.org&msgNo=20612\n\nSubmitted by:\tSean Schofield\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137221 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2003-01-07, 12:55 PM",
			"commitName": "a99f7965b34b8dd0532c8d6f5e592d990ca220fc",
			"commitAuthor": "Henri Yandell"
		}
	},
	"sha": "a36c903d4f1065bc59f5e6d2bb0f9d92a5e71d83"
}