{
	"repo": "https://github.com/spring-projects/spring-framework.git",
	"file": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
	"method": {
		"longName": "ServletHttpHandlerAdapter::service(ServletRequest request, ServletResponse response)",
		"startLine": 158,
		"methodName": "service",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "public"
	},
	"history": {
		"5dc49b16ea21ebac20d124d929f872d5aa060254": {
			"type": "Ybodychange",
			"commitMessage": "Correlated messages at HTTP adapter + WebSocket level\n\nIssue: SPR-16966\n",
			"commitDate": "2018-07-06, 1:44 PM",
			"commitName": "5dc49b16ea21ebac20d124d929f872d5aa060254",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2018-06-28, 2:28 AM",
			"commitNameOld": "e0480f75ac4e0367a053eabd3a07c3fa34eccf61",
			"commitAuthorOld": "Phillip Webb",
			"daysBetweenCommits": 8.47,
			"commitsBetweenForRepo": 96,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,36 +1,38 @@\n \tpublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n \n \t\tif (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n \t\t\tThrowable ex = (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n \t\t\tthrow new ServletException(\"Failed to create response content\", ex);\n \t\t}\n \n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \t\tasyncContext.setTimeout(-1);\n \n-\t\tServerHttpRequest httpRequest;\n+\t\tServletServerHttpRequest httpRequest;\n \t\ttry {\n \t\t\thttpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n \t\t}\n \t\tcatch (URISyntaxException ex) {\n \t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(\"Failed to get request  URL: \" + ex.getMessage());\n \t\t\t}\n \t\t\t((HttpServletResponse) response).setStatus(400);\n \t\t\tasyncContext.complete();\n \t\t\treturn;\n \t\t}\n-\t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n+\n+\t\tServerHttpResponse httpResponse =\n+\t\t\t\tcreateResponse(((HttpServletResponse) response), asyncContext, httpRequest);\n \n \t\tif (httpRequest.getMethod() == HttpMethod.HEAD) {\n \t\t\thttpResponse = new HttpHeadResponseDecorator(httpResponse);\n \t\t}\n \n \t\tAtomicBoolean isCompleted = new AtomicBoolean();\n-\t\tHandlerResultAsyncListener listener = new HandlerResultAsyncListener(isCompleted);\n+\t\tHandlerResultAsyncListener listener = new HandlerResultAsyncListener(isCompleted, httpRequest);\n \t\tasyncContext.addListener(listener);\n \n-\t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext, isCompleted);\n+\t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext, isCompleted, httpRequest);\n \t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"900bc8a2e341277296a463c7b5db4abb944e14d7": {
			"type": "Ybodychange",
			"commitMessage": "Logging improvements for WebFlux\n\nIssue: SPR-16898\n",
			"commitDate": "2018-06-22, 8:44 PM",
			"commitName": "900bc8a2e341277296a463c7b5db4abb944e14d7",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2018-04-30, 7:02 PM",
			"commitNameOld": "8d157cb5b54c8fc2af116ef62831ef35a4a95a65",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 53.07,
			"commitsBetweenForRepo": 220,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,36 +1,36 @@\n \tpublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n \n \t\tif (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n \t\t\tThrowable ex = (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n-\t\t\tthrow new ServletException(\"Write publisher error\", ex);\n+\t\t\tthrow new ServletException(\"Failed to create response content\", ex);\n \t\t}\n \n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \t\tasyncContext.setTimeout(-1);\n \n \t\tServerHttpRequest httpRequest;\n \t\ttry {\n \t\t\thttpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n \t\t}\n \t\tcatch (URISyntaxException ex) {\n-\t\t\tif (logger.isWarnEnabled()) {\n-\t\t\t\tlogger.warn(\"Invalid URL for incoming request: \" + ex.getMessage());\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"Failed to get request  URL: \" + ex.getMessage());\n \t\t\t}\n \t\t\t((HttpServletResponse) response).setStatus(400);\n \t\t\tasyncContext.complete();\n \t\t\treturn;\n \t\t}\n \t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n \t\tif (httpRequest.getMethod() == HttpMethod.HEAD) {\n \t\t\thttpResponse = new HttpHeadResponseDecorator(httpResponse);\n \t\t}\n \n \t\tAtomicBoolean isCompleted = new AtomicBoolean();\n \t\tHandlerResultAsyncListener listener = new HandlerResultAsyncListener(isCompleted);\n \t\tasyncContext.addListener(listener);\n \n \t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext, isCompleted);\n \t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"8d157cb5b54c8fc2af116ef62831ef35a4a95a65": {
			"type": "Ybodychange",
			"commitMessage": "Consistent handling of URISyntaxException\n\nIssue: SPR-16778\n",
			"commitDate": "2018-04-30, 7:02 PM",
			"commitName": "8d157cb5b54c8fc2af116ef62831ef35a4a95a65",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2018-04-27, 2:40 AM",
			"commitNameOld": "75a41db071a4fb0a07bf95e4db48c8e93c9dd2d0",
			"commitAuthorOld": "sdeleuze",
			"daysBetweenCommits": 3.68,
			"commitsBetweenForRepo": 17,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,36 @@\n \tpublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n+\n \t\tif (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n \t\t\tThrowable ex = (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n \t\t\tthrow new ServletException(\"Write publisher error\", ex);\n \t\t}\n \n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \t\tasyncContext.setTimeout(-1);\n \n-\t\tServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n+\t\tServerHttpRequest httpRequest;\n+\t\ttry {\n+\t\t\thttpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n+\t\t}\n+\t\tcatch (URISyntaxException ex) {\n+\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t\tlogger.warn(\"Invalid URL for incoming request: \" + ex.getMessage());\n+\t\t\t}\n+\t\t\t((HttpServletResponse) response).setStatus(400);\n+\t\t\tasyncContext.complete();\n+\t\t\treturn;\n+\t\t}\n \t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n \t\tif (httpRequest.getMethod() == HttpMethod.HEAD) {\n \t\t\thttpResponse = new HttpHeadResponseDecorator(httpResponse);\n \t\t}\n \n \t\tAtomicBoolean isCompleted = new AtomicBoolean();\n \t\tHandlerResultAsyncListener listener = new HandlerResultAsyncListener(isCompleted);\n \t\tasyncContext.addListener(listener);\n \n \t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext, isCompleted);\n \t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0de36d2883124ef52ea1040a3e0022dcaa57f4e2": {
			"type": "Ybodychange",
			"commitMessage": "Consistent HttpMethod identity comparisons\n",
			"commitDate": "2018-02-18, 2:01 PM",
			"commitName": "0de36d2883124ef52ea1040a3e0022dcaa57f4e2",
			"commitAuthor": "Juergen Hoeller",
			"commitDateOld": "2018-02-13, 3:00 PM",
			"commitNameOld": "45e520ed866dbf9fbd29fefc51eadf403959fa3b",
			"commitAuthorOld": "igor-suhorukov",
			"daysBetweenCommits": 4.96,
			"commitsBetweenForRepo": 37,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n \tpublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n \t\tif (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n \t\t\tThrowable ex = (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n \t\t\tthrow new ServletException(\"Write publisher error\", ex);\n \t\t}\n \n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \t\tasyncContext.setTimeout(-1);\n \n \t\tServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n \t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n-\t\tif (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n+\t\tif (httpRequest.getMethod() == HttpMethod.HEAD) {\n \t\t\thttpResponse = new HttpHeadResponseDecorator(httpResponse);\n \t\t}\n \n \t\tAtomicBoolean isCompleted = new AtomicBoolean();\n \t\tHandlerResultAsyncListener listener = new HandlerResultAsyncListener(isCompleted);\n \t\tasyncContext.addListener(listener);\n \n \t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext, isCompleted);\n \t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"40127bd9adde6f44963c47edd3ed57c623980c26": {
			"type": "Ybodychange",
			"commitMessage": "Polishing\n",
			"commitDate": "2018-01-19, 4:30 AM",
			"commitName": "40127bd9adde6f44963c47edd3ed57c623980c26",
			"commitAuthor": "Juergen Hoeller",
			"commitDateOld": "2017-12-12, 12:51 PM",
			"commitNameOld": "f05175586e32e660ff190311f0b102c2b3b3a398",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 37.65,
			"commitsBetweenForRepo": 127,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,26 +1,24 @@\n \tpublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n-\n \t\tif (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n \t\t\tThrowable ex = (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n-\t\t\tAssert.notNull(ex, \"Unexpected async dispatch\");\n-\t\t\tthrow new NestedServletException(\"Write publisher error\", ex);\n+\t\t\tthrow new ServletException(\"Write publisher error\", ex);\n \t\t}\n \n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \t\tasyncContext.setTimeout(-1);\n \n \t\tServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n \t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n \t\tif (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n \t\t\thttpResponse = new HttpHeadResponseDecorator(httpResponse);\n \t\t}\n \n \t\tAtomicBoolean isCompleted = new AtomicBoolean();\n \t\tHandlerResultAsyncListener listener = new HandlerResultAsyncListener(isCompleted);\n \t\tasyncContext.addListener(listener);\n \n \t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext, isCompleted);\n \t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f05175586e32e660ff190311f0b102c2b3b3a398": {
			"type": "Ymultichange(Yexceptionschange,Ybodychange)",
			"commitMessage": "Refine behavior on error after response committed\n\nIf the response is set and we can't change the status through\nServerHttpResponse any more, allow the error signal to propagate and\nlet the individual server adapters handle it. Ultimately that should\nresult in closing the connection.\n\nOn Servlet containers, we check one last time if the response is\ncommitted (we may not have filled the buffer). If not then save\nthe exception as a request attribute, dispatch, and re-throw it on the\ncontainer thread.\n\nOn Undertow access the connection and close it.\n\nOn Netty just let the error through to Reactor Netty.\n\nIssue: SPR-16051\n",
			"commitDate": "2017-12-12, 12:51 PM",
			"commitName": "f05175586e32e660ff190311f0b102c2b3b3a398",
			"commitAuthor": "Rossen Stoyanchev",
			"subchanges": [
				{
					"type": "Yexceptionschange",
					"commitMessage": "Refine behavior on error after response committed\n\nIf the response is set and we can't change the status through\nServerHttpResponse any more, allow the error signal to propagate and\nlet the individual server adapters handle it. Ultimately that should\nresult in closing the connection.\n\nOn Servlet containers, we check one last time if the response is\ncommitted (we may not have filled the buffer). If not then save\nthe exception as a request attribute, dispatch, and re-throw it on the\ncontainer thread.\n\nOn Undertow access the connection and close it.\n\nOn Netty just let the error through to Reactor Netty.\n\nIssue: SPR-16051\n",
					"commitDate": "2017-12-12, 12:51 PM",
					"commitName": "f05175586e32e660ff190311f0b102c2b3b3a398",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2017-11-05, 8:23 AM",
					"commitNameOld": "e5c1deea637ca8b2ab4352857615e53b4cb07e87",
					"commitAuthorOld": "Juergen Hoeller",
					"daysBetweenCommits": 37.19,
					"commitsBetweenForRepo": 144,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,17 +1,26 @@\n-\tpublic void service(ServletRequest request, ServletResponse response) throws IOException {\n+\tpublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n+\n+\t\tif (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n+\t\t\tThrowable ex = (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n+\t\t\tAssert.notNull(ex, \"Unexpected async dispatch\");\n+\t\t\tthrow new NestedServletException(\"Write publisher error\", ex);\n+\t\t}\n+\n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \t\tasyncContext.setTimeout(-1);\n \n \t\tServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n \t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n \t\tif (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n \t\t\thttpResponse = new HttpHeadResponseDecorator(httpResponse);\n \t\t}\n \n-\t\tasyncContext.addListener(ERROR_LISTENER);\n+\t\tAtomicBoolean isCompleted = new AtomicBoolean();\n+\t\tHandlerResultAsyncListener listener = new HandlerResultAsyncListener(isCompleted);\n+\t\tasyncContext.addListener(listener);\n \n-\t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);\n+\t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext, isCompleted);\n \t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[IOException]",
						"newValue": "[ServletException, IOException]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Refine behavior on error after response committed\n\nIf the response is set and we can't change the status through\nServerHttpResponse any more, allow the error signal to propagate and\nlet the individual server adapters handle it. Ultimately that should\nresult in closing the connection.\n\nOn Servlet containers, we check one last time if the response is\ncommitted (we may not have filled the buffer). If not then save\nthe exception as a request attribute, dispatch, and re-throw it on the\ncontainer thread.\n\nOn Undertow access the connection and close it.\n\nOn Netty just let the error through to Reactor Netty.\n\nIssue: SPR-16051\n",
					"commitDate": "2017-12-12, 12:51 PM",
					"commitName": "f05175586e32e660ff190311f0b102c2b3b3a398",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2017-11-05, 8:23 AM",
					"commitNameOld": "e5c1deea637ca8b2ab4352857615e53b4cb07e87",
					"commitAuthorOld": "Juergen Hoeller",
					"daysBetweenCommits": 37.19,
					"commitsBetweenForRepo": 144,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,17 +1,26 @@\n-\tpublic void service(ServletRequest request, ServletResponse response) throws IOException {\n+\tpublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n+\n+\t\tif (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n+\t\t\tThrowable ex = (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n+\t\t\tAssert.notNull(ex, \"Unexpected async dispatch\");\n+\t\t\tthrow new NestedServletException(\"Write publisher error\", ex);\n+\t\t}\n+\n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \t\tasyncContext.setTimeout(-1);\n \n \t\tServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n \t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n \t\tif (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n \t\t\thttpResponse = new HttpHeadResponseDecorator(httpResponse);\n \t\t}\n \n-\t\tasyncContext.addListener(ERROR_LISTENER);\n+\t\tAtomicBoolean isCompleted = new AtomicBoolean();\n+\t\tHandlerResultAsyncListener listener = new HandlerResultAsyncListener(isCompleted);\n+\t\tasyncContext.addListener(listener);\n \n-\t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);\n+\t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext, isCompleted);\n \t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"6ee1af27c61c015461f79f95f1e4f89db911be0c": {
			"type": "Ybodychange",
			"commitMessage": "WebFlux supports HTTP HEAD\n\nIssue: SPR-15994\n",
			"commitDate": "2017-09-27, 1:25 PM",
			"commitName": "6ee1af27c61c015461f79f95f1e4f89db911be0c",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2017-05-27, 12:57 AM",
			"commitNameOld": "87598f48e41d483745aba56cbf4e998c6f6d680c",
			"commitAuthorOld": "Sebastien Deleuze",
			"daysBetweenCommits": 123.52,
			"commitsBetweenForRepo": 631,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,17 @@\n \tpublic void service(ServletRequest request, ServletResponse response) throws IOException {\n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \t\tasyncContext.setTimeout(-1);\n \n \t\tServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n \t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n+\t\tif (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n+\t\t\thttpResponse = new HttpHeadResponseDecorator(httpResponse);\n+\t\t}\n+\n \t\tasyncContext.addListener(ERROR_LISTENER);\n \n \t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);\n \t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"4f3db9b822bf9769d5f2be5e66f0eca3d7f74370": {
			"type": "Ybodychange",
			"commitMessage": "Disable Servlet async request timeout in WebFlux\n\nIssue: SPR-15463\n",
			"commitDate": "2017-04-25, 2:28 PM",
			"commitName": "4f3db9b822bf9769d5f2be5e66f0eca3d7f74370",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2017-04-05, 10:41 AM",
			"commitNameOld": "e83fdaa2ddd9f5ace2ae2376b7da2427fc1ecd20",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 20.16,
			"commitsBetweenForRepo": 147,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,13 @@\n \tpublic void service(ServletRequest request, ServletResponse response) throws IOException {\n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n+\t\tasyncContext.setTimeout(-1);\n \n \t\tServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n \t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n-\t\tasyncContext.addListener(TIMEOUT_HANDLER);\n+\t\tasyncContext.addListener(ERROR_LISTENER);\n \n \t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);\n \t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"e83fdaa2ddd9f5ace2ae2376b7da2427fc1ecd20": {
			"type": "Ybodychange",
			"commitMessage": "Revert recent change causing issue in Boot on WildFly\n",
			"commitDate": "2017-04-05, 10:41 AM",
			"commitName": "e83fdaa2ddd9f5ace2ae2376b7da2427fc1ecd20",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2017-04-04, 2:30 PM",
			"commitNameOld": "f716c8e9bc8ada04b4060e21680aca793e315cd0",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 0.84,
			"commitsBetweenForRepo": 7,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,12 @@\n \tpublic void service(ServletRequest request, ServletResponse response) throws IOException {\n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \n \t\tServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n \t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n+\t\tasyncContext.addListener(TIMEOUT_HANDLER);\n+\n \t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);\n-\t\tasyncContext.addListener(subscriber);\n \t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f716c8e9bc8ada04b4060e21680aca793e315cd0": {
			"type": "Ybodychange",
			"commitMessage": "Consistently check if AsyncContext already completed\n\nRelated to SPR-15412\n",
			"commitDate": "2017-04-04, 2:30 PM",
			"commitName": "f716c8e9bc8ada04b4060e21680aca793e315cd0",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2017-04-04, 1:33 PM",
			"commitNameOld": "c0f2017262f8d3e784007d5e0134e696c1adfcf7",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 0.04,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,11 @@\n \tpublic void service(ServletRequest request, ServletResponse response) throws IOException {\n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \n \t\tServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n \t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n-\t\tasyncContext.addListener(TIMEOUT_LISTENER);\n-\n \t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);\n+\t\tasyncContext.addListener(subscriber);\n \t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c0f2017262f8d3e784007d5e0134e696c1adfcf7": {
			"type": "Ybodychange",
			"commitMessage": "Polish\n",
			"commitDate": "2017-04-04, 1:33 PM",
			"commitName": "c0f2017262f8d3e784007d5e0134e696c1adfcf7",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2017-04-04, 12:45 PM",
			"commitNameOld": "ece481545987ebcd13552b5db1b56be929a9ae78",
			"commitAuthorOld": "Violeta Georgieva",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,12 @@\n \tpublic void service(ServletRequest request, ServletResponse response) throws IOException {\n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \n \t\tServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n \t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n+\t\tasyncContext.addListener(TIMEOUT_LISTENER);\n+\n \t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);\n \t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"57d2fcef557882097e7fea4b603c437488546988": {
			"type": "Ybodychange",
			"commitMessage": "Extract CompositeHttpHandler functionality\n\nExtract CompositeHttpHandler to a package private class and add direct\nsupport via `HttpHandler.of(...)`. This removes the need for the\n`HttpHandlerAdapterSupport` class.\n",
			"commitDate": "2017-03-15, 3:05 PM",
			"commitName": "57d2fcef557882097e7fea4b603c437488546988",
			"commitAuthor": "Phillip Webb",
			"commitDateOld": "2017-01-30, 2:15 PM",
			"commitNameOld": "1b2dc3638f90508dbc98dcd8a518153fb0db62d0",
			"commitAuthorOld": "Juergen Hoeller",
			"daysBetweenCommits": 43.99,
			"commitsBetweenForRepo": 247,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,10 @@\n \tpublic void service(ServletRequest request, ServletResponse response) throws IOException {\n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \n \t\tServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n \t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n \t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);\n-\t\tgetHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n+\t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a2aaa05592fb29d0fa61a69bc61ef35c235423f0": {
			"type": "Ybodychange",
			"commitMessage": "Polish\n",
			"commitDate": "2017-01-26, 5:25 AM",
			"commitName": "a2aaa05592fb29d0fa61a69bc61ef35c235423f0",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2017-01-26, 4:21 AM",
			"commitNameOld": "383375c35f12ff4aec67560b77e00f332b54a36c",
			"commitAuthorOld": "Violeta Georgieva",
			"daysBetweenCommits": 0.04,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,14 +1,11 @@\n \tpublic void service(ServletRequest request, ServletResponse response) throws IOException {\n \n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \n-\t\tServerHttpRequest httpRequest = createServletServerHttpRequest(\n-\t\t\t\t((HttpServletRequest) request), asyncContext);\n-\n-\t\tServerHttpResponse httpResponse = createServletServerHttpResponse(\n-\t\t\t\t((HttpServletResponse) response), asyncContext);\n+\t\tServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n+\t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n \t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);\n \t\tgetHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"383375c35f12ff4aec67560b77e00f332b54a36c": {
			"type": "Ybodychange",
			"commitMessage": "Use separate reactive HttpHandler for Tomcat/Jetty\n\nIntroduce separate adapters TomcatHttpHandlerAdapter/JettyHttpHandlerAdapter\nso that each adapter can use the Tomcat/Jetty APIs for reading/writing\nwith ByteBuffer.\n",
			"commitDate": "2017-01-26, 4:21 AM",
			"commitName": "383375c35f12ff4aec67560b77e00f332b54a36c",
			"commitAuthor": "Violeta Georgieva",
			"commitDateOld": "2016-12-14, 1:34 PM",
			"commitNameOld": "5a2906979816ce1268a8dfe56c5f0a89ad720b99",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 42.62,
			"commitsBetweenForRepo": 281,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,14 +1,14 @@\n \tpublic void service(ServletRequest request, ServletResponse response) throws IOException {\n \n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n \n-\t\tServerHttpRequest httpRequest = new ServletServerHttpRequest(\n-\t\t\t\t((HttpServletRequest) request), asyncContext, getDataBufferFactory(), getBufferSize());\n+\t\tServerHttpRequest httpRequest = createServletServerHttpRequest(\n+\t\t\t\t((HttpServletRequest) request), asyncContext);\n \n-\t\tServerHttpResponse httpResponse = new ServletServerHttpResponse(\n-\t\t\t\t((HttpServletResponse) response), asyncContext, getDataBufferFactory(), getBufferSize());\n+\t\tServerHttpResponse httpResponse = createServletServerHttpResponse(\n+\t\t\t\t((HttpServletResponse) response), asyncContext);\n \n \t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);\n \t\tgetHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"5a2906979816ce1268a8dfe56c5f0a89ad720b99": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Refactor AsyncListener registration + polish\n\nInstead of registering an AsyncListener in ServletHttpHandlerAdapter\nwe now register an AsyncListener in each of the request and response\nwhere the events need to be handled anyway. This allows removing the\npackage private delegation methods in the request and response.\n",
			"commitDate": "2016-12-14, 1:34 PM",
			"commitName": "5a2906979816ce1268a8dfe56c5f0a89ad720b99",
			"commitAuthor": "Rossen Stoyanchev",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Refactor AsyncListener registration + polish\n\nInstead of registering an AsyncListener in ServletHttpHandlerAdapter\nwe now register an AsyncListener in each of the request and response\nwhere the events need to be handled anyway. This allows removing the\npackage private delegation methods in the request and response.\n",
					"commitDate": "2016-12-14, 1:34 PM",
					"commitName": "5a2906979816ce1268a8dfe56c5f0a89ad720b99",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2016-10-21, 2:19 PM",
					"commitNameOld": "aea3a750189977ca231172db87408f03979bace6",
					"commitAuthorOld": "Rossen Stoyanchev",
					"daysBetweenCommits": 54.01,
					"commitsBetweenForRepo": 281,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,15 +1,14 @@\n-\tpublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n+\tpublic void service(ServletRequest request, ServletResponse response) throws IOException {\n \n \t\t// Start async before Read/WriteListener registration\n-\t\tAsyncContext asyncContext = servletRequest.startAsync();\n+\t\tAsyncContext asyncContext = request.startAsync();\n \n-\t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n-\t\t\t\t((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n-\t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n-\t\t\t\t((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n+\t\tServerHttpRequest httpRequest = new ServletServerHttpRequest(\n+\t\t\t\t((HttpServletRequest) request), asyncContext, getDataBufferFactory(), getBufferSize());\n \n-\t\tasyncContext.addListener(new EventHandlingAsyncListener(request, response));\n+\t\tServerHttpResponse httpResponse = new ServletServerHttpResponse(\n+\t\t\t\t((HttpServletResponse) response), asyncContext, getDataBufferFactory(), getBufferSize());\n \n-\t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(asyncContext);\n-\t\tgetHttpHandler().handle(request, response).subscribe(resultSubscriber);\n+\t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);\n+\t\tgetHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[servletRequest-ServletRequest, servletResponse-ServletResponse]",
						"newValue": "[request-ServletRequest, response-ServletResponse]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Refactor AsyncListener registration + polish\n\nInstead of registering an AsyncListener in ServletHttpHandlerAdapter\nwe now register an AsyncListener in each of the request and response\nwhere the events need to be handled anyway. This allows removing the\npackage private delegation methods in the request and response.\n",
					"commitDate": "2016-12-14, 1:34 PM",
					"commitName": "5a2906979816ce1268a8dfe56c5f0a89ad720b99",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2016-10-21, 2:19 PM",
					"commitNameOld": "aea3a750189977ca231172db87408f03979bace6",
					"commitAuthorOld": "Rossen Stoyanchev",
					"daysBetweenCommits": 54.01,
					"commitsBetweenForRepo": 281,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,15 +1,14 @@\n-\tpublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n+\tpublic void service(ServletRequest request, ServletResponse response) throws IOException {\n \n \t\t// Start async before Read/WriteListener registration\n-\t\tAsyncContext asyncContext = servletRequest.startAsync();\n+\t\tAsyncContext asyncContext = request.startAsync();\n \n-\t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n-\t\t\t\t((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n-\t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n-\t\t\t\t((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n+\t\tServerHttpRequest httpRequest = new ServletServerHttpRequest(\n+\t\t\t\t((HttpServletRequest) request), asyncContext, getDataBufferFactory(), getBufferSize());\n \n-\t\tasyncContext.addListener(new EventHandlingAsyncListener(request, response));\n+\t\tServerHttpResponse httpResponse = new ServletServerHttpResponse(\n+\t\t\t\t((HttpServletResponse) response), asyncContext, getDataBufferFactory(), getBufferSize());\n \n-\t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(asyncContext);\n-\t\tgetHttpHandler().handle(request, response).subscribe(resultSubscriber);\n+\t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);\n+\t\tgetHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"aea3a750189977ca231172db87408f03979bace6": {
			"type": "Ybodychange",
			"commitMessage": "Fix failing tests\n\nIssue: SPR-14772, SPR-14803\n",
			"commitDate": "2016-10-21, 2:19 PM",
			"commitName": "aea3a750189977ca231172db87408f03979bace6",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2016-10-20, 3:42 PM",
			"commitNameOld": "b92d541ba0934052769d0bcf08fec7d8c44d2c2d",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 0.94,
			"commitsBetweenForRepo": 13,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,15 @@\n \tpublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n \n+\t\t// Start async before Read/WriteListener registration\n+\t\tAsyncContext asyncContext = servletRequest.startAsync();\n+\n \t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n \t\t\t\t((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n \t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n \t\t\t\t((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n \n-\t\tAsyncContext asyncContext = servletRequest.startAsync();\n \t\tasyncContext.addListener(new EventHandlingAsyncListener(request, response));\n \n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(asyncContext);\n \t\tgetHttpHandler().handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b92d541ba0934052769d0bcf08fec7d8c44d2c2d": {
			"type": "Ymultichange(Yparameterchange,Ymodifierchange,Yexceptionschange,Ybodychange)",
			"commitMessage": "Add contextPath support for reactive web applications\n\nThis commit introduces support for running multiple HttpHandler's under\ndistinct context paths which effectively allows running multiple\napplications on the same server. ContextPathIntegrationTests contains\nan example of two applications with different context paths.\n\nIn order to support this the HttpHandler adapters for all supported\nruntimes now have a common base class HttpHandlerAdapterSupport\nwhich has two constructor choices -- one with a single HttpHandler and\nanother with a Map<String, HttpHandler>.\n\nNote that in addition to the contextPath under which an HttpHandler is\nconfigured there may also be a \"native\" contextPath under which the\nnative runtime adapter is configured (e.g. Servlet containers). In such\ncases the contextPath is a combination of the native contextPath and\nthe contextPath assigned to the HttpHandler. See for example\nHttpHandlerAdapterSupportTests.\n\nIssue: SPR-14726\n",
			"commitDate": "2016-10-20, 3:42 PM",
			"commitName": "b92d541ba0934052769d0bcf08fec7d8c44d2c2d",
			"commitAuthor": "Rossen Stoyanchev",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Add contextPath support for reactive web applications\n\nThis commit introduces support for running multiple HttpHandler's under\ndistinct context paths which effectively allows running multiple\napplications on the same server. ContextPathIntegrationTests contains\nan example of two applications with different context paths.\n\nIn order to support this the HttpHandler adapters for all supported\nruntimes now have a common base class HttpHandlerAdapterSupport\nwhich has two constructor choices -- one with a single HttpHandler and\nanother with a Map<String, HttpHandler>.\n\nNote that in addition to the contextPath under which an HttpHandler is\nconfigured there may also be a \"native\" contextPath under which the\nnative runtime adapter is configured (e.g. Servlet containers). In such\ncases the contextPath is a combination of the native contextPath and\nthe contextPath assigned to the HttpHandler. See for example\nHttpHandlerAdapterSupportTests.\n\nIssue: SPR-14726\n",
					"commitDate": "2016-10-20, 3:42 PM",
					"commitName": "b92d541ba0934052769d0bcf08fec7d8c44d2c2d",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2016-10-19, 12:28 PM",
					"commitNameOld": "25e7cd577d6855bd56c463ad0ce4ae20bf33d541",
					"commitAuthorOld": "Violeta Georgieva",
					"daysBetweenCommits": 1.13,
					"commitsBetweenForRepo": 14,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,13 @@\n-\tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n-\t\t\tthrows ServletException, IOException {\n+\tpublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n+\n+\t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n+\t\t\t\t((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n+\t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n+\t\t\t\t((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n \n \t\tAsyncContext asyncContext = servletRequest.startAsync();\n-\t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n-\t\t\t\tservletRequest, this.dataBufferFactory, this.bufferSize);\n-\t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n-\t\t\t\tservletResponse, this.dataBufferFactory, this.bufferSize);\n \t\tasyncContext.addListener(new EventHandlingAsyncListener(request, response));\n+\n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(asyncContext);\n-\t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n+\t\tgetHttpHandler().handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[servletRequest-HttpServletRequest, servletResponse-HttpServletResponse]",
						"newValue": "[servletRequest-ServletRequest, servletResponse-ServletResponse]"
					}
				},
				{
					"type": "Ymodifierchange",
					"commitMessage": "Add contextPath support for reactive web applications\n\nThis commit introduces support for running multiple HttpHandler's under\ndistinct context paths which effectively allows running multiple\napplications on the same server. ContextPathIntegrationTests contains\nan example of two applications with different context paths.\n\nIn order to support this the HttpHandler adapters for all supported\nruntimes now have a common base class HttpHandlerAdapterSupport\nwhich has two constructor choices -- one with a single HttpHandler and\nanother with a Map<String, HttpHandler>.\n\nNote that in addition to the contextPath under which an HttpHandler is\nconfigured there may also be a \"native\" contextPath under which the\nnative runtime adapter is configured (e.g. Servlet containers). In such\ncases the contextPath is a combination of the native contextPath and\nthe contextPath assigned to the HttpHandler. See for example\nHttpHandlerAdapterSupportTests.\n\nIssue: SPR-14726\n",
					"commitDate": "2016-10-20, 3:42 PM",
					"commitName": "b92d541ba0934052769d0bcf08fec7d8c44d2c2d",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2016-10-19, 12:28 PM",
					"commitNameOld": "25e7cd577d6855bd56c463ad0ce4ae20bf33d541",
					"commitAuthorOld": "Violeta Georgieva",
					"daysBetweenCommits": 1.13,
					"commitsBetweenForRepo": 14,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,13 @@\n-\tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n-\t\t\tthrows ServletException, IOException {\n+\tpublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n+\n+\t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n+\t\t\t\t((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n+\t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n+\t\t\t\t((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n \n \t\tAsyncContext asyncContext = servletRequest.startAsync();\n-\t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n-\t\t\t\tservletRequest, this.dataBufferFactory, this.bufferSize);\n-\t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n-\t\t\t\tservletResponse, this.dataBufferFactory, this.bufferSize);\n \t\tasyncContext.addListener(new EventHandlingAsyncListener(request, response));\n+\n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(asyncContext);\n-\t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n+\t\tgetHttpHandler().handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[protected]",
						"newValue": "[public]"
					}
				},
				{
					"type": "Yexceptionschange",
					"commitMessage": "Add contextPath support for reactive web applications\n\nThis commit introduces support for running multiple HttpHandler's under\ndistinct context paths which effectively allows running multiple\napplications on the same server. ContextPathIntegrationTests contains\nan example of two applications with different context paths.\n\nIn order to support this the HttpHandler adapters for all supported\nruntimes now have a common base class HttpHandlerAdapterSupport\nwhich has two constructor choices -- one with a single HttpHandler and\nanother with a Map<String, HttpHandler>.\n\nNote that in addition to the contextPath under which an HttpHandler is\nconfigured there may also be a \"native\" contextPath under which the\nnative runtime adapter is configured (e.g. Servlet containers). In such\ncases the contextPath is a combination of the native contextPath and\nthe contextPath assigned to the HttpHandler. See for example\nHttpHandlerAdapterSupportTests.\n\nIssue: SPR-14726\n",
					"commitDate": "2016-10-20, 3:42 PM",
					"commitName": "b92d541ba0934052769d0bcf08fec7d8c44d2c2d",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2016-10-19, 12:28 PM",
					"commitNameOld": "25e7cd577d6855bd56c463ad0ce4ae20bf33d541",
					"commitAuthorOld": "Violeta Georgieva",
					"daysBetweenCommits": 1.13,
					"commitsBetweenForRepo": 14,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,13 @@\n-\tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n-\t\t\tthrows ServletException, IOException {\n+\tpublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n+\n+\t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n+\t\t\t\t((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n+\t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n+\t\t\t\t((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n \n \t\tAsyncContext asyncContext = servletRequest.startAsync();\n-\t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n-\t\t\t\tservletRequest, this.dataBufferFactory, this.bufferSize);\n-\t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n-\t\t\t\tservletResponse, this.dataBufferFactory, this.bufferSize);\n \t\tasyncContext.addListener(new EventHandlingAsyncListener(request, response));\n+\n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(asyncContext);\n-\t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n+\t\tgetHttpHandler().handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[ServletException, IOException]",
						"newValue": "[IOException]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Add contextPath support for reactive web applications\n\nThis commit introduces support for running multiple HttpHandler's under\ndistinct context paths which effectively allows running multiple\napplications on the same server. ContextPathIntegrationTests contains\nan example of two applications with different context paths.\n\nIn order to support this the HttpHandler adapters for all supported\nruntimes now have a common base class HttpHandlerAdapterSupport\nwhich has two constructor choices -- one with a single HttpHandler and\nanother with a Map<String, HttpHandler>.\n\nNote that in addition to the contextPath under which an HttpHandler is\nconfigured there may also be a \"native\" contextPath under which the\nnative runtime adapter is configured (e.g. Servlet containers). In such\ncases the contextPath is a combination of the native contextPath and\nthe contextPath assigned to the HttpHandler. See for example\nHttpHandlerAdapterSupportTests.\n\nIssue: SPR-14726\n",
					"commitDate": "2016-10-20, 3:42 PM",
					"commitName": "b92d541ba0934052769d0bcf08fec7d8c44d2c2d",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2016-10-19, 12:28 PM",
					"commitNameOld": "25e7cd577d6855bd56c463ad0ce4ae20bf33d541",
					"commitAuthorOld": "Violeta Georgieva",
					"daysBetweenCommits": 1.13,
					"commitsBetweenForRepo": 14,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,13 @@\n-\tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n-\t\t\tthrows ServletException, IOException {\n+\tpublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n+\n+\t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n+\t\t\t\t((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n+\t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n+\t\t\t\t((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n \n \t\tAsyncContext asyncContext = servletRequest.startAsync();\n-\t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n-\t\t\t\tservletRequest, this.dataBufferFactory, this.bufferSize);\n-\t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n-\t\t\t\tservletResponse, this.dataBufferFactory, this.bufferSize);\n \t\tasyncContext.addListener(new EventHandlingAsyncListener(request, response));\n+\n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(asyncContext);\n-\t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n+\t\tgetHttpHandler().handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"25e7cd577d6855bd56c463ad0ce4ae20bf33d541": {
			"type": "Ybodychange",
			"commitMessage": "Handle AsyncListener.onComplete in Servlet adapter\n\nTypically the Mono<Void> from the HttpHandler also reflects the\ncompletion of the request and response body processors and at that\npoint invoking AsyncContext#complete() from HandlerResultSubscriber\nshould be sufficient.\n\nThis commit explicitly propagates the AsyncListener.onComplete event\nto the request and response body processors for added safety.\nTechnically as mentioned those processors should have completed but\ndepending on how the controller is written there is a possibility\nthe body processors may not have completed.\n\nIssue: SPR-14772\n",
			"commitDate": "2016-10-19, 12:28 PM",
			"commitName": "25e7cd577d6855bd56c463ad0ce4ae20bf33d541",
			"commitAuthor": "Violeta Georgieva",
			"commitDateOld": "2016-10-13, 2:31 PM",
			"commitNameOld": "c1e5e3a87e4f0f8296a9da7907066b9ba5733e0d",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 5.91,
			"commitsBetweenForRepo": 18,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n \tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext asyncContext = servletRequest.startAsync();\n \t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n \t\t\t\tservletRequest, this.dataBufferFactory, this.bufferSize);\n \t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n \t\t\t\tservletResponse, this.dataBufferFactory, this.bufferSize);\n-\t\tasyncContext.addListener(new ErrorHandlingAsyncListener(request, response));\n+\t\tasyncContext.addListener(new EventHandlingAsyncListener(request, response));\n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(asyncContext);\n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c1e5e3a87e4f0f8296a9da7907066b9ba5733e0d": {
			"type": "Ybodychange",
			"commitMessage": "Polish AsyncListener in ServletHttpHandlerAdapter\n",
			"commitDate": "2016-10-13, 2:31 PM",
			"commitName": "c1e5e3a87e4f0f8296a9da7907066b9ba5733e0d",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2016-10-13, 2:14 PM",
			"commitNameOld": "7e9437738272a31e1d764972291de42936194ab1",
			"commitAuthorOld": "Violeta Georgieva",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n \tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext asyncContext = servletRequest.startAsync();\n \t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n \t\t\t\tservletRequest, this.dataBufferFactory, this.bufferSize);\n \t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n \t\t\t\tservletResponse, this.dataBufferFactory, this.bufferSize);\n-\t\tasyncContext.addListener(new HandlerAsyncEvent(request, response));\n+\t\tasyncContext.addListener(new ErrorHandlingAsyncListener(request, response));\n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(asyncContext);\n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"7e9437738272a31e1d764972291de42936194ab1": {
			"type": "Ybodychange",
			"commitMessage": "Handle async operation events\n\nProblem:\nThe following exception is observed on an async timeout:\n\"java.lang.IllegalStateException: It is invalid to call\nisReady() when the response has not been put into non-blocking mode\"\n\nCurrent Implementation:\nThe async operation events sent by the web container are not propagated\nto the internal implementation. When timeout/error happens and if the\napplication does not complete the async operation, the web container\nwill complete it. At that point if the application tries to read/write,\nthe operation will fail with an exception (above) that there is not\nasync operation started.\n\nProposed Solution:\nOn async timeout or error, make calls to:\n- AbstractRequestBodyPublisher.onError,\n- AbstractResponseBodyProcessor.onError,\n- AbstractResponseBodyFlushProcessor.onError\nAs a result of these calls the async operation will be completed and no\nmore invocations of read/write will be made.\n",
			"commitDate": "2016-10-13, 2:14 PM",
			"commitName": "7e9437738272a31e1d764972291de42936194ab1",
			"commitAuthor": "Violeta Georgieva",
			"commitDateOld": "2016-10-04, 3:00 PM",
			"commitNameOld": "cfa0f6c84bbd4fe890b753aefa7e57a57cb1d9d2",
			"commitAuthorOld": "Juergen Hoeller",
			"daysBetweenCommits": 8.97,
			"commitsBetweenForRepo": 39,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,12 @@\n \tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext asyncContext = servletRequest.startAsync();\n \t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n \t\t\t\tservletRequest, this.dataBufferFactory, this.bufferSize);\n \t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n \t\t\t\tservletResponse, this.dataBufferFactory, this.bufferSize);\n+\t\tasyncContext.addListener(new HandlerAsyncEvent(request, response));\n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(asyncContext);\n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"5d1b5426982332cbbd5671b00fbc4ded5d69a656": {
			"type": "Yfilerename",
			"commitMessage": "Move spring-web-reactive classes to spring-web\n",
			"commitDate": "2016-07-14, 10:30 AM",
			"commitName": "5d1b5426982332cbbd5671b00fbc4ded5d69a656",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2016-07-14, 10:30 AM",
			"commitNameOld": "2e8326220b3929534e6621acf0ba0e4ac0bd910c",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
				"newPath": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java"
			}
		},
		"56e50d6d6811d4f921f7e79f4ae8ce0823bd6d25": {
			"type": "Ybodychange",
			"commitMessage": "Moved body processor to writeWithInternal()\n\nMoved ResponseBodyProcessor creation from constructor to\nwriteWithInternal(), in preparation of supporting both\nPublisher<DataBuffer> as well as Publisher<Publisher<DataBuffer>>.\n",
			"commitDate": "2016-07-13, 4:04 AM",
			"commitName": "56e50d6d6811d4f921f7e79f4ae8ce0823bd6d25",
			"commitAuthor": "Arjen Poutsma",
			"commitDateOld": "2016-07-13, 1:53 AM",
			"commitNameOld": "f82f17d7f762bb0fd10cd813c334ac9a0b62355e",
			"commitAuthorOld": "Arjen Poutsma",
			"daysBetweenCommits": 0.09,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,18 @@\n \tprotected void service(HttpServletRequest servletRequest,\n \t\t\tHttpServletResponse servletResponse) throws ServletException, IOException {\n \n \t\tAsyncContext asyncContext = servletRequest.startAsync();\n \n \t\tServletServerHttpRequest request =\n \t\t\t\tnew ServletServerHttpRequest(servletRequest, this.dataBufferFactory,\n \t\t\t\t\t\tthis.bufferSize);\n-\t\trequest.registerListener();\n \n \t\tServletServerHttpResponse response =\n \t\t\t\tnew ServletServerHttpResponse(servletResponse, this.dataBufferFactory,\n \t\t\t\t\t\tthis.bufferSize);\n-\t\tresponse.registerListener();\n \n \t\tHandlerResultSubscriber resultSubscriber =\n \t\t\t\tnew HandlerResultSubscriber(asyncContext);\n \n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f82f17d7f762bb0fd10cd813c334ac9a0b62355e": {
			"type": "Ybodychange",
			"commitMessage": "Moved Servlet Publisher and Processor\n\nIn preparation of supporting both Publisher<DataBuffer> and\nPublisher<Publisher<DataBuffer>> as response body, moved\nRequestBodyPublisher and ResponseBodyProcessor into\nServletServerHttpRequest and ServletServerHttpResponse respectively.\n",
			"commitDate": "2016-07-13, 1:53 AM",
			"commitName": "f82f17d7f762bb0fd10cd813c334ac9a0b62355e",
			"commitAuthor": "Arjen Poutsma",
			"commitDateOld": "2016-07-13, 1:53 AM",
			"commitNameOld": "392a1660a4fcc1e2eab734a21beda71f9fd8ba6b",
			"commitAuthorOld": "Arjen Poutsma",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,20 @@\n \tprotected void service(HttpServletRequest servletRequest,\n \t\t\tHttpServletResponse servletResponse) throws ServletException, IOException {\n \n \t\tAsyncContext asyncContext = servletRequest.startAsync();\n \n-\t\tRequestBodyPublisher requestBody =\n-\t\t\t\tnew RequestBodyPublisher(servletRequest.getInputStream(),\n-\t\t\t\t\t\tthis.dataBufferFactory, this.bufferSize);\n-\t\trequestBody.registerListener();\n \t\tServletServerHttpRequest request =\n-\t\t\t\tnew ServletServerHttpRequest(servletRequest, requestBody);\n-\n-\t\tResponseBodyProcessor responseBody =\n-\t\t\t\tnew ResponseBodyProcessor(servletResponse.getOutputStream(),\n+\t\t\t\tnew ServletServerHttpRequest(servletRequest, this.dataBufferFactory,\n \t\t\t\t\t\tthis.bufferSize);\n-\t\tresponseBody.registerListener();\n+\t\trequest.registerListener();\n+\n \t\tServletServerHttpResponse response =\n \t\t\t\tnew ServletServerHttpResponse(servletResponse, this.dataBufferFactory,\n-\t\t\t\t\t\tpublisher -> Mono.from(subscriber -> {\n-\t\t\t\t\t\t\tpublisher.subscribe(responseBody);\n-\t\t\t\t\t\t\tresponseBody.subscribe(subscriber);\n-\t\t\t\t\t\t}));\n+\t\t\t\t\t\tthis.bufferSize);\n+\t\tresponse.registerListener();\n \n \t\tHandlerResultSubscriber resultSubscriber =\n \t\t\t\tnew HandlerResultSubscriber(asyncContext);\n \n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"e64907eed8b4accdda53c6be0145087017eae820": {
			"type": "Ybodychange",
			"commitMessage": "Removed ServletAsyncContextSynchronizer\n",
			"commitDate": "2016-07-13, 1:53 AM",
			"commitName": "e64907eed8b4accdda53c6be0145087017eae820",
			"commitAuthor": "Arjen Poutsma",
			"commitDateOld": "2016-07-13, 1:53 AM",
			"commitNameOld": "d2fce24eb4d685e89ce6e818ac584cfafecbd703",
			"commitAuthorOld": "Arjen Poutsma",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,28 @@\n-\tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n-\t\t\tthrows ServletException, IOException {\n+\tprotected void service(HttpServletRequest servletRequest,\n+\t\t\tHttpServletResponse servletResponse) throws ServletException, IOException {\n \n-\t\tAsyncContext context = servletRequest.startAsync();\n-\t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n+\t\tAsyncContext asyncContext = servletRequest.startAsync();\n \n \t\tRequestBodyPublisher requestBody =\n-\t\t\t\tnew RequestBodyPublisher(synchronizer, this.dataBufferFactory,\n-\t\t\t\t\t\tthis.bufferSize);\n+\t\t\t\tnew RequestBodyPublisher(servletRequest.getInputStream(),\n+\t\t\t\t\t\tthis.dataBufferFactory, this.bufferSize);\n \t\trequestBody.registerListener();\n \t\tServletServerHttpRequest request =\n \t\t\t\tnew ServletServerHttpRequest(servletRequest, requestBody);\n \n \t\tResponseBodyProcessor responseBody =\n-\t\t\t\tnew ResponseBodyProcessor(synchronizer, this.bufferSize);\n+\t\t\t\tnew ResponseBodyProcessor(servletResponse.getOutputStream(),\n+\t\t\t\t\t\tthis.bufferSize);\n \t\tresponseBody.registerListener();\n \t\tServletServerHttpResponse response =\n \t\t\t\tnew ServletServerHttpResponse(servletResponse, this.dataBufferFactory,\n \t\t\t\t\t\tpublisher -> Mono.from(subscriber -> {\n \t\t\t\t\t\t\tpublisher.subscribe(responseBody);\n \t\t\t\t\t\t\tresponseBody.subscribe(subscriber);\n \t\t\t\t\t\t}));\n \n \t\tHandlerResultSubscriber resultSubscriber =\n-\t\t\t\tnew HandlerResultSubscriber(synchronizer);\n+\t\t\t\tnew HandlerResultSubscriber(asyncContext);\n \n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b0de99bc8cb0a2e20c49e7f627139204bfc13a13": {
			"type": "Ybodychange",
			"commitMessage": "Refactor ResponseBodySubscriber to Processor\n\nThis commit changes the AbstractResponseBodySubscriber into a\nAbstractResponseBodyProcessor<DataBuffer, Void>, so that the processor\ncan be used as a return value for writeWith.\n\nAdditional, this commit no longer closes the response after an eror\noccurred.\n\nThis fixes #59.\n",
			"commitDate": "2016-07-06, 5:18 AM",
			"commitName": "b0de99bc8cb0a2e20c49e7f627139204bfc13a13",
			"commitAuthor": "Arjen Poutsma",
			"commitDateOld": "2016-07-06, 1:14 AM",
			"commitNameOld": "7763391e8430e3091be560f490d20aeb22db21fb",
			"commitAuthorOld": "Violeta Georgieva",
			"daysBetweenCommits": 0.17,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,26 +1,28 @@\n \tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = servletRequest.startAsync();\n \t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n \n \t\tRequestBodyPublisher requestBody =\n \t\t\t\tnew RequestBodyPublisher(synchronizer, this.dataBufferFactory,\n \t\t\t\t\t\tthis.bufferSize);\n \t\trequestBody.registerListener();\n \t\tServletServerHttpRequest request =\n \t\t\t\tnew ServletServerHttpRequest(servletRequest, requestBody);\n \n-\t\tResponseBodySubscriber responseBody =\n-\t\t\t\tnew ResponseBodySubscriber(synchronizer, this.bufferSize);\n+\t\tResponseBodyProcessor responseBody =\n+\t\t\t\tnew ResponseBodyProcessor(synchronizer, this.bufferSize);\n \t\tresponseBody.registerListener();\n \t\tServletServerHttpResponse response =\n \t\t\t\tnew ServletServerHttpResponse(servletResponse, this.dataBufferFactory,\n-\t\t\t\t\t\tpublisher -> Mono\n-\t\t\t\t\t\t\t\t.from(subscriber -> publisher.subscribe(responseBody)));\n+\t\t\t\t\t\tpublisher -> Mono.from(subscriber -> {\n+\t\t\t\t\t\t\tpublisher.subscribe(responseBody);\n+\t\t\t\t\t\t\tresponseBody.subscribe(subscriber);\n+\t\t\t\t\t\t}));\n \n \t\tHandlerResultSubscriber resultSubscriber =\n \t\t\t\tnew HandlerResultSubscriber(synchronizer);\n \n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"52325a21ffb76d30d8f9253934fec621f4e3f121": {
			"type": "Ybodychange",
			"commitMessage": "Fixed Undertow flush support\n\nReactored Servlet 3.1 and Undertow response support into an\nAbstractResponseBodySubscriber that uses an internal state machine,\nmaking thread-safity a lot easier.\n",
			"commitDate": "2016-06-24, 7:28 AM",
			"commitName": "52325a21ffb76d30d8f9253934fec621f4e3f121",
			"commitAuthor": "Arjen Poutsma",
			"commitDateOld": "2016-06-24, 7:28 AM",
			"commitNameOld": "81496624a9cb718d330a3e72f01006951735188c",
			"commitAuthorOld": "Arjen Poutsma",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,25 +1,26 @@\n \tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = servletRequest.startAsync();\n \t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n \n \t\tRequestBodyPublisher requestBody =\n-\t\t\t\tnew RequestBodyPublisher(synchronizer, dataBufferFactory, bufferSize);\n+\t\t\t\tnew RequestBodyPublisher(synchronizer, this.dataBufferFactory,\n+\t\t\t\t\t\tthis.bufferSize);\n \t\trequestBody.registerListener();\n \t\tServletServerHttpRequest request =\n \t\t\t\tnew ServletServerHttpRequest(servletRequest, requestBody);\n \n \t\tResponseBodySubscriber responseBody =\n-\t\t\t\tnew ResponseBodySubscriber(synchronizer, bufferSize);\n+\t\t\t\tnew ResponseBodySubscriber(synchronizer, this.bufferSize);\n \t\tresponseBody.registerListener();\n \t\tServletServerHttpResponse response =\n-\t\t\t\tnew ServletServerHttpResponse(servletResponse, dataBufferFactory,\n+\t\t\t\tnew ServletServerHttpResponse(servletResponse, this.dataBufferFactory,\n \t\t\t\t\t\tpublisher -> Mono\n \t\t\t\t\t\t\t\t.from(subscriber -> publisher.subscribe(responseBody)));\n \n \t\tHandlerResultSubscriber resultSubscriber =\n \t\t\t\tnew HandlerResultSubscriber(synchronizer);\n \n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d36286c7d1b5ffd13d847e3b97f4da2d8df66d74": {
			"type": "Ybodychange",
			"commitMessage": "Renamed DataBufferAllocator to DataBufferFactory\n",
			"commitDate": "2016-05-27, 1:51 AM",
			"commitName": "d36286c7d1b5ffd13d847e3b97f4da2d8df66d74",
			"commitAuthor": "Arjen Poutsma",
			"commitDateOld": "2016-04-26, 7:08 AM",
			"commitNameOld": "72b66c9715035d8263a55ca726d90426afca1fff",
			"commitAuthorOld": "Arjen Poutsma",
			"daysBetweenCommits": 30.78,
			"commitsBetweenForRepo": 34,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,25 +1,25 @@\n \tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = servletRequest.startAsync();\n \t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n \n \t\tRequestBodyPublisher requestBody =\n-\t\t\t\tnew RequestBodyPublisher(synchronizer, allocator, bufferSize);\n+\t\t\t\tnew RequestBodyPublisher(synchronizer, dataBufferFactory, bufferSize);\n \t\trequestBody.registerListener();\n \t\tServletServerHttpRequest request =\n \t\t\t\tnew ServletServerHttpRequest(servletRequest, requestBody);\n \n \t\tResponseBodySubscriber responseBody =\n \t\t\t\tnew ResponseBodySubscriber(synchronizer, bufferSize);\n \t\tresponseBody.registerListener();\n \t\tServletServerHttpResponse response =\n-\t\t\t\tnew ServletServerHttpResponse(servletResponse, allocator,\n+\t\t\t\tnew ServletServerHttpResponse(servletResponse, dataBufferFactory,\n \t\t\t\t\t\tpublisher -> Mono\n \t\t\t\t\t\t\t\t.from(subscriber -> publisher.subscribe(responseBody)));\n \n \t\tHandlerResultSubscriber resultSubscriber =\n \t\t\t\tnew HandlerResultSubscriber(synchronizer);\n \n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"35e511b03fd00c96f00f48eafcfd0ae16e888e16": {
			"type": "Ybodychange",
			"commitMessage": "Resolved comments from review\n\nThis commit resolves a few comments brought forward during a review\nmeeting, specifically:\n\n- It renames AbstractResponseBodyPublisher to\n  AbstractRequestBodyPublisher.\n- It separates out registration logic into a register method.\n- It moves the RequestBodyPublisher and ResponseBodySubscriber for the\n  Servlet 3.1 support back into ServletHttpHandlerAdapter.\n",
			"commitDate": "2016-03-23, 10:04 AM",
			"commitName": "35e511b03fd00c96f00f48eafcfd0ae16e888e16",
			"commitAuthor": "Arjen Poutsma",
			"commitDateOld": "2016-03-18, 9:14 AM",
			"commitNameOld": "7f786ce4d7a8b51a02133d7db404d9f038d5a927",
			"commitAuthorOld": "Arjen Poutsma",
			"daysBetweenCommits": 5.03,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,25 @@\n \tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = servletRequest.startAsync();\n \t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n \n+\t\tRequestBodyPublisher requestBody =\n+\t\t\t\tnew RequestBodyPublisher(synchronizer, allocator, bufferSize);\n+\t\trequestBody.registerListener();\n \t\tServletServerHttpRequest request =\n-\t\t\t\tnew ServletServerHttpRequest(synchronizer, this.allocator,\n-\t\t\t\t\t\tthis.bufferSize);\n+\t\t\t\tnew ServletServerHttpRequest(servletRequest, requestBody);\n \n+\t\tResponseBodySubscriber responseBody =\n+\t\t\t\tnew ResponseBodySubscriber(synchronizer, bufferSize);\n+\t\tresponseBody.registerListener();\n \t\tServletServerHttpResponse response =\n-\t\t\t\tnew ServletServerHttpResponse(synchronizer, this.bufferSize,\n-\t\t\t\t\t\tthis.allocator);\n+\t\t\t\tnew ServletServerHttpResponse(servletResponse, allocator,\n+\t\t\t\t\t\tpublisher -> Mono\n+\t\t\t\t\t\t\t\t.from(subscriber -> publisher.subscribe(responseBody)));\n \n \t\tHandlerResultSubscriber resultSubscriber =\n \t\t\t\tnew HandlerResultSubscriber(synchronizer);\n \n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"7f786ce4d7a8b51a02133d7db404d9f038d5a927": {
			"type": "Ybodychange",
			"commitMessage": "Added DataBufferAllocator property to ReactiveHttpOutputMessage, and use that to pass on to Encoder.encode().\n",
			"commitDate": "2016-03-18, 9:14 AM",
			"commitName": "7f786ce4d7a8b51a02133d7db404d9f038d5a927",
			"commitAuthor": "Arjen Poutsma",
			"commitDateOld": "2016-02-23, 6:35 AM",
			"commitNameOld": "361707c448f41612b018f2e50452dfb185fbbd5e",
			"commitAuthorOld": "Arjen Poutsma",
			"daysBetweenCommits": 24.07,
			"commitsBetweenForRepo": 33,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,18 +1,19 @@\n \tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = servletRequest.startAsync();\n \t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n \n \t\tServletServerHttpRequest request =\n \t\t\t\tnew ServletServerHttpRequest(synchronizer, this.allocator,\n \t\t\t\t\t\tthis.bufferSize);\n \n \t\tServletServerHttpResponse response =\n-\t\t\t\tnew ServletServerHttpResponse(synchronizer, this.bufferSize);\n+\t\t\t\tnew ServletServerHttpResponse(synchronizer, this.bufferSize,\n+\t\t\t\t\t\tthis.allocator);\n \n \t\tHandlerResultSubscriber resultSubscriber =\n \t\t\t\tnew HandlerResultSubscriber(synchronizer);\n \n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"361707c448f41612b018f2e50452dfb185fbbd5e": {
			"type": "Ybodychange",
			"commitMessage": "Servlet 3.1 support cleanup\n\nClaneup of the Servlet 3.1 support:\n\n - moved RequestBodyPublisher to ServletServerHttpRequest\n - moved ResponseBodySubscribera to ServletServerHttpResponse\n - response body is now copied to ServletOutputStream in chunks, rather\n   than one big byte[]\n",
			"commitDate": "2016-02-23, 6:35 AM",
			"commitName": "361707c448f41612b018f2e50452dfb185fbbd5e",
			"commitAuthor": "Arjen Poutsma",
			"commitDateOld": "2016-02-23, 2:24 AM",
			"commitNameOld": "51a90465d40168ed27e9ea93220b7e6f35bc203b",
			"commitAuthorOld": "Arjen Poutsma",
			"daysBetweenCommits": 0.17,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,18 @@\n \tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = servletRequest.startAsync();\n \t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n \n-\t\tRequestBodyPublisher requestBody =\n-\t\t\t\tnew RequestBodyPublisher(synchronizer, allocator, BUFFER_SIZE);\n-\t\tServletServerHttpRequest request = new ServletServerHttpRequest(servletRequest, requestBody);\n-\t\tservletRequest.getInputStream().setReadListener(requestBody);\n+\t\tServletServerHttpRequest request =\n+\t\t\t\tnew ServletServerHttpRequest(synchronizer, this.allocator,\n+\t\t\t\t\t\tthis.bufferSize);\n \n-\t\tResponseBodySubscriber responseBodySubscriber =\n-\t\t\t\tnew ResponseBodySubscriber(synchronizer);\n-\t\tServletServerHttpResponse response = new ServletServerHttpResponse(servletResponse,\n-\t\t\t\tpublisher -> Mono.from(subscriber -> publisher.subscribe(responseBodySubscriber)));\n-\t\tservletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n+\t\tServletServerHttpResponse response =\n+\t\t\t\tnew ServletServerHttpResponse(synchronizer, this.bufferSize);\n \n-\t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(synchronizer, response);\n+\t\tHandlerResultSubscriber resultSubscriber =\n+\t\t\t\tnew HandlerResultSubscriber(synchronizer);\n+\n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"51a90465d40168ed27e9ea93220b7e6f35bc203b": {
			"type": "Ybodychange",
			"commitMessage": "Polishing\n",
			"commitDate": "2016-02-23, 2:24 AM",
			"commitName": "51a90465d40168ed27e9ea93220b7e6f35bc203b",
			"commitAuthor": "Arjen Poutsma",
			"commitDateOld": "2016-01-27, 8:04 AM",
			"commitNameOld": "225179bc6f0b4c705a869a03b81df5f41345b6f7",
			"commitAuthorOld": "Arjen Poutsma",
			"daysBetweenCommits": 26.76,
			"commitsBetweenForRepo": 37,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,20 @@\n \tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = servletRequest.startAsync();\n \t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n \n \t\tRequestBodyPublisher requestBody =\n \t\t\t\tnew RequestBodyPublisher(synchronizer, allocator, BUFFER_SIZE);\n \t\tServletServerHttpRequest request = new ServletServerHttpRequest(servletRequest, requestBody);\n \t\tservletRequest.getInputStream().setReadListener(requestBody);\n \n \t\tResponseBodySubscriber responseBodySubscriber =\n-\t\t\t\tnew ResponseBodySubscriber(synchronizer, allocator);\n+\t\t\t\tnew ResponseBodySubscriber(synchronizer);\n \t\tServletServerHttpResponse response = new ServletServerHttpResponse(servletResponse,\n \t\t\t\tpublisher -> Mono.from(subscriber -> publisher.subscribe(responseBodySubscriber)));\n \t\tservletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n \n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(synchronizer, response);\n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"225179bc6f0b4c705a869a03b81df5f41345b6f7": {
			"type": "Ybodychange",
			"commitMessage": "Updated http and web packages to use DataBuffer\n",
			"commitDate": "2016-01-27, 8:04 AM",
			"commitName": "225179bc6f0b4c705a869a03b81df5f41345b6f7",
			"commitAuthor": "Arjen Poutsma",
			"commitDateOld": "2016-01-19, 1:18 PM",
			"commitNameOld": "198e31641247061d0e02f8103b6d5b4583b1c619",
			"commitAuthorOld": "Stephane Maldini",
			"daysBetweenCommits": 7.78,
			"commitsBetweenForRepo": 14,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,18 +1,20 @@\n \tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = servletRequest.startAsync();\n \t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n \n-\t\tRequestBodyPublisher requestBody = new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n+\t\tRequestBodyPublisher requestBody =\n+\t\t\t\tnew RequestBodyPublisher(synchronizer, allocator, BUFFER_SIZE);\n \t\tServletServerHttpRequest request = new ServletServerHttpRequest(servletRequest, requestBody);\n \t\tservletRequest.getInputStream().setReadListener(requestBody);\n \n-\t\tResponseBodySubscriber responseBodySubscriber = new ResponseBodySubscriber(synchronizer);\n+\t\tResponseBodySubscriber responseBodySubscriber =\n+\t\t\t\tnew ResponseBodySubscriber(synchronizer, allocator);\n \t\tServletServerHttpResponse response = new ServletServerHttpResponse(servletResponse,\n \t\t\t\tpublisher -> Mono.from(subscriber -> publisher.subscribe(responseBodySubscriber)));\n \t\tservletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n \n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(synchronizer, response);\n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"8ef7e2ff77f913773e30b1463d4657368db700e5": {
			"type": "Ybodychange",
			"commitMessage": "Use Reactor 2.5 Flux and Mono Rx light API\n\nFlux and Mono are used both for implementation and exposed at API\nlevel to express 1 versus N semantic and to provide default Rx\noperators:\n- Flux<T> for multiple values Publisher (issue #48)\n- Mono<T> for single value Publisher (issue #50)\n- Mono<Void> for Publisher with no value (issue #49)\n",
			"commitDate": "2016-01-07, 3:14 AM",
			"commitName": "8ef7e2ff77f913773e30b1463d4657368db700e5",
			"commitAuthor": "Sebastien Deleuze",
			"commitDateOld": "2015-12-31, 10:55 AM",
			"commitNameOld": "0aade73c88d5bbde5e6f7383560eeae017045bae",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 6.68,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,18 +1,18 @@\n \tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = servletRequest.startAsync();\n \t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n \n \t\tRequestBodyPublisher requestBody = new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n \t\tServletServerHttpRequest request = new ServletServerHttpRequest(servletRequest, requestBody);\n \t\tservletRequest.getInputStream().setReadListener(requestBody);\n \n \t\tResponseBodySubscriber responseBodySubscriber = new ResponseBodySubscriber(synchronizer);\n \t\tServletServerHttpResponse response = new ServletServerHttpResponse(servletResponse,\n-\t\t\t\tpublisher -> subscriber -> publisher.subscribe(responseBodySubscriber));\n+\t\t\t\tpublisher -> Mono.from(subscriber -> publisher.subscribe(responseBodySubscriber)));\n \t\tservletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n \n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(synchronizer, response);\n \t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0aade73c88d5bbde5e6f7383560eeae017045bae": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Update Servlet + Undertow req & resp implementations\n\nFor those runtimes that don't directly support Reacitve Streams this\ncommit separates more formally Reactive Streams bridge code out of\nthe request and response implementations which become simple adapters\nto the ServerHttpRequest/Response contracts like their RxNetty and\nReactor Net counterparts.\n",
			"commitDate": "2015-12-31, 10:55 AM",
			"commitName": "0aade73c88d5bbde5e6f7383560eeae017045bae",
			"commitAuthor": "Rossen Stoyanchev",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Update Servlet + Undertow req & resp implementations\n\nFor those runtimes that don't directly support Reacitve Streams this\ncommit separates more formally Reactive Streams bridge code out of\nthe request and response implementations which become simple adapters\nto the ServerHttpRequest/Response contracts like their RxNetty and\nReactor Net counterparts.\n",
					"commitDate": "2015-12-31, 10:55 AM",
					"commitName": "0aade73c88d5bbde5e6f7383560eeae017045bae",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2015-12-02, 3:46 PM",
					"commitNameOld": "da98becf72fbeef836dba366431be2a652e5e001",
					"commitAuthorOld": "Rossen Stoyanchev",
					"daysBetweenCommits": 28.8,
					"commitsBetweenForRepo": 29,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,15 +1,18 @@\n-\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n+\tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n-\t\tAsyncContext context = request.startAsync();\n+\t\tAsyncContext context = servletRequest.startAsync();\n \t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n \n-\t\tServletServerHttpRequest httpRequest = new ServletServerHttpRequest(request, synchronizer);\n-\t\trequest.getInputStream().setReadListener(httpRequest.getReadListener());\n+\t\tRequestBodyPublisher requestBody = new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n+\t\tServletServerHttpRequest request = new ServletServerHttpRequest(servletRequest, requestBody);\n+\t\tservletRequest.getInputStream().setReadListener(requestBody);\n \n-\t\tServletServerHttpResponse httpResponse = new ServletServerHttpResponse(response, synchronizer);\n-\t\tresponse.getOutputStream().setWriteListener(httpResponse.getWriteListener());\n+\t\tResponseBodySubscriber responseBodySubscriber = new ResponseBodySubscriber(synchronizer);\n+\t\tServletServerHttpResponse response = new ServletServerHttpResponse(servletResponse,\n+\t\t\t\tpublisher -> subscriber -> publisher.subscribe(responseBodySubscriber));\n+\t\tservletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n \n-\t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(synchronizer, httpResponse);\n-\t\tthis.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n+\t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(synchronizer, response);\n+\t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[request-HttpServletRequest, response-HttpServletResponse]",
						"newValue": "[servletRequest-HttpServletRequest, servletResponse-HttpServletResponse]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Update Servlet + Undertow req & resp implementations\n\nFor those runtimes that don't directly support Reacitve Streams this\ncommit separates more formally Reactive Streams bridge code out of\nthe request and response implementations which become simple adapters\nto the ServerHttpRequest/Response contracts like their RxNetty and\nReactor Net counterparts.\n",
					"commitDate": "2015-12-31, 10:55 AM",
					"commitName": "0aade73c88d5bbde5e6f7383560eeae017045bae",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2015-12-02, 3:46 PM",
					"commitNameOld": "da98becf72fbeef836dba366431be2a652e5e001",
					"commitAuthorOld": "Rossen Stoyanchev",
					"daysBetweenCommits": 28.8,
					"commitsBetweenForRepo": 29,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,15 +1,18 @@\n-\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n+\tprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n \t\t\tthrows ServletException, IOException {\n \n-\t\tAsyncContext context = request.startAsync();\n+\t\tAsyncContext context = servletRequest.startAsync();\n \t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n \n-\t\tServletServerHttpRequest httpRequest = new ServletServerHttpRequest(request, synchronizer);\n-\t\trequest.getInputStream().setReadListener(httpRequest.getReadListener());\n+\t\tRequestBodyPublisher requestBody = new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n+\t\tServletServerHttpRequest request = new ServletServerHttpRequest(servletRequest, requestBody);\n+\t\tservletRequest.getInputStream().setReadListener(requestBody);\n \n-\t\tServletServerHttpResponse httpResponse = new ServletServerHttpResponse(response, synchronizer);\n-\t\tresponse.getOutputStream().setWriteListener(httpResponse.getWriteListener());\n+\t\tResponseBodySubscriber responseBodySubscriber = new ResponseBodySubscriber(synchronizer);\n+\t\tServletServerHttpResponse response = new ServletServerHttpResponse(servletResponse,\n+\t\t\t\tpublisher -> subscriber -> publisher.subscribe(responseBodySubscriber));\n+\t\tservletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n \n-\t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(synchronizer, httpResponse);\n-\t\tthis.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n+\t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(synchronizer, response);\n+\t\tthis.handler.handle(request, response).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"da98becf72fbeef836dba366431be2a652e5e001": {
			"type": "Ymultichange(Yfilerename,Ybodychange)",
			"commitMessage": "Move http.server to http.server.reactive\n",
			"commitDate": "2015-12-02, 3:46 PM",
			"commitName": "da98becf72fbeef836dba366431be2a652e5e001",
			"commitAuthor": "Rossen Stoyanchev",
			"subchanges": [
				{
					"type": "Yfilerename",
					"commitMessage": "Move http.server to http.server.reactive\n",
					"commitDate": "2015-12-02, 3:46 PM",
					"commitName": "da98becf72fbeef836dba366431be2a652e5e001",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2015-12-01, 4:19 PM",
					"commitNameOld": "382c98f9680fab9a0c2ad50de18e3385f9cba5c1",
					"commitAuthorOld": "Rossen Stoyanchev",
					"daysBetweenCommits": 0.98,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,17 +1,15 @@\n \tprotected void service(HttpServletRequest request, HttpServletResponse response)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = request.startAsync();\n-\t\tAsyncContextSynchronizer synchronizer = new AsyncContextSynchronizer(context);\n+\t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n \n-\t\tRequestBodyPublisher requestPublisher = new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n-\t\trequest.getInputStream().setReadListener(requestPublisher);\n-\t\tServlet31ServerHttpRequest httpRequest = new Servlet31ServerHttpRequest(request, requestPublisher);\n+\t\tServletServerHttpRequest httpRequest = new ServletServerHttpRequest(request, synchronizer);\n+\t\trequest.getInputStream().setReadListener(httpRequest.getReadListener());\n \n-\t\tResponseBodySubscriber responseSubscriber = new ResponseBodySubscriber(synchronizer);\n-\t\tresponse.getOutputStream().setWriteListener(responseSubscriber);\n-\t\tServlet31ServerHttpResponse httpResponse = new Servlet31ServerHttpResponse(response, responseSubscriber);\n+\t\tServletServerHttpResponse httpResponse = new ServletServerHttpResponse(response, synchronizer);\n+\t\tresponse.getOutputStream().setWriteListener(httpResponse.getWriteListener());\n \n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(synchronizer, httpResponse);\n \t\tthis.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/HttpHandlerServlet.java",
						"newPath": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Move http.server to http.server.reactive\n",
					"commitDate": "2015-12-02, 3:46 PM",
					"commitName": "da98becf72fbeef836dba366431be2a652e5e001",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2015-12-01, 4:19 PM",
					"commitNameOld": "382c98f9680fab9a0c2ad50de18e3385f9cba5c1",
					"commitAuthorOld": "Rossen Stoyanchev",
					"daysBetweenCommits": 0.98,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,17 +1,15 @@\n \tprotected void service(HttpServletRequest request, HttpServletResponse response)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = request.startAsync();\n-\t\tAsyncContextSynchronizer synchronizer = new AsyncContextSynchronizer(context);\n+\t\tServletAsyncContextSynchronizer synchronizer = new ServletAsyncContextSynchronizer(context);\n \n-\t\tRequestBodyPublisher requestPublisher = new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n-\t\trequest.getInputStream().setReadListener(requestPublisher);\n-\t\tServlet31ServerHttpRequest httpRequest = new Servlet31ServerHttpRequest(request, requestPublisher);\n+\t\tServletServerHttpRequest httpRequest = new ServletServerHttpRequest(request, synchronizer);\n+\t\trequest.getInputStream().setReadListener(httpRequest.getReadListener());\n \n-\t\tResponseBodySubscriber responseSubscriber = new ResponseBodySubscriber(synchronizer);\n-\t\tresponse.getOutputStream().setWriteListener(responseSubscriber);\n-\t\tServlet31ServerHttpResponse httpResponse = new Servlet31ServerHttpResponse(response, responseSubscriber);\n+\t\tServletServerHttpResponse httpResponse = new ServletServerHttpResponse(response, synchronizer);\n+\t\tresponse.getOutputStream().setWriteListener(httpResponse.getWriteListener());\n \n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(synchronizer, httpResponse);\n \t\tthis.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"df80ffbf2814c8f0a95bce9095921d53f2786a11": {
			"type": "Yfilerename",
			"commitMessage": "Spring-consistent naming in server.http package\n\nThis change also removes reactor-stream variants of the request and\nresponse since the request and response aren't used directly by\napplication code and get passed through reactor.Publishers anyway.\n",
			"commitDate": "2015-12-01, 4:09 PM",
			"commitName": "df80ffbf2814c8f0a95bce9095921d53f2786a11",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2015-12-01, 9:51 AM",
			"commitNameOld": "b9a52d5f7c454ab7de0bc9eddc8e35c7c1f51906",
			"commitAuthorOld": "Stephane Maldini",
			"daysBetweenCommits": 0.26,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/Servlet31HttpHandlerAdapter.java",
				"newPath": "spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/HttpHandlerServlet.java"
			}
		},
		"e9e4bcdc599634ae8879815a33a8b4e41b909f61": {
			"type": "Ymultichange(Yfilerename,Ybodychange)",
			"commitMessage": "Move ~.web.reactive.server to ~.http.server\n",
			"commitDate": "2015-11-20, 11:10 AM",
			"commitName": "e9e4bcdc599634ae8879815a33a8b4e41b909f61",
			"commitAuthor": "Rossen Stoyanchev",
			"subchanges": [
				{
					"type": "Yfilerename",
					"commitMessage": "Move ~.web.reactive.server to ~.http.server\n",
					"commitDate": "2015-11-20, 11:10 AM",
					"commitName": "e9e4bcdc599634ae8879815a33a8b4e41b909f61",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2015-11-13, 3:49 PM",
					"commitNameOld": "81867fa4237643ca3eae24a8f085bc4b5f9443b3",
					"commitAuthorOld": "Rossen Stoyanchev",
					"daysBetweenCommits": 6.81,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,17 +1,17 @@\n \tprotected void service(HttpServletRequest request, HttpServletResponse response)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = request.startAsync();\n \t\tAsyncContextSynchronizer synchronizer = new AsyncContextSynchronizer(context);\n \n \t\tRequestBodyPublisher requestPublisher = new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n \t\trequest.getInputStream().setReadListener(requestPublisher);\n-\t\tServletServerHttpRequest httpRequest = new ServletServerHttpRequest(request, requestPublisher);\n+\t\tServlet31ServerHttpRequest httpRequest = new Servlet31ServerHttpRequest(request, requestPublisher);\n \n \t\tResponseBodySubscriber responseSubscriber = new ResponseBodySubscriber(synchronizer);\n \t\tresponse.getOutputStream().setWriteListener(responseSubscriber);\n-\t\tServletServerHttpResponse httpResponse = new ServletServerHttpResponse(response, responseSubscriber);\n+\t\tServlet31ServerHttpResponse httpResponse = new Servlet31ServerHttpResponse(response, responseSubscriber);\n \n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(synchronizer, httpResponse);\n \t\tthis.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "spring-web-reactive/src/main/java/org/springframework/web/reactive/server/servlet/HttpHandlerServlet.java",
						"newPath": "spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/Servlet31HttpHandlerAdapter.java"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Move ~.web.reactive.server to ~.http.server\n",
					"commitDate": "2015-11-20, 11:10 AM",
					"commitName": "e9e4bcdc599634ae8879815a33a8b4e41b909f61",
					"commitAuthor": "Rossen Stoyanchev",
					"commitDateOld": "2015-11-13, 3:49 PM",
					"commitNameOld": "81867fa4237643ca3eae24a8f085bc4b5f9443b3",
					"commitAuthorOld": "Rossen Stoyanchev",
					"daysBetweenCommits": 6.81,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,17 +1,17 @@\n \tprotected void service(HttpServletRequest request, HttpServletResponse response)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = request.startAsync();\n \t\tAsyncContextSynchronizer synchronizer = new AsyncContextSynchronizer(context);\n \n \t\tRequestBodyPublisher requestPublisher = new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n \t\trequest.getInputStream().setReadListener(requestPublisher);\n-\t\tServletServerHttpRequest httpRequest = new ServletServerHttpRequest(request, requestPublisher);\n+\t\tServlet31ServerHttpRequest httpRequest = new Servlet31ServerHttpRequest(request, requestPublisher);\n \n \t\tResponseBodySubscriber responseSubscriber = new ResponseBodySubscriber(synchronizer);\n \t\tresponse.getOutputStream().setWriteListener(responseSubscriber);\n-\t\tServletServerHttpResponse httpResponse = new ServletServerHttpResponse(response, responseSubscriber);\n+\t\tServlet31ServerHttpResponse httpResponse = new Servlet31ServerHttpResponse(response, responseSubscriber);\n \n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(synchronizer, httpResponse);\n \t\tthis.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"81867fa4237643ca3eae24a8f085bc4b5f9443b3": {
			"type": "Yfilerename",
			"commitMessage": "Refactor package structure for web\n\nThe web related code is now under org.springframework.web.reactive.\nThis is parallel to org.springframework.web (the top-level package of\nspring-webmvc).\n",
			"commitDate": "2015-11-13, 3:49 PM",
			"commitName": "81867fa4237643ca3eae24a8f085bc4b5f9443b3",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2015-11-13, 3:23 PM",
			"commitNameOld": "54ce20a5e04275835b40f2cd1453db778264191e",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "spring-web-reactive/src/main/java/org/springframework/reactive/web/http/servlet/HttpHandlerServlet.java",
				"newPath": "spring-web-reactive/src/main/java/org/springframework/web/reactive/server/servlet/HttpHandlerServlet.java"
			}
		},
		"c0dff3d2bb2277429f4e387d18deb75b0797a375": {
			"type": "Ybodychange",
			"commitMessage": "Comply with Spring Framework code style\n\nhttps://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style\n",
			"commitDate": "2015-10-30, 3:22 PM",
			"commitName": "c0dff3d2bb2277429f4e387d18deb75b0797a375",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2015-10-30, 2:24 AM",
			"commitNameOld": "6006fa6ec2c811dca36ec49a884c6028eb9b81a7",
			"commitAuthorOld": "Arjen Poutsma",
			"daysBetweenCommits": 0.54,
			"commitsBetweenForRepo": 8,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,17 +1,17 @@\n \tprotected void service(HttpServletRequest request, HttpServletResponse response)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = request.startAsync();\n-\t\tAsyncContextSynchronizer contextSynchronizer = new AsyncContextSynchronizer(context);\n+\t\tAsyncContextSynchronizer synchronizer = new AsyncContextSynchronizer(context);\n \n-\t\tRequestBodyPublisher requestPublisher = new RequestBodyPublisher(contextSynchronizer, BUFFER_SIZE);\n+\t\tRequestBodyPublisher requestPublisher = new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n \t\trequest.getInputStream().setReadListener(requestPublisher);\n \t\tServletServerHttpRequest httpRequest = new ServletServerHttpRequest(request, requestPublisher);\n \n-\t\tResponseBodySubscriber responseSubscriber = new ResponseBodySubscriber(contextSynchronizer);\n+\t\tResponseBodySubscriber responseSubscriber = new ResponseBodySubscriber(synchronizer);\n \t\tresponse.getOutputStream().setWriteListener(responseSubscriber);\n \t\tServletServerHttpResponse httpResponse = new ServletServerHttpResponse(response, responseSubscriber);\n \n-\t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(contextSynchronizer, httpResponse);\n+\t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(synchronizer, httpResponse);\n \t\tthis.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"202825554c022e4262fe3bd20a34faf01ab9d620": {
			"type": "Ybodychange",
			"commitMessage": "Add basic support for @RequestMapping\n\nJust enough for a test with an @ResponseBody method that accepts an\n@RequestParam String arg and returning Publisher<String> or String.\n\nSee RequestMappingIntegrationTests.\n",
			"commitDate": "2015-08-25, 10:45 AM",
			"commitName": "202825554c022e4262fe3bd20a34faf01ab9d620",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2015-08-24, 3:33 PM",
			"commitNameOld": "bc7a5acd509f1d66039bac742a71d9b1b8474127",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 0.8,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,17 +1,17 @@\n \tprotected void service(HttpServletRequest request, HttpServletResponse response)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = request.startAsync();\n \t\tAsyncContextSynchronizer contextSynchronizer = new AsyncContextSynchronizer(context);\n \n \t\tRequestBodyPublisher requestPublisher = new RequestBodyPublisher(contextSynchronizer, BUFFER_SIZE);\n \t\trequest.getInputStream().setReadListener(requestPublisher);\n \t\tServletServerHttpRequest httpRequest = new ServletServerHttpRequest(request, requestPublisher);\n \n \t\tResponseBodySubscriber responseSubscriber = new ResponseBodySubscriber(contextSynchronizer);\n \t\tresponse.getOutputStream().setWriteListener(responseSubscriber);\n \t\tServletServerHttpResponse httpResponse = new ServletServerHttpResponse(response, responseSubscriber);\n \n-\t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(contextSynchronizer);\n+\t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(contextSynchronizer, httpResponse);\n \t\tthis.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f020a1add19b3761f2fd8e01fe5e96ce1b8d45c7": {
			"type": "Yfilerename",
			"commitMessage": "Refactor package structure\n\nIntroduce http and dispatch packages under org.springframework.web to\nseparate HTTP-specific adapter code from higher level web framework\ncode. Move classes into their respective locations.\n",
			"commitDate": "2015-08-24, 12:41 PM",
			"commitName": "f020a1add19b3761f2fd8e01fe5e96ce1b8d45c7",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2015-08-24, 12:03 PM",
			"commitNameOld": "56d69404858d2170e2e177ce9a3fd453b70f2d67",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "spring-web-reactive/src/main/java/org/springframework/reactive/web/servlet/HttpHandlerServlet.java",
				"newPath": "spring-web-reactive/src/main/java/org/springframework/reactive/web/http/servlet/HttpHandlerServlet.java"
			}
		},
		"2cb32a0fd69c528d55d3d53ae98bf886dcb4a5f9": {
			"type": "Ybodychange",
			"commitMessage": "Add ServerHttpRequest & ServerHttpResponse\n\nThis commit introduces HTTP request and response abstractions along\nwith Servlet-based implementations similar to the ones in the http\npackage of spring-web but using Reactive Streams.\n\nIn turn HttpHandler now accepts the request and response types and\nreturns Publisher<Void> that reflects the end of handling.\n\nThe write method on the response also returns Publisher<Void> allowing\ndeferred writing. At the moment however the underlying Servlet 3.1\nsupport only supports a single publisher after which the connection\nis closed.\n\nOnly simple byte[] is supported for reading and writing.\n",
			"commitDate": "2015-08-11, 2:09 PM",
			"commitName": "2cb32a0fd69c528d55d3d53ae98bf886dcb4a5f9",
			"commitAuthor": "Rossen Stoyanchev",
			"commitDateOld": "2015-08-08, 1:57 AM",
			"commitNameOld": "e770b7de419df2d24d93711fe413d9d42e55f8e1",
			"commitAuthorOld": "Rossen Stoyanchev",
			"daysBetweenCommits": 3.51,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,17 +1,17 @@\n \tprotected void service(HttpServletRequest request, HttpServletResponse response)\n \t\t\tthrows ServletException, IOException {\n \n \t\tAsyncContext context = request.startAsync();\n-\t\tfinal AsyncContextSynchronizer contextSynchronizer =\n-\t\t\t\tnew AsyncContextSynchronizer(context);\n+\t\tAsyncContextSynchronizer contextSynchronizer = new AsyncContextSynchronizer(context);\n \n \t\tRequestBodyPublisher requestPublisher = new RequestBodyPublisher(contextSynchronizer, BUFFER_SIZE);\n \t\trequest.getInputStream().setReadListener(requestPublisher);\n+\t\tServletServerHttpRequest httpRequest = new ServletServerHttpRequest(request, requestPublisher);\n \n \t\tResponseBodySubscriber responseSubscriber = new ResponseBodySubscriber(contextSynchronizer);\n \t\tresponse.getOutputStream().setWriteListener(responseSubscriber);\n+\t\tServletServerHttpResponse httpResponse = new ServletServerHttpResponse(response, responseSubscriber);\n \n-\t\tPublisher<byte[]> responsePublisher = this.handler.handle(requestPublisher);\n-\n-\t\tresponsePublisher.subscribe(responseSubscriber);\n+\t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(contextSynchronizer);\n+\t\tthis.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"74a29ac146280a399d88680d187c8dbeb2b85328": {
			"type": "Yfilerename",
			"commitMessage": "Renamed 'rx' package to 'reactive'\n",
			"commitDate": "2015-07-09, 5:42 AM",
			"commitName": "74a29ac146280a399d88680d187c8dbeb2b85328",
			"commitAuthor": "Arjen Poutsma",
			"commitDateOld": "2015-07-07, 4:53 AM",
			"commitNameOld": "f518d76a771def7289ac4f85ddc66812f428a16f",
			"commitAuthorOld": "Arjen Poutsma",
			"daysBetweenCommits": 2.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "spring-web-reactive/src/main/java/org/springframework/rx/web/servlet/HttpHandlerServlet.java",
				"newPath": "spring-web-reactive/src/main/java/org/springframework/reactive/web/servlet/HttpHandlerServlet.java"
			}
		},
		"f518d76a771def7289ac4f85ddc66812f428a16f": {
			"type": "Yintroduced",
			"commitMessage": "Working version of Servlet 3.1 <-> RS bridge.\n",
			"commitDate": "2015-07-07, 4:53 AM",
			"commitName": "f518d76a771def7289ac4f85ddc66812f428a16f",
			"commitAuthor": "Arjen Poutsma"
		}
	},
	"sha": "b325c74216fd9564a36602158fa1269e2e832874"
}