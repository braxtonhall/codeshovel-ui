{
	"repo": "https://github.com/square/okhttp.git",
	"file": "okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java",
	"method": {
		"longName": "public void writeRequestHeaders(Request request);",
		"startLine": 108,
		"methodName": "writeRequestHeaders",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "public"
	},
	"history": {
		"1d8233ddb7a0dfa490a340a06433909148f21610": {
			"type": "Ybodychange",
			"commitMessage": "Added new method ConnectTimeout() on Interceptor.Chain (#3451)\n\n",
			"commitDate": "2017-07-23, 3:59 PM",
			"commitName": "1d8233ddb7a0dfa490a340a06433909148f21610",
			"commitAuthor": "ericaschulz",
			"commitDateOld": "2017-07-02, 7:10 AM",
			"commitNameOld": "a32b1044a480aabbf4716d5c90b907c5ec46056c",
			"commitAuthorOld": "Jesse Wilson",
			"daysBetweenCommits": 21.37,
			"commitsBetweenForRepo": 6,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,9 +1,9 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     boolean hasRequestBody = request.body() != null;\n     List<Header> requestHeaders = http2HeadersList(request);\n     stream = connection.newStream(requestHeaders, hasRequestBody);\n     stream.readTimeout().timeout(chain.readTimeoutMillis(), TimeUnit.MILLISECONDS);\n-    stream.writeTimeout().timeout(client.writeTimeoutMillis(), TimeUnit.MILLISECONDS);\n+    stream.writeTimeout().timeout(chain.writeTimeoutMillis(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a32b1044a480aabbf4716d5c90b907c5ec46056c": {
			"type": "Ybodychange",
			"commitMessage": "New method, withReadTimeout(), on Interceptor.Chain (#3432)\n\n",
			"commitDate": "2017-07-02, 7:10 AM",
			"commitName": "a32b1044a480aabbf4716d5c90b907c5ec46056c",
			"commitAuthor": "Jesse Wilson",
			"commitDateOld": "2017-05-06, 11:21 AM",
			"commitNameOld": "83b9dd427535bce39be43a9e8224cdbc352d7427",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 56.83,
			"commitsBetweenForRepo": 27,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,9 +1,9 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     boolean hasRequestBody = request.body() != null;\n     List<Header> requestHeaders = http2HeadersList(request);\n     stream = connection.newStream(requestHeaders, hasRequestBody);\n-    stream.readTimeout().timeout(client.readTimeoutMillis(), TimeUnit.MILLISECONDS);\n+    stream.readTimeout().timeout(chain.readTimeoutMillis(), TimeUnit.MILLISECONDS);\n     stream.writeTimeout().timeout(client.writeTimeoutMillis(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"578d8debd65202f574b544f876b45e6110afdb69": {
			"type": "Ybodychange",
			"commitMessage": "Avoid sending empty HTTP/2 data frames when there is no request body.\n\nCloses: https://github.com/square/okhttp/issues/2892\n",
			"commitDate": "2016-11-21, 5:27 AM",
			"commitName": "578d8debd65202f574b544f876b45e6110afdb69",
			"commitAuthor": "Dave Roberge",
			"commitDateOld": "2016-07-09, 3:09 PM",
			"commitNameOld": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 134.64,
			"commitsBetweenForRepo": 72,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,9 +1,9 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n-    boolean permitsRequestBody = HttpMethod.permitsRequestBody(request.method());\n+    boolean hasRequestBody = request.body() != null;\n     List<Header> requestHeaders = http2HeadersList(request);\n-    stream = connection.newStream(requestHeaders, permitsRequestBody);\n+    stream = connection.newStream(requestHeaders, hasRequestBody);\n     stream.readTimeout().timeout(client.readTimeoutMillis(), TimeUnit.MILLISECONDS);\n     stream.writeTimeout().timeout(client.writeTimeoutMillis(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3d43a8dba89ccd7333c3ebcf74928e441790d943": {
			"type": "Ymultichange(Yfilerename,Ybodychange)",
			"commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
			"commitDate": "2016-07-09, 3:09 PM",
			"commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
			"commitAuthor": "jwilson",
			"subchanges": [
				{
					"type": "Yfilerename",
					"commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
					"commitDate": "2016-07-09, 3:09 PM",
					"commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
					"commitAuthor": "jwilson",
					"commitDateOld": "2016-07-09, 2:27 PM",
					"commitNameOld": "33660bf58babd09521d19ef0ed1b09c15a5e27bb",
					"commitAuthorOld": "Jesse Wilson",
					"daysBetweenCommits": 0.03,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,9 +1,9 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     boolean permitsRequestBody = HttpMethod.permitsRequestBody(request.method());\n     List<Header> requestHeaders = http2HeadersList(request);\n-    stream = framedConnection.newStream(requestHeaders, permitsRequestBody);\n+    stream = connection.newStream(requestHeaders, permitsRequestBody);\n     stream.readTimeout().timeout(client.readTimeoutMillis(), TimeUnit.MILLISECONDS);\n     stream.writeTimeout().timeout(client.writeTimeoutMillis(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "okhttp/src/main/java/okhttp3/internal/http/Http2xStream.java",
						"newPath": "okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
					"commitDate": "2016-07-09, 3:09 PM",
					"commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
					"commitAuthor": "jwilson",
					"commitDateOld": "2016-07-09, 2:27 PM",
					"commitNameOld": "33660bf58babd09521d19ef0ed1b09c15a5e27bb",
					"commitAuthorOld": "Jesse Wilson",
					"daysBetweenCommits": 0.03,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,9 +1,9 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     boolean permitsRequestBody = HttpMethod.permitsRequestBody(request.method());\n     List<Header> requestHeaders = http2HeadersList(request);\n-    stream = framedConnection.newStream(requestHeaders, permitsRequestBody);\n+    stream = connection.newStream(requestHeaders, permitsRequestBody);\n     stream.readTimeout().timeout(client.readTimeoutMillis(), TimeUnit.MILLISECONDS);\n     stream.writeTimeout().timeout(client.writeTimeoutMillis(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"0c04821a25c83fddebb29e8cd590609142ba20a2": {
			"type": "Ybodychange",
			"commitMessage": "Drop support for SPDY/3.\n\nIt's redundant with HTTP/2.\n",
			"commitDate": "2016-07-09, 2:19 PM",
			"commitName": "0c04821a25c83fddebb29e8cd590609142ba20a2",
			"commitAuthor": "jwilson",
			"commitDateOld": "2016-06-26, 9:47 PM",
			"commitNameOld": "a4d3082d2f705598c753702863a3068bc36621cc",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 12.69,
			"commitsBetweenForRepo": 22,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,9 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     boolean permitsRequestBody = HttpMethod.permitsRequestBody(request.method());\n-    List<Header> requestHeaders = framedConnection.getProtocol() == Protocol.HTTP_2\n-        ? http2HeadersList(request)\n-        : spdy3HeadersList(request);\n-    boolean hasResponseBody = true;\n-    stream = framedConnection.newStream(requestHeaders, permitsRequestBody, hasResponseBody);\n+    List<Header> requestHeaders = http2HeadersList(request);\n+    stream = framedConnection.newStream(requestHeaders, permitsRequestBody);\n     stream.readTimeout().timeout(client.readTimeoutMillis(), TimeUnit.MILLISECONDS);\n     stream.writeTimeout().timeout(client.writeTimeoutMillis(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"e3b3180f9c4cc8821e9092955127935fa956a988": {
			"type": "Ybodychange",
			"commitMessage": "Split HttpEngine into 3 interceptors.\n\nBridgeInterceptor does some basic header management and implements gzip\non responses.\n\nCacheInterceptor implements HTTP response caching.\n\nConnectInterceptor takes the StreamAllocation that's already allocated\nand uses it to create an HttpStream.\n",
			"commitDate": "2016-06-26, 7:27 AM",
			"commitName": "e3b3180f9c4cc8821e9092955127935fa956a988",
			"commitAuthor": "jwilson",
			"commitDateOld": "2016-06-25, 3:04 PM",
			"commitNameOld": "15a5bc40a4520d935bbc02a3552f51dda77fcc9c",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 0.68,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     boolean permitsRequestBody = HttpMethod.permitsRequestBody(request.method());\n     List<Header> requestHeaders = framedConnection.getProtocol() == Protocol.HTTP_2\n         ? http2HeadersList(request)\n         : spdy3HeadersList(request);\n     boolean hasResponseBody = true;\n     stream = framedConnection.newStream(requestHeaders, permitsRequestBody, hasResponseBody);\n-    stream.readTimeout().timeout(httpEngine.client.readTimeoutMillis(), TimeUnit.MILLISECONDS);\n-    stream.writeTimeout().timeout(httpEngine.client.writeTimeoutMillis(), TimeUnit.MILLISECONDS);\n+    stream.readTimeout().timeout(client.readTimeoutMillis(), TimeUnit.MILLISECONDS);\n+    stream.writeTimeout().timeout(client.writeTimeoutMillis(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"15a5bc40a4520d935bbc02a3552f51dda77fcc9c": {
			"type": "Ybodychange",
			"commitMessage": "Collapse interceptors into a single chain.\n\nInstead of having a chain of application interceptors and a separate chain\nof network interceptors, this makes a single heterogeneous chain. It makes\nthe OkHttp core and network caller into interceptors.\n",
			"commitDate": "2016-06-25, 3:04 PM",
			"commitName": "15a5bc40a4520d935bbc02a3552f51dda77fcc9c",
			"commitAuthor": "jwilson",
			"commitDateOld": "2016-06-21, 1:18 PM",
			"commitNameOld": "0f5c5c6431cfe7e5227d90fc08e822cd3b2cec9f",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 4.07,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,12 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n-    httpEngine.writingRequestHeaders();\n-    boolean permitsRequestBody = httpEngine.permitsRequestBody(request);\n+    boolean permitsRequestBody = HttpMethod.permitsRequestBody(request.method());\n     List<Header> requestHeaders = framedConnection.getProtocol() == Protocol.HTTP_2\n         ? http2HeadersList(request)\n         : spdy3HeadersList(request);\n     boolean hasResponseBody = true;\n     stream = framedConnection.newStream(requestHeaders, permitsRequestBody, hasResponseBody);\n     stream.readTimeout().timeout(httpEngine.client.readTimeoutMillis(), TimeUnit.MILLISECONDS);\n     stream.writeTimeout().timeout(httpEngine.client.writeTimeoutMillis(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"38d570a6b28664b398cfa50c5c243c3631cde997": {
			"type": "Ybodychange",
			"commitMessage": "Drop get and set prefixes in OkHttpClient, OkHttpClient.Builder\n",
			"commitDate": "2016-01-01, 9:12 AM",
			"commitName": "38d570a6b28664b398cfa50c5c243c3631cde997",
			"commitAuthor": "jwilson",
			"commitDateOld": "2015-12-23, 4:34 PM",
			"commitNameOld": "98ae0fb92c9335ec17f8710376183e18f5edd355",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 8.69,
			"commitsBetweenForRepo": 16,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,13 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean permitsRequestBody = httpEngine.permitsRequestBody(request);\n     List<Header> requestHeaders = framedConnection.getProtocol() == Protocol.HTTP_2\n         ? http2HeadersList(request)\n         : spdy3HeadersList(request);\n     boolean hasResponseBody = true;\n     stream = framedConnection.newStream(requestHeaders, permitsRequestBody, hasResponseBody);\n-    stream.readTimeout().timeout(httpEngine.client.getReadTimeout(), TimeUnit.MILLISECONDS);\n-    stream.writeTimeout().timeout(httpEngine.client.getWriteTimeout(), TimeUnit.MILLISECONDS);\n+    stream.readTimeout().timeout(httpEngine.client.readTimeoutMillis(), TimeUnit.MILLISECONDS);\n+    stream.writeTimeout().timeout(httpEngine.client.writeTimeoutMillis(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c9a89876de476983f273edbf108c365127c18c5e": {
			"type": "Ymovefromfile",
			"commitMessage": "Rename com.squareup.okhttp to okhttp3\n\nMaven group changes will come in follow up.\n",
			"commitDate": "2015-12-15, 10:34 PM",
			"commitName": "c9a89876de476983f273edbf108c365127c18c5e",
			"commitAuthor": "jwilson",
			"commitDateOld": "2015-12-15, 6:36 PM",
			"commitNameOld": "54dc2df914f2aae37fb48cc2c2f7560ee664bc2b",
			"commitAuthorOld": "Jake Wharton",
			"daysBetweenCommits": 0.17,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "okhttp/src/main/java/com/squareup/okhttp/internal/http/Http2xStream.java",
				"newPath": "okhttp/src/main/java/okhttp3/internal/http/Http2xStream.java",
				"oldMethodName": "writeRequestHeaders",
				"newMethodName": "writeRequestHeaders"
			}
		},
		"c358656c8799d30fd422448153e99a5dd37e298a": {
			"type": "Ymultichange(Yfilerename,Ybodychange)",
			"commitMessage": "First draft of the new new stream allocations model.\n",
			"commitDate": "2015-11-28, 6:36 AM",
			"commitName": "c358656c8799d30fd422448153e99a5dd37e298a",
			"commitAuthor": "jwilson",
			"subchanges": [
				{
					"type": "Yfilerename",
					"commitMessage": "First draft of the new new stream allocations model.\n",
					"commitDate": "2015-11-28, 6:36 AM",
					"commitName": "c358656c8799d30fd422448153e99a5dd37e298a",
					"commitAuthor": "jwilson",
					"commitDateOld": "2015-11-26, 8:28 PM",
					"commitNameOld": "e0d34ebdd7aba18149d195804075a87b97f3c02d",
					"commitAuthorOld": "Jake Wharton",
					"daysBetweenCommits": 1.42,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,13 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean permitsRequestBody = httpEngine.permitsRequestBody(request);\n     List<Header> requestHeaders = framedConnection.getProtocol() == Protocol.HTTP_2\n         ? http2HeadersList(request)\n         : spdy3HeadersList(request);\n     boolean hasResponseBody = true;\n     stream = framedConnection.newStream(requestHeaders, permitsRequestBody, hasResponseBody);\n     stream.readTimeout().timeout(httpEngine.client.getReadTimeout(), TimeUnit.MILLISECONDS);\n+    stream.writeTimeout().timeout(httpEngine.client.getWriteTimeout(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "okhttp/src/main/java/com/squareup/okhttp/internal/http/FramedTransport.java",
						"newPath": "okhttp/src/main/java/com/squareup/okhttp/internal/http/Http2xStream.java"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "First draft of the new new stream allocations model.\n",
					"commitDate": "2015-11-28, 6:36 AM",
					"commitName": "c358656c8799d30fd422448153e99a5dd37e298a",
					"commitAuthor": "jwilson",
					"commitDateOld": "2015-11-26, 8:28 PM",
					"commitNameOld": "e0d34ebdd7aba18149d195804075a87b97f3c02d",
					"commitAuthorOld": "Jake Wharton",
					"daysBetweenCommits": 1.42,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,13 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean permitsRequestBody = httpEngine.permitsRequestBody(request);\n     List<Header> requestHeaders = framedConnection.getProtocol() == Protocol.HTTP_2\n         ? http2HeadersList(request)\n         : spdy3HeadersList(request);\n     boolean hasResponseBody = true;\n     stream = framedConnection.newStream(requestHeaders, permitsRequestBody, hasResponseBody);\n     stream.readTimeout().timeout(httpEngine.client.getReadTimeout(), TimeUnit.MILLISECONDS);\n+    stream.writeTimeout().timeout(httpEngine.client.getWriteTimeout(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"bf560c1b253c1a6d157ee4839f4bb1b31a790f48": {
			"type": "Ybodychange",
			"commitMessage": "Fix HTTP/2 bug where we were using SPDY/3 style header concatenation.\n\nWhen multiple headers have the same value in SPDY/3, they are concantenated\nand separated by \\u0000.\n\nWhen multiple headers have the same value in HTTP/2, they are each written\nindependently.\n\nThis fixes the problem and rearranges the code to share less behavior than\npreviously. It gets us closer to being able to drop SPDY/3.\n\nCloses https://github.com/square/okhttp/issues/1906\n",
			"commitDate": "2015-11-22, 7:25 AM",
			"commitName": "bf560c1b253c1a6d157ee4839f4bb1b31a790f48",
			"commitAuthor": "jwilson",
			"commitDateOld": "2015-11-17, 9:01 PM",
			"commitNameOld": "529c4a36bb21b3fb7717c27f8a31c39c1b603e9d",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 4.43,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,12 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean permitsRequestBody = httpEngine.permitsRequestBody(request);\n+    List<Header> requestHeaders = framedConnection.getProtocol() == Protocol.HTTP_2\n+        ? http2HeadersList(request)\n+        : spdy3HeadersList(request);\n     boolean hasResponseBody = true;\n-    stream = framedConnection.newStream(\n-        writeNameValueBlock(request, framedConnection.getProtocol()), permitsRequestBody,\n-        hasResponseBody);\n+    stream = framedConnection.newStream(requestHeaders, permitsRequestBody, hasResponseBody);\n     stream.readTimeout().timeout(httpEngine.client.getReadTimeout(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"529c4a36bb21b3fb7717c27f8a31c39c1b603e9d": {
			"type": "Ybodychange",
			"commitMessage": "Stop returning HTTP/1.0 from Connection.getProtocol().\n\nThis was updating the protocol as a side-effect of an HTTP/1.0 response.\nThis made the protocol field mutable, and the code more difficult to\ntrace.\n\nOne consequence of this change is that OkHttp will attempt HTTP/1.1 for\nall requests, even if a server returns HTTP/1.0 from the first response.\nThis is closer to our implementation anyway.\n",
			"commitDate": "2015-11-17, 9:01 PM",
			"commitName": "529c4a36bb21b3fb7717c27f8a31c39c1b603e9d",
			"commitAuthor": "jwilson",
			"commitDateOld": "2015-09-17, 9:58 PM",
			"commitNameOld": "8e996aadc5d7839f249399abac657e3c9df1dc4a",
			"commitAuthorOld": "cketti",
			"daysBetweenCommits": 61,
			"commitsBetweenForRepo": 42,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,11 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean permitsRequestBody = httpEngine.permitsRequestBody(request);\n     boolean hasResponseBody = true;\n-    String version = RequestLine.version(httpEngine.getConnection().getProtocol());\n     stream = framedConnection.newStream(\n-        writeNameValueBlock(request, framedConnection.getProtocol(), version), permitsRequestBody,\n+        writeNameValueBlock(request, framedConnection.getProtocol()), permitsRequestBody,\n         hasResponseBody);\n     stream.readTimeout().timeout(httpEngine.client.getReadTimeout(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"8e996aadc5d7839f249399abac657e3c9df1dc4a": {
			"type": "Ybodychange",
			"commitMessage": "Fix bug where request body isn't sent when it should\n",
			"commitDate": "2015-09-17, 9:58 PM",
			"commitName": "8e996aadc5d7839f249399abac657e3c9df1dc4a",
			"commitAuthor": "cketti",
			"commitDateOld": "2015-08-02, 6:01 PM",
			"commitNameOld": "4c90a2e04a83646597a506a80b5a885d5c515bf0",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 46.16,
			"commitsBetweenForRepo": 26,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n-    boolean permitsRequestBody = httpEngine.permitsRequestBody();\n+    boolean permitsRequestBody = httpEngine.permitsRequestBody(request);\n     boolean hasResponseBody = true;\n     String version = RequestLine.version(httpEngine.getConnection().getProtocol());\n     stream = framedConnection.newStream(\n         writeNameValueBlock(request, framedConnection.getProtocol(), version), permitsRequestBody,\n         hasResponseBody);\n     stream.readTimeout().timeout(httpEngine.client.getReadTimeout(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c753d2e41ba667f9b5a31451a16ecbaecdc65d80": {
			"type": "Ymultichange(Yfilerename,Ybodychange)",
			"commitMessage": "Rename 'spdy' references to 'framed' where appropriate.\n",
			"commitDate": "2015-06-17, 3:40 PM",
			"commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
			"commitAuthor": "Jake Wharton",
			"subchanges": [
				{
					"type": "Yfilerename",
					"commitMessage": "Rename 'spdy' references to 'framed' where appropriate.\n",
					"commitDate": "2015-06-17, 3:40 PM",
					"commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
					"commitAuthor": "Jake Wharton",
					"commitDateOld": "2015-06-16, 9:46 AM",
					"commitNameOld": "b262f2a03001cd990568b929b2739dd3c7adb75f",
					"commitAuthorOld": "Jesse Wilson",
					"daysBetweenCommits": 1.25,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,12 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean permitsRequestBody = httpEngine.permitsRequestBody();\n     boolean hasResponseBody = true;\n     String version = RequestLine.version(httpEngine.getConnection().getProtocol());\n-    stream = spdyConnection.newStream(\n-        writeNameValueBlock(request, spdyConnection.getProtocol(), version), permitsRequestBody,\n+    stream = framedConnection.newStream(\n+        writeNameValueBlock(request, framedConnection.getProtocol(), version), permitsRequestBody,\n         hasResponseBody);\n     stream.readTimeout().timeout(httpEngine.client.getReadTimeout(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java",
						"newPath": "okhttp/src/main/java/com/squareup/okhttp/internal/http/FramedTransport.java"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Rename 'spdy' references to 'framed' where appropriate.\n",
					"commitDate": "2015-06-17, 3:40 PM",
					"commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
					"commitAuthor": "Jake Wharton",
					"commitDateOld": "2015-06-16, 9:46 AM",
					"commitNameOld": "b262f2a03001cd990568b929b2739dd3c7adb75f",
					"commitAuthorOld": "Jesse Wilson",
					"daysBetweenCommits": 1.25,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,12 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean permitsRequestBody = httpEngine.permitsRequestBody();\n     boolean hasResponseBody = true;\n     String version = RequestLine.version(httpEngine.getConnection().getProtocol());\n-    stream = spdyConnection.newStream(\n-        writeNameValueBlock(request, spdyConnection.getProtocol(), version), permitsRequestBody,\n+    stream = framedConnection.newStream(\n+        writeNameValueBlock(request, framedConnection.getProtocol(), version), permitsRequestBody,\n         hasResponseBody);\n     stream.readTimeout().timeout(httpEngine.client.getReadTimeout(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"64b607fc113cec3c18d04574ee1c024192d8cc43": {
			"type": "Ybodychange",
			"commitMessage": "Request body buffering is not transport-specific.\n\nPreviously we were only buffering the request body when the transport\nwas HTTP. But we should buffer it for both SPDY and HTTP transports.\n\nCloses https://github.com/square/okhttp/issues/1132\n\nAlso recover gracefully when retrying an empty POST body. This\nis a related bug.\n\nCloses https://github.com/square/okhttp/issues/1131\n",
			"commitDate": "2014-11-10, 6:20 PM",
			"commitName": "64b607fc113cec3c18d04574ee1c024192d8cc43",
			"commitAuthor": "Jesse Wilson",
			"commitDateOld": "2014-08-17, 11:46 PM",
			"commitNameOld": "3a4c135529929975691ae4a02bb3bd80014bab1b",
			"commitAuthorOld": "Jake Wharton",
			"daysBetweenCommits": 84.82,
			"commitsBetweenForRepo": 47,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n-    boolean hasRequestBody = httpEngine.hasRequestBody();\n+    boolean permitsRequestBody = httpEngine.permitsRequestBody();\n     boolean hasResponseBody = true;\n     String version = RequestLine.version(httpEngine.getConnection().getProtocol());\n     stream = spdyConnection.newStream(\n-        writeNameValueBlock(request, spdyConnection.getProtocol(), version), hasRequestBody,\n+        writeNameValueBlock(request, spdyConnection.getProtocol(), version), permitsRequestBody,\n         hasResponseBody);\n     stream.readTimeout().timeout(httpEngine.client.getReadTimeout(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"5ddcdf54828b8543613d2a07da1139cc4c20ea72": {
			"type": "Ybodychange",
			"commitMessage": "Use Okio for timeouts in SPDY.\n\nThis depends on new AsyncTimeout API in Okio being released.\n",
			"commitDate": "2014-05-03, 6:05 PM",
			"commitName": "5ddcdf54828b8543613d2a07da1139cc4c20ea72",
			"commitAuthor": "Jesse Wilson",
			"commitDateOld": "2014-04-19, 12:28 PM",
			"commitNameOld": "307c7a144afc1262237ab6401a3f3f3b2491a124",
			"commitAuthorOld": "Jesse Wilson",
			"daysBetweenCommits": 14.23,
			"commitsBetweenForRepo": 45,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean hasRequestBody = httpEngine.hasRequestBody();\n     boolean hasResponseBody = true;\n     String version = RequestLine.version(httpEngine.getConnection().getProtocol());\n     stream = spdyConnection.newStream(\n         writeNameValueBlock(request, spdyConnection.getProtocol(), version), hasRequestBody,\n         hasResponseBody);\n-    stream.setReadTimeout(httpEngine.client.getReadTimeout());\n+    stream.readTimeout().timeout(httpEngine.client.getReadTimeout(), TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9546527a1c34400a0020f50fe58ffd1f109800ab": {
			"type": "Ybodychange",
			"commitMessage": "Kill httpMinorVersion.\n\nReplacing it with Protocol.\n",
			"commitDate": "2014-04-19, 11:29 AM",
			"commitName": "9546527a1c34400a0020f50fe58ffd1f109800ab",
			"commitAuthor": "Jesse Wilson",
			"commitDateOld": "2014-04-18, 5:46 PM",
			"commitNameOld": "ab4927b857b1feb45d78f2fec8ae27ab6ad7d541",
			"commitAuthorOld": "Jesse Wilson",
			"daysBetweenCommits": 0.74,
			"commitsBetweenForRepo": 8,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean hasRequestBody = httpEngine.hasRequestBody();\n     boolean hasResponseBody = true;\n-    String version = RequestLine.version(httpEngine.getConnection().getHttpMinorVersion());\n+    String version = RequestLine.version(httpEngine.getConnection().getProtocol());\n     stream = spdyConnection.newStream(\n         writeNameValueBlock(request, spdyConnection.getProtocol(), version), hasRequestBody,\n         hasResponseBody);\n     stream.setReadTimeout(httpEngine.client.getReadTimeout());\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"8972a94aee5b1a8732b4f8246c6ce43fd9e5e1cb": {
			"type": "Ybodychange",
			"commitMessage": "Recover from connectivity problems in the async API.\n\nThis promotes HTTP engine failure recovery from HttpURLConnectionImpl\nto HttpEngine. That has the nice side-effect of getting to hide some\nmore implementation details in HTTP engine.\n",
			"commitDate": "2014-01-13, 8:10 PM",
			"commitName": "8972a94aee5b1a8732b4f8246c6ce43fd9e5e1cb",
			"commitAuthor": "jwilson",
			"commitDateOld": "2014-01-09, 1:20 PM",
			"commitNameOld": "38a5b93da06f6dfa25a67e3106cb644e3f5b73e6",
			"commitAuthorOld": "Adrian Cole",
			"daysBetweenCommits": 4.28,
			"commitsBetweenForRepo": 14,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean hasRequestBody = httpEngine.hasRequestBody();\n     boolean hasResponseBody = true;\n-    String version = RequestLine.version(httpEngine.connection.getHttpMinorVersion());\n+    String version = RequestLine.version(httpEngine.getConnection().getHttpMinorVersion());\n     stream = spdyConnection.newStream(\n         writeNameValueBlock(request, spdyConnection.getProtocol(), version), hasRequestBody,\n         hasResponseBody);\n     stream.setReadTimeout(httpEngine.client.getReadTimeout());\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d7444f5fc4414b51b2708606257381cc0de404e1": {
			"type": "Ybodychange",
			"commitMessage": "portably handle prohibited headers across SPDY variants.\n",
			"commitDate": "2014-01-05, 4:53 PM",
			"commitName": "d7444f5fc4414b51b2708606257381cc0de404e1",
			"commitAuthor": "Adrian Cole",
			"commitDateOld": "2014-01-03, 2:36 PM",
			"commitNameOld": "9417fa5c2e84580411e0fa4905b1f109e2d49533",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 2.09,
			"commitsBetweenForRepo": 9,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,12 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean hasRequestBody = httpEngine.hasRequestBody();\n     boolean hasResponseBody = true;\n     String version = RequestLine.version(httpEngine.connection.getHttpMinorVersion());\n     stream = spdyConnection.newStream(\n-        writeNameValueBlock(request, version), hasRequestBody, hasResponseBody);\n+        writeNameValueBlock(request, spdyConnection.getProtocol(), version), hasRequestBody,\n+        hasResponseBody);\n     stream.setReadTimeout(httpEngine.client.getReadTimeout());\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"262e3d43b63083ad9f87f3f332827b2ae37a30ff": {
			"type": "Ybodychange",
			"commitMessage": "Don't let transports rewrite the request.\n\nNow that we're preparing Content-Length and Transfer-Encoding\nbefore passing a request to the HTTP engine, we have no strict\nneed to rewrite requests in the transport.\n\nThe nice upside of this change is that the transport becomes\neven less obvious when it's in place.\n",
			"commitDate": "2014-01-01, 7:53 AM",
			"commitName": "262e3d43b63083ad9f87f3f332827b2ae37a30ff",
			"commitAuthor": "jwilson",
			"commitDateOld": "2014-01-01, 7:30 AM",
			"commitNameOld": "dbca0acc6f8c188dfa48f07bb5886606bec8d28f",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,11 @@\n   @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean hasRequestBody = httpEngine.hasRequestBody();\n     boolean hasResponseBody = true;\n+    String version = RequestLine.version(httpEngine.connection.getHttpMinorVersion());\n     stream = spdyConnection.newStream(\n-        writeNameValueBlock(request.getHeaders()), hasRequestBody, hasResponseBody);\n+        writeNameValueBlock(request, version), hasRequestBody, hasResponseBody);\n     stream.setReadTimeout(httpEngine.client.getReadTimeout());\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"957537774b319bb0109819258a11af78a98bcb97": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Clean up around HttpEngine.sendRequest().\n\nMove gateway timeout failures to CacheStrategy, and inline\nmethods nearby for a strict top-to-bottom flow in this method.\n\nIt becomes more obvious that the end of sendRequest has two\ncases: we need a connection (opening if necessary) or we don't\nneed a connection (closing if necessary). Previously this was\ntrue but not as explicit.\n",
			"commitDate": "2013-12-31, 5:52 PM",
			"commitName": "957537774b319bb0109819258a11af78a98bcb97",
			"commitAuthor": "jwilson",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Clean up around HttpEngine.sendRequest().\n\nMove gateway timeout failures to CacheStrategy, and inline\nmethods nearby for a strict top-to-bottom flow in this method.\n\nIt becomes more obvious that the end of sendRequest has two\ncases: we need a connection (opening if necessary) or we don't\nneed a connection (closing if necessary). Previously this was\ntrue but not as explicit.\n",
					"commitDate": "2013-12-31, 5:52 PM",
					"commitName": "957537774b319bb0109819258a11af78a98bcb97",
					"commitAuthor": "jwilson",
					"commitDateOld": "2013-12-31, 3:35 PM",
					"commitNameOld": "29fb61cca0340598ec28a0f8240b055d4eeb5949",
					"commitAuthorOld": "jwilson",
					"daysBetweenCommits": 0.1,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,10 +1,10 @@\n-  @Override public void writeRequestHeaders() throws IOException {\n+  @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean hasRequestBody = httpEngine.hasRequestBody();\n     boolean hasResponseBody = true;\n-    stream = spdyConnection.newStream(writeNameValueBlock(httpEngine.getRequest().getHeaders()),\n-        hasRequestBody, hasResponseBody);\n+    stream = spdyConnection.newStream(\n+        writeNameValueBlock(request.getHeaders()), hasRequestBody, hasResponseBody);\n     stream.setReadTimeout(httpEngine.client.getReadTimeout());\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[]",
						"newValue": "[request-Request]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Clean up around HttpEngine.sendRequest().\n\nMove gateway timeout failures to CacheStrategy, and inline\nmethods nearby for a strict top-to-bottom flow in this method.\n\nIt becomes more obvious that the end of sendRequest has two\ncases: we need a connection (opening if necessary) or we don't\nneed a connection (closing if necessary). Previously this was\ntrue but not as explicit.\n",
					"commitDate": "2013-12-31, 5:52 PM",
					"commitName": "957537774b319bb0109819258a11af78a98bcb97",
					"commitAuthor": "jwilson",
					"commitDateOld": "2013-12-31, 3:35 PM",
					"commitNameOld": "29fb61cca0340598ec28a0f8240b055d4eeb5949",
					"commitAuthorOld": "jwilson",
					"daysBetweenCommits": 0.1,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,10 +1,10 @@\n-  @Override public void writeRequestHeaders() throws IOException {\n+  @Override public void writeRequestHeaders(Request request) throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean hasRequestBody = httpEngine.hasRequestBody();\n     boolean hasResponseBody = true;\n-    stream = spdyConnection.newStream(writeNameValueBlock(httpEngine.getRequest().getHeaders()),\n-        hasRequestBody, hasResponseBody);\n+    stream = spdyConnection.newStream(\n+        writeNameValueBlock(request.getHeaders()), hasRequestBody, hasResponseBody);\n     stream.setReadTimeout(httpEngine.client.getReadTimeout());\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"4831a8dc6577f762e0f21fd15dd9700fe824740d": {
			"type": "Ybodychange",
			"commitMessage": "Rename RawHeaders to Headers.\n\nNow that Request and Response self-describe, I think the\nword Headers is sufficient. And it's a lot less ugly than\nRawHeaders.\n\nAlso move header serialization code to HttpTransport and\nSpdyTransport.\n",
			"commitDate": "2013-12-30, 10:58 PM",
			"commitName": "4831a8dc6577f762e0f21fd15dd9700fe824740d",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-12-30, 8:39 PM",
			"commitNameOld": "bc259348300d6e2dd735fc3066773acf8d8e8d53",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 0.1,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,10 @@\n   @Override public void writeRequestHeaders() throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean hasRequestBody = httpEngine.hasRequestBody();\n     boolean hasResponseBody = true;\n-    stream = spdyConnection.newStream(httpEngine.getRequest().getHeaders().toNameValueBlock(),\n+    stream = spdyConnection.newStream(writeNameValueBlock(httpEngine.getRequest().getHeaders()),\n         hasRequestBody, hasResponseBody);\n     stream.setReadTimeout(httpEngine.client.getReadTimeout());\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"14b6e76e7d7af9b99a7fdc1a56d7ee9309711722": {
			"type": "Ybodychange",
			"commitMessage": "Combine Request+RequestHeaders and Response+ResponseHeaders.\n\nThis cleans up a lot of the unnecessary moving parts in\nHttpEngine. That class is still stuck with some complexity\naround request and response bodies, but it's getting better.\n\nWe're also stuck escalating the visibility of a lot of\nmembers in Request and Response. I've got some ideas on\nhow to fix this; that'll have to wait for a follow up.\n",
			"commitDate": "2013-12-30, 2:08 PM",
			"commitName": "14b6e76e7d7af9b99a7fdc1a56d7ee9309711722",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-12-29, 6:17 PM",
			"commitNameOld": "350c43b6fe02401a73f967d9ef322061638b372a",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 0.83,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,10 @@\n   @Override public void writeRequestHeaders() throws IOException {\n     if (stream != null) return;\n \n     httpEngine.writingRequestHeaders();\n     boolean hasRequestBody = httpEngine.hasRequestBody();\n     boolean hasResponseBody = true;\n-    stream = spdyConnection.newStream(httpEngine.requestHeaders.getHeaders().toNameValueBlock(),\n+    stream = spdyConnection.newStream(httpEngine.getRequest().getHeaders().toNameValueBlock(),\n         hasRequestBody, hasResponseBody);\n     stream.setReadTimeout(httpEngine.client.getReadTimeout());\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"350c43b6fe02401a73f967d9ef322061638b372a": {
			"type": "Ybodychange",
			"commitMessage": "Make RawHeaders, RequestHeaders and ResponseHeaders immutable.\n\nThis introduces a new, poorly-named class ResponseStrategy\nthat pulls some code out of ResponseHeaders. That was necessary\nbecause the old method mutated itself and its parameters in\nplace.\n\nObvious follow-up for this is to combine ResponseHeaders with\nResponse, and RequestHeaders with Response.\n",
			"commitDate": "2013-12-29, 6:17 PM",
			"commitName": "350c43b6fe02401a73f967d9ef322061638b372a",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-12-07, 1:41 PM",
			"commitNameOld": "af5e60af84da628125b6fa832bdb45093c4bba71",
			"commitAuthorOld": "Adrian Cole",
			"daysBetweenCommits": 22.19,
			"commitsBetweenForRepo": 10,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,16 +1,10 @@\n   @Override public void writeRequestHeaders() throws IOException {\n-    if (stream != null) {\n-      return;\n-    }\n+    if (stream != null) return;\n+\n     httpEngine.writingRequestHeaders();\n-    RawHeaders requestHeaders = httpEngine.requestHeaders.getHeaders();\n-    String version = httpEngine.connection.getHttpMinorVersion() == 1 ? \"HTTP/1.1\" : \"HTTP/1.0\";\n-    URL url = httpEngine.policy.getURL();\n-    requestHeaders.addSpdyRequestHeaders(httpEngine.method, HttpEngine.requestPath(url), version,\n-        HttpEngine.getOriginAddress(url), httpEngine.uri.getScheme());\n     boolean hasRequestBody = httpEngine.hasRequestBody();\n     boolean hasResponseBody = true;\n-    stream = spdyConnection.newStream(requestHeaders.toNameValueBlock(), hasRequestBody,\n-        hasResponseBody);\n+    stream = spdyConnection.newStream(httpEngine.requestHeaders.getHeaders().toNameValueBlock(),\n+        hasRequestBody, hasResponseBody);\n     stream.setReadTimeout(httpEngine.client.getReadTimeout());\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"39b3b59f6f6cea6335f264b56e370787d92082e1": {
			"type": "Ybodychange",
			"commitMessage": "Push state from HttpURLConnectionImpl to OkHttpClient\n\nWe aren't going to use HttpURLConnectionImpl for\nrequests with the new API.\n\nThis is safe because we always do a shallow copy of\nthe OkHttpClient before using it to create a\nHttpURLConnectionImpl.\n",
			"commitDate": "2013-07-08, 3:29 PM",
			"commitName": "39b3b59f6f6cea6335f264b56e370787d92082e1",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-06-05, 2:34 AM",
			"commitNameOld": "4910039a572abc6d20cac48eb2c5e92591520537",
			"commitAuthorOld": "Narayan Kamath",
			"daysBetweenCommits": 33.54,
			"commitsBetweenForRepo": 23,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,16 +1,16 @@\n   @Override public void writeRequestHeaders() throws IOException {\n     if (stream != null) {\n       return;\n     }\n     httpEngine.writingRequestHeaders();\n     RawHeaders requestHeaders = httpEngine.requestHeaders.getHeaders();\n     String version = httpEngine.connection.getHttpMinorVersion() == 1 ? \"HTTP/1.1\" : \"HTTP/1.0\";\n     URL url = httpEngine.policy.getURL();\n     requestHeaders.addSpdyRequestHeaders(httpEngine.method, HttpEngine.requestPath(url), version,\n         HttpEngine.getOriginAddress(url), httpEngine.uri.getScheme());\n     boolean hasRequestBody = httpEngine.hasRequestBody();\n     boolean hasResponseBody = true;\n     stream = spdyConnection.newStream(requestHeaders.toNameValueBlock(), hasRequestBody,\n         hasResponseBody);\n-    stream.setReadTimeout(httpEngine.policy.getReadTimeout());\n+    stream.setReadTimeout(httpEngine.client.getReadTimeout());\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"7ccbf48838b7cfe42759c67790636d442ea5daa3": {
			"type": "Yfilerename",
			"commitMessage": "Move library into a module. Introduce sample module with simple GitHub client.\n",
			"commitDate": "2013-03-25, 8:04 PM",
			"commitName": "7ccbf48838b7cfe42759c67790636d442ea5daa3",
			"commitAuthor": "Jake Wharton",
			"commitDateOld": "2013-03-15, 7:39 AM",
			"commitNameOld": "ba2b7432cb9fabfc725b09a9f14878cb128ef208",
			"commitAuthorOld": "Jesse Wilson",
			"daysBetweenCommits": 10.52,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java",
				"newPath": "okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java"
			}
		},
		"194290e5f3819bf91d87c5d08c152946b6aa3509": {
			"type": "Ybodychange",
			"commitMessage": "Improve SPDY+HTTP integration.\n\nWriting tests shook out a few bugs:\n - Pooling wasn't working well. We were trying to connect\n   after already having been connected.\n - We weren't writing response bodies to the cache.\n - We weren't capturing the request time for the cache.\n - MockSpdyServer wasn't trimming headers.\n\nNew files in this change aren't new, they're just inner classes promoted\nto top-level classes for better sharing.\n",
			"commitDate": "2013-01-22, 1:14 PM",
			"commitName": "194290e5f3819bf91d87c5d08c152946b6aa3509",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-01-06, 3:30 PM",
			"commitNameOld": "06579c5bfb6a051a9fbca5be2d15a52fcf77f38c",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 15.91,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,16 @@\n     @Override public void writeRequestHeaders() throws IOException {\n         if (stream != null) {\n             return;\n         }\n+        httpEngine.writingRequestHeaders();\n         RawHeaders requestHeaders = httpEngine.requestHeaders.getHeaders();\n         String version = httpEngine.connection.getHttpMinorVersion() == 1 ? \"HTTP/1.1\" : \"HTTP/1.0\";\n         URL url = httpEngine.policy.getURL();\n         requestHeaders.addSpdyRequestHeaders(httpEngine.method, HttpEngine.requestPath(url),\n                 version, HttpEngine.getOriginAddress(url), httpEngine.uri.getScheme());\n         boolean hasRequestBody = httpEngine.hasRequestBody();\n         boolean hasResponseBody = true;\n         stream = spdyConnection.newStream(requestHeaders.toNameValueBlock(),\n                 hasRequestBody, hasResponseBody);\n         stream.setReadTimeout(httpEngine.policy.getReadTimeout());\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"06579c5bfb6a051a9fbca5be2d15a52fcf77f38c": {
			"type": "Ybodychange",
			"commitMessage": "Upgrade from spdy/2 to spdy/3.\n",
			"commitDate": "2013-01-06, 3:30 PM",
			"commitName": "06579c5bfb6a051a9fbca5be2d15a52fcf77f38c",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-01-01, 7:50 PM",
			"commitNameOld": "689f66222bd8984dd69229a4ee9caf8da528ae12",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 4.82,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,14 +1,15 @@\n     @Override public void writeRequestHeaders() throws IOException {\n         if (stream != null) {\n             return;\n         }\n         RawHeaders requestHeaders = httpEngine.requestHeaders.getHeaders();\n         String version = httpEngine.connection.getHttpMinorVersion() == 1 ? \"HTTP/1.1\" : \"HTTP/1.0\";\n-        requestHeaders.addSpdyRequestHeaders(httpEngine.method, httpEngine.uri.getScheme(),\n-                HttpEngine.requestPath(httpEngine.policy.getURL()), version);\n+        URL url = httpEngine.policy.getURL();\n+        requestHeaders.addSpdyRequestHeaders(httpEngine.method, HttpEngine.requestPath(url),\n+                version, HttpEngine.getOriginAddress(url), httpEngine.uri.getScheme());\n         boolean hasRequestBody = httpEngine.hasRequestBody();\n         boolean hasResponseBody = true;\n         stream = spdyConnection.newStream(requestHeaders.toNameValueBlock(),\n                 hasRequestBody, hasResponseBody);\n         stream.setReadTimeout(httpEngine.policy.getReadTimeout());\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"689f66222bd8984dd69229a4ee9caf8da528ae12": {
			"type": "Yfilerename",
			"commitMessage": "Flatten internal packages and utility classes.\n\nThe previous structure had hierarchy that was useful\nfor libcore but overkill for OkHttp.\n",
			"commitDate": "2013-01-01, 7:50 PM",
			"commitName": "689f66222bd8984dd69229a4ee9caf8da528ae12",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-01-01, 7:27 PM",
			"commitNameOld": "73516e6ab1d336ffd520e845e14f80cf08657bd0",
			"commitAuthorOld": "Jake Wharton",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/main/java/com/squareup/okhttp/internal/net/http/SpdyTransport.java",
				"newPath": "src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java"
			}
		},
		"86e5c34846d810a258952d966d58cb34ad483a14": {
			"type": "Ybodychange",
			"commitMessage": "Make timeouts work for SPDY.\n\nWe can't use the regular socket timeouts because the\nsocket is shared. Moving it to the application level\nis more complicated, but it allows different streams\nto set timeouts independently.\n",
			"commitDate": "2012-12-31, 11:54 PM",
			"commitName": "86e5c34846d810a258952d966d58cb34ad483a14",
			"commitAuthor": "jwilson",
			"commitDateOld": "2012-12-29, 9:36 PM",
			"commitNameOld": "768059cfc4c611f3212d0b92ff5073541a852faf",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 2.1,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,14 @@\n     @Override public void writeRequestHeaders() throws IOException {\n         if (stream != null) {\n             return;\n         }\n         RawHeaders requestHeaders = httpEngine.requestHeaders.getHeaders();\n         String version = httpEngine.connection.getHttpMinorVersion() == 1 ? \"HTTP/1.1\" : \"HTTP/1.0\";\n         requestHeaders.addSpdyRequestHeaders(httpEngine.method, httpEngine.uri.getScheme(),\n                 HttpEngine.requestPath(httpEngine.policy.getURL()), version);\n         boolean hasRequestBody = httpEngine.hasRequestBody();\n         boolean hasResponseBody = true;\n         stream = spdyConnection.newStream(requestHeaders.toNameValueBlock(),\n                 hasRequestBody, hasResponseBody);\n+        stream.setReadTimeout(httpEngine.policy.getReadTimeout());\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"70e64037ff295874602133a1d254e5a0440ae4e3": {
			"type": "Ybodychange",
			"commitMessage": "Prepare to promote HttpConnection + Pool to public API.\n\nGiving the application code access to the connection pool\nis tricky: it exposes more implementation details from\nOkHttp; details that are quite inaccessible through the\nconventional HttpURLConnection APIs. Currently the only\nthing regular users get are a pair of awkward system\nproperties.\n\nBut exposing these should also be useful: it'll allow the\napplication to observe the pool (for performance monitoring)\nand possibly also to directly manage it (by setting policy,\nor to evict when the application is paused).\n",
			"commitDate": "2012-12-22, 3:05 PM",
			"commitName": "70e64037ff295874602133a1d254e5a0440ae4e3",
			"commitAuthor": "jwilson",
			"commitDateOld": "2012-12-15, 1:55 PM",
			"commitNameOld": "50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 7.05,
			"commitsBetweenForRepo": 7,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,13 @@\n     @Override public void writeRequestHeaders() throws IOException {\n         if (stream != null) {\n             return;\n         }\n         RawHeaders requestHeaders = httpEngine.requestHeaders.getHeaders();\n-        String version = httpEngine.connection.httpMinorVersion == 1 ? \"HTTP/1.1\" : \"HTTP/1.0\";\n+        String version = httpEngine.connection.getHttpMinorVersion() == 1 ? \"HTTP/1.1\" : \"HTTP/1.0\";\n         requestHeaders.addSpdyRequestHeaders(httpEngine.method, httpEngine.uri.getScheme(),\n                 HttpEngine.requestPath(httpEngine.policy.getURL()), version);\n         boolean hasRequestBody = httpEngine.hasRequestBody();\n         boolean hasResponseBody = true;\n         stream = spdyConnection.newStream(requestHeaders.toNameValueBlock(),\n                 hasRequestBody, hasResponseBody);\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d": {
			"type": "Yfilerename",
			"commitMessage": "Move out of the libcore package.\n\nTo promote the code into AOSP, we'll keep this package as-is\nand do the jarjar in Android instead.\n",
			"commitDate": "2012-12-15, 1:55 PM",
			"commitName": "50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d",
			"commitAuthor": "jwilson",
			"commitDateOld": "2012-12-15, 1:17 PM",
			"commitNameOld": "7f7aa90bc5d41d8f818fc988d2a91d22393c7329",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/main/java/libcore/net/http/SpdyTransport.java",
				"newPath": "src/main/java/com/squareup/okhttp/internal/net/http/SpdyTransport.java"
			}
		},
		"e5b78cabad22ffdfbbe2755fece9c6c535438cdc": {
			"type": "Ybodychange",
			"commitMessage": "Fix some bugs from exercising HttpConnection + SPDY.\n\nI was trying to reproduce a connectivity problem and\nI found other related problems along the way:\n - We were unnecessarily creating new HttpConnection instances.\n - We were using \"\" as the file instead of \"/\" for SPDY.\n",
			"commitDate": "2012-11-07, 2:18 PM",
			"commitName": "e5b78cabad22ffdfbbe2755fece9c6c535438cdc",
			"commitAuthor": "Jesse Wilson",
			"commitDateOld": "2012-08-01, 5:09 PM",
			"commitNameOld": "66220f81e3c4b5dfc0b87e45ebefb4636bef2a22",
			"commitAuthorOld": "Jesse Wilson",
			"daysBetweenCommits": 97.92,
			"commitsBetweenForRepo": 37,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,13 +1,13 @@\n     @Override public void writeRequestHeaders() throws IOException {\n         if (stream != null) {\n             return;\n         }\n         RawHeaders requestHeaders = httpEngine.requestHeaders.getHeaders();\n         String version = httpEngine.connection.httpMinorVersion == 1 ? \"HTTP/1.1\" : \"HTTP/1.0\";\n         requestHeaders.addSpdyRequestHeaders(httpEngine.method, httpEngine.uri.getScheme(),\n-                httpEngine.uri.getPath(), version);\n+                HttpEngine.requestPath(httpEngine.policy.getURL()), version);\n         boolean hasRequestBody = httpEngine.hasRequestBody();\n         boolean hasResponseBody = true;\n         stream = spdyConnection.newStream(requestHeaders.toNameValueBlock(),\n                 hasRequestBody, hasResponseBody);\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ea63463c2ff8a67f63e541036f0d5998b5bb1f3e": {
			"type": "Yintroduced",
			"commitMessage": "Initial import.\n\nThis is a fork of okhttp from http://code.google.com/p/okhttp.\nI'm moving it to Github since that's where my code reviewers\nare. I've renamed the core package from com.google.okhttp to\ncom.squareup.okhttp because Square is where I expect ongoing\ndevelopment of this project to take place.\n\nAll code in this project is subject to be contributed upstream\nto AOSP. In particular, all code in the libcore package is\nderived from AOSP and intended to be contributed back to AOSP\non an ongoing basis.\n",
			"commitDate": "2012-07-23, 7:02 AM",
			"commitName": "ea63463c2ff8a67f63e541036f0d5998b5bb1f3e",
			"commitAuthor": "Jesse Wilson",
			"diff": "@@ -0,0 +1,13 @@\n+    @Override public void writeRequestHeaders() throws IOException {\n+        if (stream != null) {\n+            return;\n+        }\n+        RawHeaders requestHeaders = httpEngine.requestHeaders.getHeaders();\n+        String version = httpEngine.connection.httpMinorVersion == 1 ? \"HTTP/1.1\" : \"HTTP/1.0\";\n+        requestHeaders.addSpdyRequestHeaders(httpEngine.method, httpEngine.uri.getScheme(),\n+                httpEngine.uri.getPath(), version);\n+        boolean hasRequestBody = httpEngine.hasRequestBody();\n+        boolean hasResponseBody = true;\n+        stream = spdyConnection.newStream(requestHeaders.toNameValueBlock(),\n+                hasRequestBody, hasResponseBody);\n+    }\n\\ No newline at end of file\n"
		}
	},
	"sha": "5224f3045ba9b171fce521777edf389f9206173c"
}