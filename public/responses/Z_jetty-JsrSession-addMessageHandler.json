{
	"repo": "https://github.com/eclipse/jetty.project.git",
	"file": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSession.java",
	"method": {
		"longName": "public void addMessageHandler(MessageHandler handler);",
		"startLine": 95,
		"methodName": "addMessageHandler",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "public"
	},
	"history": {
		"05c534275253ba65a23863b5ef976636fcd8da4c": {
			"type": "Ybodychange",
			"commitMessage": "JSR-356 Improving MessageHandler manipulation\n",
			"commitDate": "2013-07-15, 4:00 PM",
			"commitName": "05c534275253ba65a23863b5ef976636fcd8da4c",
			"commitAuthor": "Joakim Erdfelt",
			"commitDateOld": "2013-07-15, 11:49 AM",
			"commitNameOld": "179a78e5028b77880d96e512a7b04b39e1ef694e",
			"commitAuthorOld": "Joakim Erdfelt",
			"daysBetweenCommits": 0.17,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,57 +1,48 @@\n     public void addMessageHandler(MessageHandler handler) throws IllegalStateException\n     {\n         Objects.requireNonNull(handler,\"MessageHandler cannot be null\");\n \n         synchronized (wrappers)\n         {\n             for (MessageHandlerMetadata metadata : messageHandlerFactory.getMetadata(handler.getClass()))\n             {\n                 DecoderFactory.Wrapper wrapper = decoderFactory.getWrapperFor(metadata.getMessageClass());\n                 if (wrapper == null)\n                 {\n                     StringBuilder err = new StringBuilder();\n                     err.append(\"Unable to find decoder for type <\");\n                     err.append(metadata.getMessageClass().getName());\n                     err.append(\"> used in <\");\n                     err.append(metadata.getHandlerClass().getName());\n                     err.append(\">\");\n                     throw new IllegalStateException(err.toString());\n                 }\n \n                 MessageType key = wrapper.getMetadata().getMessageType();\n                 MessageHandlerWrapper other = wrappers[key.ordinal()];\n                 if (other != null)\n                 {\n                     StringBuilder err = new StringBuilder();\n                     err.append(\"Encountered duplicate MessageHandler handling message type <\");\n-                    err.append(key.name());\n+                    err.append(wrapper.getMetadata().getObjectType().getName());\n                     err.append(\">, \").append(metadata.getHandlerClass().getName());\n                     err.append(\"<\");\n                     err.append(metadata.getMessageClass().getName());\n                     err.append(\"> and \");\n                     err.append(other.getMetadata().getHandlerClass().getName());\n                     err.append(\"<\");\n                     err.append(other.getMetadata().getMessageClass().getName());\n                     err.append(\"> both implement this message type\");\n                     throw new IllegalStateException(err.toString());\n                 }\n                 else\n                 {\n                     MessageHandlerWrapper handlerWrapper = new MessageHandlerWrapper(handler,metadata,wrapper);\n                     wrappers[key.ordinal()] = handlerWrapper;\n                 }\n             }\n \n             // Update handlerSet\n-            messageHandlerSet.clear();\n-            for (MessageHandlerWrapper wrapper : wrappers)\n-            {\n-                if (wrapper == null)\n-                {\n-                    // skip empty\n-                    continue;\n-                }\n-                messageHandlerSet.add(wrapper.getHandler());\n-            }\n+            updateMessageHandlerSet();\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"33c11dffaa86d09b33fd350f07cd9c548b7d3b7c": {
			"type": "Ybodychange",
			"commitMessage": "JSR-356 - cleaning up Decoder and Encoder lifecycle.\n",
			"commitDate": "2013-07-09, 2:16 PM",
			"commitName": "33c11dffaa86d09b33fd350f07cd9c548b7d3b7c",
			"commitAuthor": "Joakim Erdfelt",
			"commitDateOld": "2013-07-09, 2:16 PM",
			"commitNameOld": "46e9493c850d0ff2e6f30f455ad358251e1a2d48",
			"commitAuthorOld": "Joakim Erdfelt",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,46 +1,57 @@\n     public void addMessageHandler(MessageHandler handler) throws IllegalStateException\n     {\n         Objects.requireNonNull(handler,\"MessageHandler cannot be null\");\n \n         synchronized (wrappers)\n         {\n             for (MessageHandlerMetadata metadata : messageHandlerFactory.getMetadata(handler.getClass()))\n             {\n-                DecoderWrapper decoder = decoderFactory.getWrapperFor(metadata.getMessageClass());\n-                MessageType key = decoder.getMetadata().getMessageType();\n+                DecoderFactory.Wrapper wrapper = decoderFactory.getWrapperFor(metadata.getMessageClass());\n+                if (wrapper == null)\n+                {\n+                    StringBuilder err = new StringBuilder();\n+                    err.append(\"Unable to find decoder for type <\");\n+                    err.append(metadata.getMessageClass().getName());\n+                    err.append(\"> used in <\");\n+                    err.append(metadata.getHandlerClass().getName());\n+                    err.append(\">\");\n+                    throw new IllegalStateException(err.toString());\n+                }\n+\n+                MessageType key = wrapper.getMetadata().getMessageType();\n                 MessageHandlerWrapper other = wrappers[key.ordinal()];\n                 if (other != null)\n                 {\n                     StringBuilder err = new StringBuilder();\n                     err.append(\"Encountered duplicate MessageHandler handling message type <\");\n                     err.append(key.name());\n                     err.append(\">, \").append(metadata.getHandlerClass().getName());\n                     err.append(\"<\");\n                     err.append(metadata.getMessageClass().getName());\n                     err.append(\"> and \");\n                     err.append(other.getMetadata().getHandlerClass().getName());\n                     err.append(\"<\");\n                     err.append(other.getMetadata().getMessageClass().getName());\n                     err.append(\"> both implement this message type\");\n                     throw new IllegalStateException(err.toString());\n                 }\n                 else\n                 {\n-                    MessageHandlerWrapper wrapper = new MessageHandlerWrapper(handler,metadata,decoder);\n-                    wrappers[key.ordinal()] = wrapper;\n+                    MessageHandlerWrapper handlerWrapper = new MessageHandlerWrapper(handler,metadata,wrapper);\n+                    wrappers[key.ordinal()] = handlerWrapper;\n                 }\n             }\n \n             // Update handlerSet\n             messageHandlerSet.clear();\n             for (MessageHandlerWrapper wrapper : wrappers)\n             {\n                 if (wrapper == null)\n                 {\n                     // skip empty\n                     continue;\n                 }\n                 messageHandlerSet.add(wrapper.getHandler());\n             }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"46e9493c850d0ff2e6f30f455ad358251e1a2d48": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "JSR-356 - reworked Config to maintain user provided config\n\n+ If a user provided config is supplied, then that config should\n  be used for init(EndpointConfig) and other various accesses to\n  the configuration object.  This refactor stops using an internal\n  EndpointConfig object always and moves the internal config\n  fields into the JsrSession object instead.\n",
			"commitDate": "2013-07-09, 2:16 PM",
			"commitName": "46e9493c850d0ff2e6f30f455ad358251e1a2d48",
			"commitAuthor": "Joakim Erdfelt",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "JSR-356 - reworked Config to maintain user provided config\n\n+ If a user provided config is supplied, then that config should\n  be used for init(EndpointConfig) and other various accesses to\n  the configuration object.  This refactor stops using an internal\n  EndpointConfig object always and moves the internal config\n  fields into the JsrSession object instead.\n",
					"commitDate": "2013-07-09, 2:16 PM",
					"commitName": "46e9493c850d0ff2e6f30f455ad358251e1a2d48",
					"commitAuthor": "Joakim Erdfelt",
					"commitDateOld": "2013-04-15, 12:11 PM",
					"commitNameOld": "fe25ef0454e2be89a6aec8c87a1845ff8ecda1a2",
					"commitAuthorOld": "Joakim Erdfelt",
					"daysBetweenCommits": 85.09,
					"commitsBetweenForRepo": 417,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,4 +1,46 @@\n-    public void addMessageHandler(MessageHandler listener) throws IllegalStateException\n+    public void addMessageHandler(MessageHandler handler) throws IllegalStateException\n     {\n-        this.messageHandlers.add(listener);\n+        Objects.requireNonNull(handler,\"MessageHandler cannot be null\");\n+\n+        synchronized (wrappers)\n+        {\n+            for (MessageHandlerMetadata metadata : messageHandlerFactory.getMetadata(handler.getClass()))\n+            {\n+                DecoderWrapper decoder = decoderFactory.getWrapperFor(metadata.getMessageClass());\n+                MessageType key = decoder.getMetadata().getMessageType();\n+                MessageHandlerWrapper other = wrappers[key.ordinal()];\n+                if (other != null)\n+                {\n+                    StringBuilder err = new StringBuilder();\n+                    err.append(\"Encountered duplicate MessageHandler handling message type <\");\n+                    err.append(key.name());\n+                    err.append(\">, \").append(metadata.getHandlerClass().getName());\n+                    err.append(\"<\");\n+                    err.append(metadata.getMessageClass().getName());\n+                    err.append(\"> and \");\n+                    err.append(other.getMetadata().getHandlerClass().getName());\n+                    err.append(\"<\");\n+                    err.append(other.getMetadata().getMessageClass().getName());\n+                    err.append(\"> both implement this message type\");\n+                    throw new IllegalStateException(err.toString());\n+                }\n+                else\n+                {\n+                    MessageHandlerWrapper wrapper = new MessageHandlerWrapper(handler,metadata,decoder);\n+                    wrappers[key.ordinal()] = wrapper;\n+                }\n+            }\n+\n+            // Update handlerSet\n+            messageHandlerSet.clear();\n+            for (MessageHandlerWrapper wrapper : wrappers)\n+            {\n+                if (wrapper == null)\n+                {\n+                    // skip empty\n+                    continue;\n+                }\n+                messageHandlerSet.add(wrapper.getHandler());\n+            }\n+        }\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[listener-MessageHandler]",
						"newValue": "[handler-MessageHandler]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "JSR-356 - reworked Config to maintain user provided config\n\n+ If a user provided config is supplied, then that config should\n  be used for init(EndpointConfig) and other various accesses to\n  the configuration object.  This refactor stops using an internal\n  EndpointConfig object always and moves the internal config\n  fields into the JsrSession object instead.\n",
					"commitDate": "2013-07-09, 2:16 PM",
					"commitName": "46e9493c850d0ff2e6f30f455ad358251e1a2d48",
					"commitAuthor": "Joakim Erdfelt",
					"commitDateOld": "2013-04-15, 12:11 PM",
					"commitNameOld": "fe25ef0454e2be89a6aec8c87a1845ff8ecda1a2",
					"commitAuthorOld": "Joakim Erdfelt",
					"daysBetweenCommits": 85.09,
					"commitsBetweenForRepo": 417,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,4 +1,46 @@\n-    public void addMessageHandler(MessageHandler listener) throws IllegalStateException\n+    public void addMessageHandler(MessageHandler handler) throws IllegalStateException\n     {\n-        this.messageHandlers.add(listener);\n+        Objects.requireNonNull(handler,\"MessageHandler cannot be null\");\n+\n+        synchronized (wrappers)\n+        {\n+            for (MessageHandlerMetadata metadata : messageHandlerFactory.getMetadata(handler.getClass()))\n+            {\n+                DecoderWrapper decoder = decoderFactory.getWrapperFor(metadata.getMessageClass());\n+                MessageType key = decoder.getMetadata().getMessageType();\n+                MessageHandlerWrapper other = wrappers[key.ordinal()];\n+                if (other != null)\n+                {\n+                    StringBuilder err = new StringBuilder();\n+                    err.append(\"Encountered duplicate MessageHandler handling message type <\");\n+                    err.append(key.name());\n+                    err.append(\">, \").append(metadata.getHandlerClass().getName());\n+                    err.append(\"<\");\n+                    err.append(metadata.getMessageClass().getName());\n+                    err.append(\"> and \");\n+                    err.append(other.getMetadata().getHandlerClass().getName());\n+                    err.append(\"<\");\n+                    err.append(other.getMetadata().getMessageClass().getName());\n+                    err.append(\"> both implement this message type\");\n+                    throw new IllegalStateException(err.toString());\n+                }\n+                else\n+                {\n+                    MessageHandlerWrapper wrapper = new MessageHandlerWrapper(handler,metadata,decoder);\n+                    wrappers[key.ordinal()] = wrapper;\n+                }\n+            }\n+\n+            // Update handlerSet\n+            messageHandlerSet.clear();\n+            for (MessageHandlerWrapper wrapper : wrappers)\n+            {\n+                if (wrapper == null)\n+                {\n+                    // skip empty\n+                    continue;\n+                }\n+                messageHandlerSet.add(wrapper.getHandler());\n+            }\n+        }\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"d1692733f56b7c67a885b8c9fdd14fa204c8cab6": {
			"type": "Ybodychange",
			"commitMessage": "JSR-356: MessageHandler(s) layer\n",
			"commitDate": "2013-04-04, 12:03 PM",
			"commitName": "d1692733f56b7c67a885b8c9fdd14fa204c8cab6",
			"commitAuthor": "Joakim Erdfelt",
			"commitDateOld": "2013-03-28, 10:51 AM",
			"commitNameOld": "3a66b3ec3f8d608140be000dbec507ffd55a503b",
			"commitAuthorOld": "Joakim Erdfelt",
			"daysBetweenCommits": 7.05,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,4 +1,4 @@\n     public void addMessageHandler(MessageHandler listener) throws IllegalStateException\n     {\n-        messageHandlers.add(listener);\n+        this.messageHandlers.add(listener);\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3a66b3ec3f8d608140be000dbec507ffd55a503b": {
			"type": "Ybodychange",
			"commitMessage": "JSR-356 first working annotated @ClientEndpoint echo test\n",
			"commitDate": "2013-03-28, 10:51 AM",
			"commitName": "3a66b3ec3f8d608140be000dbec507ffd55a503b",
			"commitAuthor": "Joakim Erdfelt",
			"commitDateOld": "2013-03-26, 5:30 PM",
			"commitNameOld": "fc7526b7392e132f63110258964b45d818947215",
			"commitAuthorOld": "Joakim Erdfelt",
			"daysBetweenCommits": 1.72,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,4 +1,4 @@\n     public void addMessageHandler(MessageHandler listener) throws IllegalStateException\n     {\n-        // TODO Auto-generated method stub\n+        messageHandlers.add(listener);\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"43231d84510fde66c4a19a5aac4782eaef15de16": {
			"type": "Yintroduced",
			"commitMessage": "393473 - Add support for JSR-356 (javax.websocket) draft\n\n + Restarting branch, copying over work from November with new JSR-356\n   Draft 012 api in mind.\n",
			"commitDate": "2013-02-12, 3:19 PM",
			"commitName": "43231d84510fde66c4a19a5aac4782eaef15de16",
			"commitAuthor": "Joakim Erdfelt",
			"diff": "@@ -0,0 +1,4 @@\n+    public void addMessageHandler(MessageHandler listener) throws IllegalStateException\n+    {\n+        // TODO Auto-generated method stub\n+    }\n\\ No newline at end of file\n"
		}
	},
	"sha": "fc5dd874f3deda71e6cd42af994a5af5cb6be4af"
}