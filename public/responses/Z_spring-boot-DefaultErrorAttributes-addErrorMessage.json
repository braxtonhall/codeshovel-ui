{
	"repo": "https://github.com/spring-projects/spring-boot.git",
	"file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributes.java",
	"method": {
		"longName": "private void addErrorMessage(Map<String, Object> errorAttributes, Throwable error);",
		"startLine": 156,
		"methodName": "addErrorMessage",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "private"
	},
	"history": {
		"0ba4830b4fb20deea040ca5e1c9a34651708b222": {
			"type": "Yfilerename",
			"commitMessage": "Relocate projects to spring-boot-project\n\nMove projects to better reflect the way that Spring Boot is released.\n\nThe following projects are under `spring-boot-project`:\n\n  - `spring-boot`\n  - `spring-boot-autoconfigure`\n  - `spring-boot-tools`\n  - `spring-boot-starters`\n  - `spring-boot-actuator`\n  - `spring-boot-actuator-autoconfigure`\n  - `spring-boot-test`\n  - `spring-boot-test-autoconfigure`\n  - `spring-boot-devtools`\n  - `spring-boot-cli`\n  - `spring-boot-docs`\n\nSee gh-9316\n",
			"commitDate": "2017-10-04, 4:34 PM",
			"commitName": "0ba4830b4fb20deea040ca5e1c9a34651708b222",
			"commitAuthor": "Phillip Webb",
			"commitDateOld": "2017-10-04, 4:04 PM",
			"commitNameOld": "0419d42b7ca37611955bc0211359c215e5477fa4",
			"commitAuthorOld": "Phillip Webb",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "spring-boot/src/main/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributes.java",
				"newPath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributes.java"
			}
		},
		"2e51b48cd9ad9ad3e599aa0cb0b916061a061dfa": {
			"type": "Ymovefromfile",
			"commitMessage": "Refactor actuator package locations\n\nRestructure actuator packages to improve structure. The following\nchanges have been made:\n\n - Separate actuator and actuator auto-configuration into different\n   modules.\n - Move endpoint code into `spring-boot-actuator`.\n - Move `Endpoint` implementations from a single package into\n   technology specific packages.\n - Move `HealthIndicator` implementations from a single package into\n   technology specific packages.\n - As much as possible attempt to mirror the `spring-boot` package\n   structure and class naming in `spring-boot-actuator` and\n   `spring-boot-actuator-autoconfigure`.\n - Move `DataSourceBuilder` and DataSource meta-data support from\n   `spring-boot-actuator` to `spring-boot`.\n\nFixes gh-10261\n",
			"commitDate": "2017-09-12, 12:11 AM",
			"commitName": "2e51b48cd9ad9ad3e599aa0cb0b916061a061dfa",
			"commitAuthor": "Phillip Webb",
			"commitDateOld": "2017-09-12, 12:02 AM",
			"commitNameOld": "0f99b29b1a8b8c61e9e5b0ed23bc6b42941975eb",
			"commitAuthorOld": "Phillip Webb",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/DefaultErrorAttributes.java",
				"newPath": "spring-boot/src/main/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributes.java",
				"oldMethodName": "addErrorMessage",
				"newMethodName": "addErrorMessage"
			}
		},
		"b76ca0bf8f61aafe2f812911f208200c96c4bc69": {
			"type": "Yfilerename",
			"commitMessage": "Restructure web auto-configuration\n\nRestructure `org.springframework.boot.autoconfigure.web` to better align\nwith the new package structure in `spring-boot`.\n\nAuto-configuration is now split into client, servlet and reactive\nsub-packages. In addition a new `http` package now handles common\nHTTP concerns.\n\nFixes gh-8616\n",
			"commitDate": "2017-03-14, 10:06 PM",
			"commitName": "b76ca0bf8f61aafe2f812911f208200c96c4bc69",
			"commitAuthor": "Phillip Webb",
			"commitDateOld": "2017-03-14, 10:03 PM",
			"commitNameOld": "33e54ed7238c515531e93cbd2e159664a4b5dc62",
			"commitAuthorOld": "Phillip Webb",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorAttributes.java",
				"newPath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/DefaultErrorAttributes.java"
			}
		},
		"266335339db46d2487ffafcff9a8c0a316552abc": {
			"type": "Ybodychange",
			"commitMessage": "Extract BindingResult if necessary\n\nPreviously, no `errors` attribute is made available in the standard JSON\nerror document if a request body object is invalid. This is due to the\nfact that the framework throws a `MethodArgumentNotValidException holding\na `BindingResult` object that was not detected.\n\nWe now make sure to extract the `BindingResult` from such exception.\n\nCloses gh-4166\n",
			"commitDate": "2015-10-14, 4:29 AM",
			"commitName": "266335339db46d2487ffafcff9a8c0a316552abc",
			"commitAuthor": "Stephane Nicoll",
			"commitDateOld": "2015-10-07, 11:32 PM",
			"commitNameOld": "6ab376e2e88ac9f3a4b1aa3c2962cba29d44965b",
			"commitAuthorOld": "Phillip Webb",
			"daysBetweenCommits": 6.21,
			"commitsBetweenForRepo": 78,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,16 +1,16 @@\n \tprivate void addErrorMessage(Map<String, Object> errorAttributes, Throwable error) {\n-\t\tif (!(error instanceof BindingResult)) {\n+\t\tBindingResult result = extractBindingResult(error);\n+\t\tif (result == null) {\n \t\t\terrorAttributes.put(\"message\", error.getMessage());\n \t\t\treturn;\n \t\t}\n-\t\tBindingResult result = (BindingResult) error;\n \t\tif (result.getErrorCount() > 0) {\n \t\t\terrorAttributes.put(\"errors\", result.getAllErrors());\n \t\t\terrorAttributes.put(\"message\",\n \t\t\t\t\t\"Validation failed for object='\" + result.getObjectName()\n \t\t\t\t\t\t\t+ \"'. Error count: \" + result.getErrorCount());\n \t\t}\n \t\telse {\n \t\t\terrorAttributes.put(\"message\", \"No errors\");\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9e56c38b7ac49a87330581336bb36910416fbed5": {
			"type": "Yfilerename",
			"commitMessage": "Rename DefaulErrorAttributes to DefaultErrorAttributes\n\nfixes #853\n",
			"commitDate": "2014-05-13, 8:43 AM",
			"commitName": "9e56c38b7ac49a87330581336bb36910416fbed5",
			"commitAuthor": "Christian Dupuis",
			"commitDateOld": "2014-05-13, 8:32 AM",
			"commitNameOld": "d8ec2719d7b1b996fc1b960060d892f11daded2c",
			"commitAuthorOld": "Christian Dupuis",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaulErrorAttributes.java",
				"newPath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorAttributes.java"
			}
		},
		"30ac768cbfca5d6aaa3719028033c792da789853": {
			"type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
			"commitMessage": "Remove @ControllerAdvice from BasicErrorController\n\nUpdate the BasicErrorController so that it no longer needs to implement\n@ControllerAdvice or have an @ExceptionHandler method.\n\nA new ErrorAttributes interface is now used to obtain error details,\nthe DefaultErrorAttributes implementation uses a\nHandlerExceptionResolver to obtain root exception details if the\n`javax.servlet.error.*` attributes are missing.\n\nThis change also removes the need for the extract(...) method on\nErrorController as classes such as WebRequestTraceFilter can\nnow use the ErrorAttributes interface directly.\n\nSee gh-839, gh-538\nFixes gh-843\n",
			"commitDate": "2014-05-12, 11:46 AM",
			"commitName": "30ac768cbfca5d6aaa3719028033c792da789853",
			"commitAuthor": "Phillip Webb",
			"subchanges": [
				{
					"type": "Ymovefromfile",
					"commitMessage": "Remove @ControllerAdvice from BasicErrorController\n\nUpdate the BasicErrorController so that it no longer needs to implement\n@ControllerAdvice or have an @ExceptionHandler method.\n\nA new ErrorAttributes interface is now used to obtain error details,\nthe DefaultErrorAttributes implementation uses a\nHandlerExceptionResolver to obtain root exception details if the\n`javax.servlet.error.*` attributes are missing.\n\nThis change also removes the need for the extract(...) method on\nErrorController as classes such as WebRequestTraceFilter can\nnow use the ErrorAttributes interface directly.\n\nSee gh-839, gh-538\nFixes gh-843\n",
					"commitDate": "2014-05-12, 11:46 AM",
					"commitName": "30ac768cbfca5d6aaa3719028033c792da789853",
					"commitAuthor": "Phillip Webb",
					"commitDateOld": "2014-05-12, 2:51 AM",
					"commitNameOld": "5dd77a725c9573437a451bea731f6f93deaabb6a",
					"commitAuthorOld": "Dave Syer",
					"daysBetweenCommits": 0.37,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,17 +1,16 @@\n-\tprotected void addMessage(Map<String, Object> map, Throwable error) {\n-\t\tif (error instanceof BindingResult) {\n-\t\t\tBindingResult result = (BindingResult) error;\n-\t\t\tif (result.getErrorCount() > 0) {\n-\t\t\t\tmap.put(\"errors\", result.getAllErrors());\n-\t\t\t\tmap.put(\"message\",\n-\t\t\t\t\t\t\"Validation failed for object='\" + result.getObjectName()\n-\t\t\t\t\t\t\t\t+ \"'. Error count: \" + result.getErrorCount());\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tmap.put(\"message\", \"No errors\");\n-\t\t\t}\n+\tprivate void addErrorMessage(Map<String, Object> errorAttributes, Throwable error) {\n+\t\tif (!(error instanceof BindingResult)) {\n+\t\t\terrorAttributes.put(\"message\", error.getMessage());\n+\t\t\treturn;\n+\t\t}\n+\t\tBindingResult result = (BindingResult) error;\n+\t\tif (result.getErrorCount() > 0) {\n+\t\t\terrorAttributes.put(\"errors\", result.getAllErrors());\n+\t\t\terrorAttributes.put(\"message\",\n+\t\t\t\t\t\"Validation failed for object='\" + result.getObjectName()\n+\t\t\t\t\t\t\t+ \"'. Error count: \" + result.getErrorCount());\n \t\t}\n \t\telse {\n-\t\t\tmap.put(\"message\", error.getMessage());\n+\t\t\terrorAttributes.put(\"message\", \"No errors\");\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/BasicErrorController.java",
						"newPath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaulErrorAttributes.java",
						"oldMethodName": "addMessage",
						"newMethodName": "addErrorMessage"
					}
				},
				{
					"type": "Ymodifierchange",
					"commitMessage": "Remove @ControllerAdvice from BasicErrorController\n\nUpdate the BasicErrorController so that it no longer needs to implement\n@ControllerAdvice or have an @ExceptionHandler method.\n\nA new ErrorAttributes interface is now used to obtain error details,\nthe DefaultErrorAttributes implementation uses a\nHandlerExceptionResolver to obtain root exception details if the\n`javax.servlet.error.*` attributes are missing.\n\nThis change also removes the need for the extract(...) method on\nErrorController as classes such as WebRequestTraceFilter can\nnow use the ErrorAttributes interface directly.\n\nSee gh-839, gh-538\nFixes gh-843\n",
					"commitDate": "2014-05-12, 11:46 AM",
					"commitName": "30ac768cbfca5d6aaa3719028033c792da789853",
					"commitAuthor": "Phillip Webb",
					"commitDateOld": "2014-05-12, 2:51 AM",
					"commitNameOld": "5dd77a725c9573437a451bea731f6f93deaabb6a",
					"commitAuthorOld": "Dave Syer",
					"daysBetweenCommits": 0.37,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,17 +1,16 @@\n-\tprotected void addMessage(Map<String, Object> map, Throwable error) {\n-\t\tif (error instanceof BindingResult) {\n-\t\t\tBindingResult result = (BindingResult) error;\n-\t\t\tif (result.getErrorCount() > 0) {\n-\t\t\t\tmap.put(\"errors\", result.getAllErrors());\n-\t\t\t\tmap.put(\"message\",\n-\t\t\t\t\t\t\"Validation failed for object='\" + result.getObjectName()\n-\t\t\t\t\t\t\t\t+ \"'. Error count: \" + result.getErrorCount());\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tmap.put(\"message\", \"No errors\");\n-\t\t\t}\n+\tprivate void addErrorMessage(Map<String, Object> errorAttributes, Throwable error) {\n+\t\tif (!(error instanceof BindingResult)) {\n+\t\t\terrorAttributes.put(\"message\", error.getMessage());\n+\t\t\treturn;\n+\t\t}\n+\t\tBindingResult result = (BindingResult) error;\n+\t\tif (result.getErrorCount() > 0) {\n+\t\t\terrorAttributes.put(\"errors\", result.getAllErrors());\n+\t\t\terrorAttributes.put(\"message\",\n+\t\t\t\t\t\"Validation failed for object='\" + result.getObjectName()\n+\t\t\t\t\t\t\t+ \"'. Error count: \" + result.getErrorCount());\n \t\t}\n \t\telse {\n-\t\t\tmap.put(\"message\", error.getMessage());\n+\t\t\terrorAttributes.put(\"message\", \"No errors\");\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[protected]",
						"newValue": "[private]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Remove @ControllerAdvice from BasicErrorController\n\nUpdate the BasicErrorController so that it no longer needs to implement\n@ControllerAdvice or have an @ExceptionHandler method.\n\nA new ErrorAttributes interface is now used to obtain error details,\nthe DefaultErrorAttributes implementation uses a\nHandlerExceptionResolver to obtain root exception details if the\n`javax.servlet.error.*` attributes are missing.\n\nThis change also removes the need for the extract(...) method on\nErrorController as classes such as WebRequestTraceFilter can\nnow use the ErrorAttributes interface directly.\n\nSee gh-839, gh-538\nFixes gh-843\n",
					"commitDate": "2014-05-12, 11:46 AM",
					"commitName": "30ac768cbfca5d6aaa3719028033c792da789853",
					"commitAuthor": "Phillip Webb",
					"commitDateOld": "2014-05-12, 2:51 AM",
					"commitNameOld": "5dd77a725c9573437a451bea731f6f93deaabb6a",
					"commitAuthorOld": "Dave Syer",
					"daysBetweenCommits": 0.37,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,17 +1,16 @@\n-\tprotected void addMessage(Map<String, Object> map, Throwable error) {\n-\t\tif (error instanceof BindingResult) {\n-\t\t\tBindingResult result = (BindingResult) error;\n-\t\t\tif (result.getErrorCount() > 0) {\n-\t\t\t\tmap.put(\"errors\", result.getAllErrors());\n-\t\t\t\tmap.put(\"message\",\n-\t\t\t\t\t\t\"Validation failed for object='\" + result.getObjectName()\n-\t\t\t\t\t\t\t\t+ \"'. Error count: \" + result.getErrorCount());\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tmap.put(\"message\", \"No errors\");\n-\t\t\t}\n+\tprivate void addErrorMessage(Map<String, Object> errorAttributes, Throwable error) {\n+\t\tif (!(error instanceof BindingResult)) {\n+\t\t\terrorAttributes.put(\"message\", error.getMessage());\n+\t\t\treturn;\n+\t\t}\n+\t\tBindingResult result = (BindingResult) error;\n+\t\tif (result.getErrorCount() > 0) {\n+\t\t\terrorAttributes.put(\"errors\", result.getAllErrors());\n+\t\t\terrorAttributes.put(\"message\",\n+\t\t\t\t\t\"Validation failed for object='\" + result.getObjectName()\n+\t\t\t\t\t\t\t+ \"'. Error count: \" + result.getErrorCount());\n \t\t}\n \t\telse {\n-\t\t\tmap.put(\"message\", error.getMessage());\n+\t\t\terrorAttributes.put(\"message\", \"No errors\");\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				},
				{
					"type": "Yrename",
					"commitMessage": "Remove @ControllerAdvice from BasicErrorController\n\nUpdate the BasicErrorController so that it no longer needs to implement\n@ControllerAdvice or have an @ExceptionHandler method.\n\nA new ErrorAttributes interface is now used to obtain error details,\nthe DefaultErrorAttributes implementation uses a\nHandlerExceptionResolver to obtain root exception details if the\n`javax.servlet.error.*` attributes are missing.\n\nThis change also removes the need for the extract(...) method on\nErrorController as classes such as WebRequestTraceFilter can\nnow use the ErrorAttributes interface directly.\n\nSee gh-839, gh-538\nFixes gh-843\n",
					"commitDate": "2014-05-12, 11:46 AM",
					"commitName": "30ac768cbfca5d6aaa3719028033c792da789853",
					"commitAuthor": "Phillip Webb",
					"commitDateOld": "2014-05-12, 2:51 AM",
					"commitNameOld": "5dd77a725c9573437a451bea731f6f93deaabb6a",
					"commitAuthorOld": "Dave Syer",
					"daysBetweenCommits": 0.37,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,17 +1,16 @@\n-\tprotected void addMessage(Map<String, Object> map, Throwable error) {\n-\t\tif (error instanceof BindingResult) {\n-\t\t\tBindingResult result = (BindingResult) error;\n-\t\t\tif (result.getErrorCount() > 0) {\n-\t\t\t\tmap.put(\"errors\", result.getAllErrors());\n-\t\t\t\tmap.put(\"message\",\n-\t\t\t\t\t\t\"Validation failed for object='\" + result.getObjectName()\n-\t\t\t\t\t\t\t\t+ \"'. Error count: \" + result.getErrorCount());\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tmap.put(\"message\", \"No errors\");\n-\t\t\t}\n+\tprivate void addErrorMessage(Map<String, Object> errorAttributes, Throwable error) {\n+\t\tif (!(error instanceof BindingResult)) {\n+\t\t\terrorAttributes.put(\"message\", error.getMessage());\n+\t\t\treturn;\n+\t\t}\n+\t\tBindingResult result = (BindingResult) error;\n+\t\tif (result.getErrorCount() > 0) {\n+\t\t\terrorAttributes.put(\"errors\", result.getAllErrors());\n+\t\t\terrorAttributes.put(\"message\",\n+\t\t\t\t\t\"Validation failed for object='\" + result.getObjectName()\n+\t\t\t\t\t\t\t+ \"'. Error count: \" + result.getErrorCount());\n \t\t}\n \t\telse {\n-\t\t\tmap.put(\"message\", error.getMessage());\n+\t\t\terrorAttributes.put(\"message\", \"No errors\");\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "addMessage",
						"newValue": "addErrorMessage"
					}
				},
				{
					"type": "Yparameterchange",
					"commitMessage": "Remove @ControllerAdvice from BasicErrorController\n\nUpdate the BasicErrorController so that it no longer needs to implement\n@ControllerAdvice or have an @ExceptionHandler method.\n\nA new ErrorAttributes interface is now used to obtain error details,\nthe DefaultErrorAttributes implementation uses a\nHandlerExceptionResolver to obtain root exception details if the\n`javax.servlet.error.*` attributes are missing.\n\nThis change also removes the need for the extract(...) method on\nErrorController as classes such as WebRequestTraceFilter can\nnow use the ErrorAttributes interface directly.\n\nSee gh-839, gh-538\nFixes gh-843\n",
					"commitDate": "2014-05-12, 11:46 AM",
					"commitName": "30ac768cbfca5d6aaa3719028033c792da789853",
					"commitAuthor": "Phillip Webb",
					"commitDateOld": "2014-05-12, 2:51 AM",
					"commitNameOld": "5dd77a725c9573437a451bea731f6f93deaabb6a",
					"commitAuthorOld": "Dave Syer",
					"daysBetweenCommits": 0.37,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,17 +1,16 @@\n-\tprotected void addMessage(Map<String, Object> map, Throwable error) {\n-\t\tif (error instanceof BindingResult) {\n-\t\t\tBindingResult result = (BindingResult) error;\n-\t\t\tif (result.getErrorCount() > 0) {\n-\t\t\t\tmap.put(\"errors\", result.getAllErrors());\n-\t\t\t\tmap.put(\"message\",\n-\t\t\t\t\t\t\"Validation failed for object='\" + result.getObjectName()\n-\t\t\t\t\t\t\t\t+ \"'. Error count: \" + result.getErrorCount());\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tmap.put(\"message\", \"No errors\");\n-\t\t\t}\n+\tprivate void addErrorMessage(Map<String, Object> errorAttributes, Throwable error) {\n+\t\tif (!(error instanceof BindingResult)) {\n+\t\t\terrorAttributes.put(\"message\", error.getMessage());\n+\t\t\treturn;\n+\t\t}\n+\t\tBindingResult result = (BindingResult) error;\n+\t\tif (result.getErrorCount() > 0) {\n+\t\t\terrorAttributes.put(\"errors\", result.getAllErrors());\n+\t\t\terrorAttributes.put(\"message\",\n+\t\t\t\t\t\"Validation failed for object='\" + result.getObjectName()\n+\t\t\t\t\t\t\t+ \"'. Error count: \" + result.getErrorCount());\n \t\t}\n \t\telse {\n-\t\t\tmap.put(\"message\", error.getMessage());\n+\t\t\terrorAttributes.put(\"message\", \"No errors\");\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[map-Map<String,Object>, error-Throwable]",
						"newValue": "[errorAttributes-Map<String,Object>, error-Throwable]"
					}
				}
			]
		},
		"ef4e83a879f34eac29700984137c0e68d5e4f8ae": {
			"type": "Yfilerename",
			"commitMessage": "Move ErrorController to autoconfig\n",
			"commitDate": "2014-04-29, 7:23 AM",
			"commitName": "ef4e83a879f34eac29700984137c0e68d5e4f8ae",
			"commitAuthor": "Dave Syer",
			"commitDateOld": "2014-04-29, 7:23 AM",
			"commitNameOld": "27580e726fa907c57590a0935673d1d7c620c57a",
			"commitAuthorOld": "Dave Syer",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/BasicErrorController.java",
				"newPath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/BasicErrorController.java"
			}
		},
		"27580e726fa907c57590a0935673d1d7c620c57a": {
			"type": "Yintroduced",
			"commitMessage": "Add generic error handling to BasicErrorController\n\nSince Spring supports gobal error handling through\n@ControllerAdvice, it is quite easy to set up more meta-data\nabout an exception for the BasicErrorController. You need\nto be careful not to swallow Security exceptions, and probably\nothers (optionally) so this feature needs a bit more work.\n\nSee gh-538\n",
			"commitDate": "2014-04-29, 7:23 AM",
			"commitName": "27580e726fa907c57590a0935673d1d7c620c57a",
			"commitAuthor": "Dave Syer",
			"diff": "@@ -0,0 +1,17 @@\n+\tprotected void addMessage(Map<String, Object> map, Throwable error) {\n+\t\tif (error instanceof BindingResult) {\n+\t\t\tBindingResult result = (BindingResult) error;\n+\t\t\tif (result.getErrorCount() > 0) {\n+\t\t\t\tmap.put(\"errors\", result.getAllErrors());\n+\t\t\t\tmap.put(\"message\",\n+\t\t\t\t\t\t\"Validation failed for object='\" + result.getObjectName()\n+\t\t\t\t\t\t\t\t+ \"'. Error count: \" + result.getErrorCount());\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tmap.put(\"message\", \"No errors\");\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\tmap.put(\"message\", error.getMessage());\n+\t\t}\n+\t}\n\\ No newline at end of file\n"
		}
	},
	"sha": "5cfe8dbee950dbf3a8de3ece2f6f3363f13d904a"
}