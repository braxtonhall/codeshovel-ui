{
	"repo": "https://github.com/eclipse/jetty.project.git",
	"file": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
	"method": {
		"longName": "public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback);",
		"startLine": 88,
		"methodName": "send",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "public"
	},
	"history": {
		"50c44f229786ada3706065772d3d8e876e10b9eb": {
			"type": "Ybodychange",
			"commitMessage": "Fixes #2454 - Avoid sending empty DATA frame in case of HTTP/2 trailers.\n\nUpdated the logic to avoid sending an empty data frame\nwhen only sending the trailers in HttpTransportOverHTTP2.send().\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
			"commitDate": "2018-04-18, 5:19 AM",
			"commitName": "50c44f229786ada3706065772d3d8e876e10b9eb",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2018-04-07, 3:25 AM",
			"commitNameOld": "06454f64098e01b42347841211afed229d8798a0",
			"commitAuthorOld": "Simone Bordet",
			"daysBetweenCommits": 11.08,
			"commitsBetweenForRepo": 18,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,91 +1,99 @@\n     public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n         if (info != null)\n         {\n             metaData = info;\n             int status = info.getStatus();\n             boolean interimResponse = status == HttpStatus.CONTINUE_100 || status == HttpStatus.PROCESSING_102;\n             if (interimResponse)\n             {\n                 // Must not commit interim responses.\n                 if (hasContent)\n                 {\n                     callback.failed(new IllegalStateException(\"Interim response cannot have content\"));\n                 }\n                 else\n                 {\n                     if (transportCallback.start(callback, false))\n                         sendHeadersFrame(info, false, transportCallback);\n                 }\n             }\n             else\n             {\n                 if (commit.compareAndSet(false, true))\n                 {\n                     if (hasContent)\n                     {\n                         Callback commitCallback = new Callback.Nested(callback)\n                         {\n                             @Override\n                             public void succeeded()\n                             {\n                                 if (lastContent)\n                                 {\n                                     Supplier<HttpFields> trailers = info.getTrailerSupplier();\n                                     if (transportCallback.start(new SendTrailers(getCallback(), trailers), false))\n                                         sendDataFrame(content, true, trailers == null, transportCallback);\n                                 }\n                                 else\n                                 {\n                                     if (transportCallback.start(getCallback(), false))\n                                         sendDataFrame(content, false, false, transportCallback);\n                                 }\n                             }\n                         };\n                         if (transportCallback.start(commitCallback, true))\n                             sendHeadersFrame(info, false, transportCallback);\n                     }\n                     else\n                     {\n                         if (lastContent)\n                         {\n                             Supplier<HttpFields> trailers = info.getTrailerSupplier();\n                             if (transportCallback.start(new SendTrailers(callback, trailers), true))\n                                 sendHeadersFrame(info, trailers == null, transportCallback);\n                         }\n                         else\n                         {\n                             if (transportCallback.start(callback, true))\n                                 sendHeadersFrame(info, false, transportCallback);\n                         }\n                     }\n                 }\n                 else\n                 {\n                     callback.failed(new IllegalStateException(\"committed\"));\n                 }\n             }\n         }\n         else\n         {\n             if (hasContent || lastContent)\n             {\n                 if (lastContent)\n                 {\n                     Supplier<HttpFields> trailers = metaData.getTrailerSupplier();\n-                    if (transportCallback.start(new SendTrailers(callback, trailers), false))\n-                        sendDataFrame(content, true, trailers == null, transportCallback);\n+                    SendTrailers sendTrailers = new SendTrailers(callback, trailers);\n+                    if (hasContent || trailers == null)\n+                    {\n+                        if (transportCallback.start(sendTrailers, false))\n+                            sendDataFrame(content, true, trailers == null, transportCallback);\n+                    }\n+                    else\n+                    {\n+                        sendTrailers.succeeded();\n+                    }\n                 }\n                 else\n                 {\n                     if (transportCallback.start(callback, false))\n                         sendDataFrame(content, false, false, transportCallback);\n                 }\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"06454f64098e01b42347841211afed229d8798a0": {
			"type": "Ybodychange",
			"commitMessage": "Fixes #2420 - Simplify HttpTransportOverHTTP2.\n\nRemoved usage of ternary expressions in favor of if/else statements\nto improve readability of the logic for the send() method.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
			"commitDate": "2018-04-07, 3:25 AM",
			"commitName": "06454f64098e01b42347841211afed229d8798a0",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2018-03-29, 3:31 AM",
			"commitNameOld": "072442a5e5d451680eeefb9b19df720c789ff5b3",
			"commitAuthorOld": "Simone Bordet",
			"daysBetweenCommits": 9,
			"commitsBetweenForRepo": 26,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,64 +1,91 @@\n     public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n         if (info != null)\n         {\n             metaData = info;\n-\n             int status = info.getStatus();\n-            boolean informational = HttpStatus.isInformational(status) && status != HttpStatus.SWITCHING_PROTOCOLS_101;\n-            if (informational)\n+            boolean interimResponse = status == HttpStatus.CONTINUE_100 || status == HttpStatus.PROCESSING_102;\n+            if (interimResponse)\n             {\n-                if (transportCallback.start(callback, false))\n-                    sendHeaders(info, false, transportCallback);\n+                // Must not commit interim responses.\n+                if (hasContent)\n+                {\n+                    callback.failed(new IllegalStateException(\"Interim response cannot have content\"));\n+                }\n+                else\n+                {\n+                    if (transportCallback.start(callback, false))\n+                        sendHeadersFrame(info, false, transportCallback);\n+                }\n             }\n             else\n             {\n-                boolean needsCommit = commit.compareAndSet(false, true);\n-                if (needsCommit)\n+                if (commit.compareAndSet(false, true))\n                 {\n-                    Supplier<HttpFields> trailers = info.getTrailerSupplier();\n-\n                     if (hasContent)\n                     {\n-                        Callback nested = trailers == null || !lastContent ? callback : new SendTrailers(callback);\n-                        Callback commitCallback = new Callback.Nested(nested)\n+                        Callback commitCallback = new Callback.Nested(callback)\n                         {\n                             @Override\n                             public void succeeded()\n                             {\n-                                if (transportCallback.start(nested, false))\n-                                    sendContent(content, lastContent, trailers == null && lastContent, transportCallback);\n+                                if (lastContent)\n+                                {\n+                                    Supplier<HttpFields> trailers = info.getTrailerSupplier();\n+                                    if (transportCallback.start(new SendTrailers(getCallback(), trailers), false))\n+                                        sendDataFrame(content, true, trailers == null, transportCallback);\n+                                }\n+                                else\n+                                {\n+                                    if (transportCallback.start(getCallback(), false))\n+                                        sendDataFrame(content, false, false, transportCallback);\n+                                }\n                             }\n                         };\n                         if (transportCallback.start(commitCallback, true))\n-                            sendHeaders(info, false, transportCallback);\n+                            sendHeadersFrame(info, false, transportCallback);\n                     }\n                     else\n                     {\n-                        Callback nested = trailers == null ? callback : new SendTrailers(callback);\n-                        if (transportCallback.start(nested, true))\n-                            sendHeaders(info, trailers == null && lastContent, transportCallback);\n+                        if (lastContent)\n+                        {\n+                            Supplier<HttpFields> trailers = info.getTrailerSupplier();\n+                            if (transportCallback.start(new SendTrailers(callback, trailers), true))\n+                                sendHeadersFrame(info, trailers == null, transportCallback);\n+                        }\n+                        else\n+                        {\n+                            if (transportCallback.start(callback, true))\n+                                sendHeadersFrame(info, false, transportCallback);\n+                        }\n                     }\n                 }\n                 else\n                 {\n                     callback.failed(new IllegalStateException(\"committed\"));\n                 }\n             }\n         }\n         else\n         {\n             if (hasContent || lastContent)\n             {\n-                Supplier<HttpFields> trailers = metaData.getTrailerSupplier();\n-                Callback nested = trailers == null ? callback : new SendTrailers(callback);\n-                if (transportCallback.start(nested, false))\n-                    sendContent(content, lastContent, trailers == null && lastContent, transportCallback);\n+                if (lastContent)\n+                {\n+                    Supplier<HttpFields> trailers = metaData.getTrailerSupplier();\n+                    if (transportCallback.start(new SendTrailers(callback, trailers), false))\n+                        sendDataFrame(content, true, trailers == null, transportCallback);\n+                }\n+                else\n+                {\n+                    if (transportCallback.start(callback, false))\n+                        sendDataFrame(content, false, false, transportCallback);\n+                }\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c285d6f8bbd839906e8c39d23db2f343be22c6ca": {
			"type": "Ybodychange",
			"commitMessage": "Fixes #612 - Support HTTP Trailer.\n\nAdded support on both the server and the client, for HTTP/1 and HTTP/2.\n",
			"commitDate": "2017-04-03, 1:25 PM",
			"commitName": "c285d6f8bbd839906e8c39d23db2f343be22c6ca",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2017-01-19, 10:26 AM",
			"commitNameOld": "0c8273f2ca1f9bf2064cd9c4c939d2546443f759",
			"commitAuthorOld": "Simone Bordet",
			"daysBetweenCommits": 74.08,
			"commitsBetweenForRepo": 194,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,52 +1,64 @@\n     public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n-\n         if (info != null)\n         {\n+            metaData = info;\n+\n             int status = info.getStatus();\n             boolean informational = HttpStatus.isInformational(status) && status != HttpStatus.SWITCHING_PROTOCOLS_101;\n-            boolean committed = false;\n-            if (!informational)\n-                committed = commit.compareAndSet(false, true);\n-\n-            if (committed || informational)\n+            if (informational)\n             {\n-                if (hasContent)\n-                {\n-                    Callback commitCallback = new Callback.Nested(callback)\n-                    {\n-                        @Override\n-                        public void succeeded()\n-                        {\n-                            if (transportCallback.start(callback, false))\n-                                send(content, lastContent, transportCallback);\n-                        }\n-                    };\n-                    if (transportCallback.start(commitCallback, true))\n-                        commit(info, false, transportCallback);\n-                }\n-                else\n-                {\n-                    if (transportCallback.start(callback, false))\n-                        commit(info, lastContent, transportCallback);\n-                }\n+                if (transportCallback.start(callback, false))\n+                    sendHeaders(info, false, transportCallback);\n             }\n             else\n             {\n-                callback.failed(new IllegalStateException(\"committed\"));\n+                boolean needsCommit = commit.compareAndSet(false, true);\n+                if (needsCommit)\n+                {\n+                    Supplier<HttpFields> trailers = info.getTrailerSupplier();\n+\n+                    if (hasContent)\n+                    {\n+                        Callback nested = trailers == null || !lastContent ? callback : new SendTrailers(callback);\n+                        Callback commitCallback = new Callback.Nested(nested)\n+                        {\n+                            @Override\n+                            public void succeeded()\n+                            {\n+                                if (transportCallback.start(nested, false))\n+                                    sendContent(content, lastContent, trailers == null && lastContent, transportCallback);\n+                            }\n+                        };\n+                        if (transportCallback.start(commitCallback, true))\n+                            sendHeaders(info, false, transportCallback);\n+                    }\n+                    else\n+                    {\n+                        Callback nested = trailers == null ? callback : new SendTrailers(callback);\n+                        if (transportCallback.start(nested, true))\n+                            sendHeaders(info, trailers == null && lastContent, transportCallback);\n+                    }\n+                }\n+                else\n+                {\n+                    callback.failed(new IllegalStateException(\"committed\"));\n+                }\n             }\n         }\n         else\n         {\n             if (hasContent || lastContent)\n             {\n-                if (transportCallback.start(callback, false))\n-                    send(content, lastContent, transportCallback);\n+                Supplier<HttpFields> trailers = metaData.getTrailerSupplier();\n+                Callback nested = trailers == null ? callback : new SendTrailers(callback);\n+                if (transportCallback.start(nested, false))\n+                    sendContent(content, lastContent, trailers == null && lastContent, transportCallback);\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"6d485b2777b116ca4e09672ac8db8c4eadd46297": {
			"type": "Ybodychange",
			"commitMessage": "Fixes #902 - Expect: 100-Continue does not work with HTTP/2.\n\nImproved handling of the 100 status code in both client and server.\n",
			"commitDate": "2016-09-06, 3:01 AM",
			"commitName": "6d485b2777b116ca4e09672ac8db8c4eadd46297",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2016-09-05, 10:13 AM",
			"commitNameOld": "705a68dfc41d512c813b7e40076462f5e9caf26d",
			"commitAuthorOld": "Simone Bordet",
			"daysBetweenCommits": 0.7,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,55 +1,52 @@\n     public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n-        // info != null | content != 0 | last = true => commit + send/end\n-        // info != null | content != 0 | last = false => commit + send\n-        // info != null | content == 0 | last = true => commit/end\n-        // info != null | content == 0 | last = false => commit\n-        // info == null | content != 0 | last = true => send/end\n-        // info == null | content != 0 | last = false => send\n-        // info == null | content == 0 | last = true => send/end\n-        // info == null | content == 0 | last = false => noop\n-\n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n \n         if (info != null)\n         {\n-            if (commit.compareAndSet(false, true))\n+            int status = info.getStatus();\n+            boolean informational = HttpStatus.isInformational(status) && status != HttpStatus.SWITCHING_PROTOCOLS_101;\n+            boolean committed = false;\n+            if (!informational)\n+                committed = commit.compareAndSet(false, true);\n+\n+            if (committed || informational)\n             {\n                 if (hasContent)\n                 {\n                     Callback commitCallback = new Callback.Nested(callback)\n                     {\n                         @Override\n                         public void succeeded()\n                         {\n                             if (transportCallback.start(callback, false))\n                                 send(content, lastContent, transportCallback);\n                         }\n                     };\n                     if (transportCallback.start(commitCallback, true))\n                         commit(info, false, transportCallback);\n                 }\n                 else\n                 {\n                     if (transportCallback.start(callback, false))\n                         commit(info, lastContent, transportCallback);\n                 }\n             }\n             else\n             {\n                 callback.failed(new IllegalStateException(\"committed\"));\n             }\n         }\n         else\n         {\n             if (hasContent || lastContent)\n             {\n                 if (transportCallback.start(callback, false))\n                     send(content, lastContent, transportCallback);\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"705a68dfc41d512c813b7e40076462f5e9caf26d": {
			"type": "Ybodychange",
			"commitMessage": "Issue #845 - Improve blocking IO for data rate limiting.\n\nMoved tests to run HTTP and HTTP/2 tests, and added more test cases.\n",
			"commitDate": "2016-09-05, 10:13 AM",
			"commitName": "705a68dfc41d512c813b7e40076462f5e9caf26d",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2016-07-21, 8:43 AM",
			"commitNameOld": "78d27c9a28cfd1c6ee2b6dff666894d547bae366",
			"commitAuthorOld": "Simone Bordet",
			"daysBetweenCommits": 46.06,
			"commitsBetweenForRepo": 105,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,44 +1,55 @@\n     public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n         // info != null | content != 0 | last = true => commit + send/end\n         // info != null | content != 0 | last = false => commit + send\n         // info != null | content == 0 | last = true => commit/end\n         // info != null | content == 0 | last = false => commit\n         // info == null | content != 0 | last = true => send/end\n         // info == null | content != 0 | last = false => send\n         // info == null | content == 0 | last = true => send/end\n         // info == null | content == 0 | last = false => noop\n \n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n \n         if (info != null)\n         {\n             if (commit.compareAndSet(false, true))\n             {\n                 if (hasContent)\n                 {\n-                    commit(info, false, commitCallback);\n-                    send(content, lastContent, callback);\n+                    Callback commitCallback = new Callback.Nested(callback)\n+                    {\n+                        @Override\n+                        public void succeeded()\n+                        {\n+                            if (transportCallback.start(callback, false))\n+                                send(content, lastContent, transportCallback);\n+                        }\n+                    };\n+                    if (transportCallback.start(commitCallback, true))\n+                        commit(info, false, transportCallback);\n                 }\n                 else\n                 {\n-                    commit(info, lastContent, callback);\n+                    if (transportCallback.start(callback, false))\n+                        commit(info, lastContent, transportCallback);\n                 }\n             }\n             else\n             {\n                 callback.failed(new IllegalStateException(\"committed\"));\n             }\n         }\n         else\n         {\n             if (hasContent || lastContent)\n             {\n-                send(content, lastContent, callback);\n+                if (transportCallback.start(callback, false))\n+                    send(content, lastContent, transportCallback);\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"98c328fb23493025036665ac1ad82849e01c8f70": {
			"type": "Ybodychange",
			"commitMessage": "Jetty 9.4.x 572 (#614)\n\n* Issue #572 Scheduling Strategy Deadlocks\r\n\r\nImplemented dual strategy idea from #572 discussion\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* fixed http2 strategy choice\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* code cleanups\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* clean up seelctor actions/products\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* cleanups\r\n",
			"commitDate": "2016-06-02, 4:07 PM",
			"commitName": "98c328fb23493025036665ac1ad82849e01c8f70",
			"commitAuthor": "Greg Wilkins",
			"commitDateOld": "2016-05-11, 4:57 AM",
			"commitNameOld": "d8961139f31a41485bd499a9ddde311be38e64e0",
			"commitAuthorOld": "",
			"daysBetweenCommits": 22.47,
			"commitsBetweenForRepo": 90,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,60 +1,67 @@\n     public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n         // info != null | content != 0 | last = true => commit + send/end\n         // info != null | content != 0 | last = false => commit + send\n         // info != null | content == 0 | last = true => commit/end\n         // info != null | content == 0 | last = false => commit\n         // info == null | content != 0 | last = true => send/end\n         // info == null | content != 0 | last = false => send\n         // info == null | content == 0 | last = true => send/end\n         // info == null | content == 0 | last = false => noop\n \n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n \n         if (info != null)\n         {\n             if (commit.compareAndSet(false, true))\n             {\n                 if (hasContent)\n                 {\n-                    commit(info, false, new Callback.NonBlocking()\n+                    commit(info, false, new Callback()\n                     {\n                         @Override\n+                        public InvocationType getInvocationType()\n+                        {\n+                            // TODO is this dependent on the callback itself?\n+                            return InvocationType.NON_BLOCKING;\n+                        }\n+                        \n+                        @Override\n                         public void succeeded()\n                         {\n                             if (LOG.isDebugEnabled())\n                                 LOG.debug(\"HTTP2 Response #{}/{} committed\", stream.getId(), Integer.toHexString(stream.getSession().hashCode()));\n                             send(content, lastContent, callback);\n                         }\n \n                         @Override\n                         public void failed(Throwable x)\n                         {\n                             if (LOG.isDebugEnabled())\n                                 LOG.debug(\"HTTP2 Response #\" + stream.getId() + \"/\" + Integer.toHexString(stream.getSession().hashCode()) + \" failed to commit\", x);\n                             callback.failed(x);\n                         }\n                     });\n                 }\n                 else\n                 {\n                     commit(info, lastContent, callback);\n                 }\n             }\n             else\n             {\n                 callback.failed(new IllegalStateException(\"committed\"));\n             }\n         }\n         else\n         {\n             if (hasContent || lastContent)\n             {\n                 send(content, lastContent, callback);\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"65b11654c5635a0da71add52bb9e2f374ef451b1": {
			"type": "Ybodychange",
			"commitMessage": "Improved logging.\n",
			"commitDate": "2016-02-29, 2:56 AM",
			"commitName": "65b11654c5635a0da71add52bb9e2f374ef451b1",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2016-01-04, 1:34 PM",
			"commitNameOld": "ac24196b0d341534793308d585161381d5bca4ac",
			"commitAuthorOld": "",
			"daysBetweenCommits": 55.56,
			"commitsBetweenForRepo": 166,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,60 +1,60 @@\n     public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n         // info != null | content != 0 | last = true => commit + send/end\n         // info != null | content != 0 | last = false => commit + send\n         // info != null | content == 0 | last = true => commit/end\n         // info != null | content == 0 | last = false => commit\n         // info == null | content != 0 | last = true => send/end\n         // info == null | content != 0 | last = false => send\n         // info == null | content == 0 | last = true => send/end\n         // info == null | content == 0 | last = false => noop\n \n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n \n         if (info != null)\n         {\n             if (commit.compareAndSet(false, true))\n             {\n                 if (hasContent)\n                 {\n                     commit(info, false, new Callback()\n                     {\n                         @Override\n                         public void succeeded()\n                         {\n                             if (LOG.isDebugEnabled())\n-                                LOG.debug(\"HTTP2 Response #{} committed\", stream.getId());\n+                                LOG.debug(\"HTTP2 Response #{}/{} committed\", stream.getId(), Integer.toHexString(stream.getSession().hashCode()));\n                             send(content, lastContent, callback);\n                         }\n \n                         @Override\n                         public void failed(Throwable x)\n                         {\n                             if (LOG.isDebugEnabled())\n-                                LOG.debug(\"HTTP2 Response #\" + stream.getId() + \" failed to commit\", x);\n+                                LOG.debug(\"HTTP2 Response #\" + stream.getId() + \"/\" + Integer.toHexString(stream.getSession().hashCode()) + \" failed to commit\", x);\n                             callback.failed(x);\n                         }\n                     });\n                 }\n                 else\n                 {\n                     commit(info, lastContent, callback);\n                 }\n             }\n             else\n             {\n                 callback.failed(new IllegalStateException(\"committed\"));\n             }\n         }\n         else\n         {\n             if (hasContent || lastContent)\n             {\n                 send(content, lastContent, callback);\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"279e56d3366498c23a497656658d9e330a1aa866": {
			"type": "Ybodychange",
			"commitMessage": "481718 - Improve stream interleaving.\n\nIntroduced the constraint in the API that Stream.headers() and\nStream.data() calls cannot be invoked if the previous operation did\nnot complete.\n\nImproved interleaving by appending unfinished DATA frames at the end\nof the queue, rather than prepending them.\n",
			"commitDate": "2015-11-09, 12:58 PM",
			"commitName": "279e56d3366498c23a497656658d9e330a1aa866",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2015-07-22, 12:31 AM",
			"commitNameOld": "607239028c0be8ef80dbabdb229eb44b3778d630",
			"commitAuthorOld": "Greg Wilkins",
			"daysBetweenCommits": 110.56,
			"commitsBetweenForRepo": 360,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,44 +1,60 @@\n     public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n         // info != null | content != 0 | last = true => commit + send/end\n         // info != null | content != 0 | last = false => commit + send\n         // info != null | content == 0 | last = true => commit/end\n         // info != null | content == 0 | last = false => commit\n         // info == null | content != 0 | last = true => send/end\n         // info == null | content != 0 | last = false => send\n         // info == null | content == 0 | last = true => send/end\n         // info == null | content == 0 | last = false => noop\n \n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n \n         if (info != null)\n         {\n             if (commit.compareAndSet(false, true))\n             {\n                 if (hasContent)\n                 {\n-                    commit(info, false, commitCallback);\n-                    send(content, lastContent, callback);\n+                    commit(info, false, new Callback()\n+                    {\n+                        @Override\n+                        public void succeeded()\n+                        {\n+                            if (LOG.isDebugEnabled())\n+                                LOG.debug(\"HTTP2 Response #{} committed\", stream.getId());\n+                            send(content, lastContent, callback);\n+                        }\n+\n+                        @Override\n+                        public void failed(Throwable x)\n+                        {\n+                            if (LOG.isDebugEnabled())\n+                                LOG.debug(\"HTTP2 Response #\" + stream.getId() + \" failed to commit\", x);\n+                            callback.failed(x);\n+                        }\n+                    });\n                 }\n                 else\n                 {\n                     commit(info, lastContent, callback);\n                 }\n             }\n             else\n             {\n                 callback.failed(new IllegalStateException(\"committed\"));\n             }\n         }\n         else\n         {\n             if (hasContent || lastContent)\n             {\n                 send(content, lastContent, callback);\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"e35c51eb7d91d099e7e84e308d30010ecaa6a0c5": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Implemented dispatch to the application using an ExecutionStrategy.\n\nNow instead of having the channel to dispatch when it detects that it\nhas to call the application (upon receiving a HEADERS frame, or upon\na push \"fake\" request), now the whole mechanism is controlled by an\nExecutionStrategy.\n",
			"commitDate": "2014-12-18, 8:14 AM",
			"commitName": "e35c51eb7d91d099e7e84e308d30010ecaa6a0c5",
			"commitAuthor": "Simone Bordet",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Implemented dispatch to the application using an ExecutionStrategy.\n\nNow instead of having the channel to dispatch when it detects that it\nhas to call the application (upon receiving a HEADERS frame, or upon\na push \"fake\" request), now the whole mechanism is controlled by an\nExecutionStrategy.\n",
					"commitDate": "2014-12-18, 8:14 AM",
					"commitName": "e35c51eb7d91d099e7e84e308d30010ecaa6a0c5",
					"commitAuthor": "Simone Bordet",
					"commitDateOld": "2014-12-09, 3:27 AM",
					"commitNameOld": "dfe9dc3115c148e6f8a47034fda5e2f62d1dbc9d",
					"commitAuthorOld": "Greg Wilkins",
					"daysBetweenCommits": 9.2,
					"commitsBetweenForRepo": 19,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,46 +1,44 @@\n-    public void send(MetaData.Response info, boolean head, ByteBuffer content, boolean lastContent, Callback callback)\n+    public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n-        boolean isHeadRequest = head;\n-\n         // info != null | content != 0 | last = true => commit + send/end\n         // info != null | content != 0 | last = false => commit + send\n         // info != null | content == 0 | last = true => commit/end\n         // info != null | content == 0 | last = false => commit\n         // info == null | content != 0 | last = true => send/end\n         // info == null | content != 0 | last = false => send\n         // info == null | content == 0 | last = true => send/end\n         // info == null | content == 0 | last = false => noop\n \n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n \n         if (info != null)\n         {\n             if (commit.compareAndSet(false, true))\n             {\n                 if (hasContent)\n                 {\n                     commit(info, false, commitCallback);\n                     send(content, lastContent, callback);\n                 }\n                 else\n                 {\n                     commit(info, lastContent, callback);\n                 }\n             }\n             else\n             {\n                 callback.failed(new IllegalStateException(\"committed\"));\n             }\n         }\n         else\n         {\n             if (hasContent || lastContent)\n             {\n                 send(content, lastContent, callback);\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[info-MetaData.Response, head-boolean, content-ByteBuffer, lastContent-boolean, callback-Callback]",
						"newValue": "[info-MetaData.Response, isHeadRequest-boolean, content-ByteBuffer, lastContent-boolean, callback-Callback]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Implemented dispatch to the application using an ExecutionStrategy.\n\nNow instead of having the channel to dispatch when it detects that it\nhas to call the application (upon receiving a HEADERS frame, or upon\na push \"fake\" request), now the whole mechanism is controlled by an\nExecutionStrategy.\n",
					"commitDate": "2014-12-18, 8:14 AM",
					"commitName": "e35c51eb7d91d099e7e84e308d30010ecaa6a0c5",
					"commitAuthor": "Simone Bordet",
					"commitDateOld": "2014-12-09, 3:27 AM",
					"commitNameOld": "dfe9dc3115c148e6f8a47034fda5e2f62d1dbc9d",
					"commitAuthorOld": "Greg Wilkins",
					"daysBetweenCommits": 9.2,
					"commitsBetweenForRepo": 19,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,46 +1,44 @@\n-    public void send(MetaData.Response info, boolean head, ByteBuffer content, boolean lastContent, Callback callback)\n+    public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n-        boolean isHeadRequest = head;\n-\n         // info != null | content != 0 | last = true => commit + send/end\n         // info != null | content != 0 | last = false => commit + send\n         // info != null | content == 0 | last = true => commit/end\n         // info != null | content == 0 | last = false => commit\n         // info == null | content != 0 | last = true => send/end\n         // info == null | content != 0 | last = false => send\n         // info == null | content == 0 | last = true => send/end\n         // info == null | content == 0 | last = false => noop\n \n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n \n         if (info != null)\n         {\n             if (commit.compareAndSet(false, true))\n             {\n                 if (hasContent)\n                 {\n                     commit(info, false, commitCallback);\n                     send(content, lastContent, callback);\n                 }\n                 else\n                 {\n                     commit(info, lastContent, callback);\n                 }\n             }\n             else\n             {\n                 callback.failed(new IllegalStateException(\"committed\"));\n             }\n         }\n         else\n         {\n             if (hasContent || lastContent)\n             {\n                 send(content, lastContent, callback);\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"31e448ffd677d9360c4132a63b08fe53c860cf7c": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Removed duplication of HttpGenerator$Info vs http.MetaData\n\nUse MetaData throughout code base\n",
			"commitDate": "2014-10-23, 9:51 PM",
			"commitName": "31e448ffd677d9360c4132a63b08fe53c860cf7c",
			"commitAuthor": "Greg Wilkins",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Removed duplication of HttpGenerator$Info vs http.MetaData\n\nUse MetaData throughout code base\n",
					"commitDate": "2014-10-23, 9:51 PM",
					"commitName": "31e448ffd677d9360c4132a63b08fe53c860cf7c",
					"commitAuthor": "Greg Wilkins",
					"commitDateOld": "2014-09-18, 2:50 AM",
					"commitNameOld": "418a493337a8837172032e62a53587e478f21c86",
					"commitAuthorOld": "Simone Bordet",
					"daysBetweenCommits": 35.79,
					"commitsBetweenForRepo": 132,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,46 +1,46 @@\n-    public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback)\n+    public void send(MetaData.Response info, boolean head, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n-        boolean isHeadRequest = HttpMethod.HEAD.is(request.getMethod());\n+        boolean isHeadRequest = head;\n \n         // info != null | content != 0 | last = true => commit + send/end\n         // info != null | content != 0 | last = false => commit + send\n         // info != null | content == 0 | last = true => commit/end\n         // info != null | content == 0 | last = false => commit\n         // info == null | content != 0 | last = true => send/end\n         // info == null | content != 0 | last = false => send\n         // info == null | content == 0 | last = true => send/end\n         // info == null | content == 0 | last = false => noop\n \n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n \n         if (info != null)\n         {\n             if (commit.compareAndSet(false, true))\n             {\n                 if (hasContent)\n                 {\n                     commit(info, false, commitCallback);\n                     send(content, lastContent, callback);\n                 }\n                 else\n                 {\n                     commit(info, lastContent, callback);\n                 }\n             }\n             else\n             {\n                 callback.failed(new IllegalStateException(\"committed\"));\n             }\n         }\n         else\n         {\n             if (hasContent || lastContent)\n             {\n                 send(content, lastContent, callback);\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[info-HttpGenerator.ResponseInfo, content-ByteBuffer, lastContent-boolean, callback-Callback]",
						"newValue": "[info-MetaData.Response, head-boolean, content-ByteBuffer, lastContent-boolean, callback-Callback]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Removed duplication of HttpGenerator$Info vs http.MetaData\n\nUse MetaData throughout code base\n",
					"commitDate": "2014-10-23, 9:51 PM",
					"commitName": "31e448ffd677d9360c4132a63b08fe53c860cf7c",
					"commitAuthor": "Greg Wilkins",
					"commitDateOld": "2014-09-18, 2:50 AM",
					"commitNameOld": "418a493337a8837172032e62a53587e478f21c86",
					"commitAuthorOld": "Simone Bordet",
					"daysBetweenCommits": 35.79,
					"commitsBetweenForRepo": 132,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,46 +1,46 @@\n-    public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback)\n+    public void send(MetaData.Response info, boolean head, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n-        boolean isHeadRequest = HttpMethod.HEAD.is(request.getMethod());\n+        boolean isHeadRequest = head;\n \n         // info != null | content != 0 | last = true => commit + send/end\n         // info != null | content != 0 | last = false => commit + send\n         // info != null | content == 0 | last = true => commit/end\n         // info != null | content == 0 | last = false => commit\n         // info == null | content != 0 | last = true => send/end\n         // info == null | content != 0 | last = false => send\n         // info == null | content == 0 | last = true => send/end\n         // info == null | content == 0 | last = false => noop\n \n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n \n         if (info != null)\n         {\n             if (commit.compareAndSet(false, true))\n             {\n                 if (hasContent)\n                 {\n                     commit(info, false, commitCallback);\n                     send(content, lastContent, callback);\n                 }\n                 else\n                 {\n                     commit(info, lastContent, callback);\n                 }\n             }\n             else\n             {\n                 callback.failed(new IllegalStateException(\"committed\"));\n             }\n         }\n         else\n         {\n             if (hasContent || lastContent)\n             {\n                 send(content, lastContent, callback);\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"418a493337a8837172032e62a53587e478f21c86": {
			"type": "Ybodychange",
			"commitMessage": "More simplifications for the send() implementation.\n",
			"commitDate": "2014-09-18, 2:50 AM",
			"commitName": "418a493337a8837172032e62a53587e478f21c86",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2014-09-18, 1:23 AM",
			"commitNameOld": "0acee9851f3853883960edc91ebca6dd3ddc3c51",
			"commitAuthorOld": "Greg Wilkins",
			"daysBetweenCommits": 0.06,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,47 +1,46 @@\n     public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n         boolean isHeadRequest = HttpMethod.HEAD.is(request.getMethod());\n \n         // info != null | content != 0 | last = true => commit + send/end\n         // info != null | content != 0 | last = false => commit + send\n         // info != null | content == 0 | last = true => commit/end\n         // info != null | content == 0 | last = false => commit\n         // info == null | content != 0 | last = true => send/end\n         // info == null | content != 0 | last = false => send\n         // info == null | content == 0 | last = true => send/end\n         // info == null | content == 0 | last = false => noop\n \n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n-        boolean sendContent = hasContent || (info == null && lastContent);\n \n         if (info != null)\n         {\n             if (commit.compareAndSet(false, true))\n             {\n-                if (sendContent)\n+                if (hasContent)\n                 {\n                     commit(info, false, commitCallback);\n                     send(content, lastContent, callback);\n                 }\n                 else\n                 {\n                     commit(info, lastContent, callback);\n                 }\n             }\n             else\n             {\n                 callback.failed(new IllegalStateException(\"committed\"));\n             }\n         }\n         else\n         {\n-            if (sendContent)\n+            if (hasContent || lastContent)\n             {\n                 send(content, lastContent, callback);\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0acee9851f3853883960edc91ebca6dd3ddc3c51": {
			"type": "Ybodychange",
			"commitMessage": "minor cleanups of exceptions\n",
			"commitDate": "2014-09-18, 1:23 AM",
			"commitName": "0acee9851f3853883960edc91ebca6dd3ddc3c51",
			"commitAuthor": "Greg Wilkins",
			"commitDateOld": "2014-09-17, 9:07 AM",
			"commitNameOld": "3e602117b477ea8ed33d2104e85a64184fcc604f",
			"commitAuthorOld": "Simone Bordet",
			"daysBetweenCommits": 0.68,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,47 +1,47 @@\n     public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n         boolean isHeadRequest = HttpMethod.HEAD.is(request.getMethod());\n \n         // info != null | content != 0 | last = true => commit + send/end\n         // info != null | content != 0 | last = false => commit + send\n         // info != null | content == 0 | last = true => commit/end\n         // info != null | content == 0 | last = false => commit\n         // info == null | content != 0 | last = true => send/end\n         // info == null | content != 0 | last = false => send\n         // info == null | content == 0 | last = true => send/end\n         // info == null | content == 0 | last = false => noop\n \n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n         boolean sendContent = hasContent || (info == null && lastContent);\n \n         if (info != null)\n         {\n             if (commit.compareAndSet(false, true))\n             {\n                 if (sendContent)\n                 {\n                     commit(info, false, commitCallback);\n                     send(content, lastContent, callback);\n                 }\n                 else\n                 {\n                     commit(info, lastContent, callback);\n                 }\n             }\n             else\n             {\n-                callback.failed(new IllegalStateException());\n+                callback.failed(new IllegalStateException(\"committed\"));\n             }\n         }\n         else\n         {\n             if (sendContent)\n             {\n                 send(content, lastContent, callback);\n             }\n             else\n             {\n                 callback.succeeded();\n             }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3e602117b477ea8ed33d2104e85a64184fcc604f": {
			"type": "Ybodychange",
			"commitMessage": "Improved send() implementation to be more clear, and covered also a\nmissing case where the callback may have not been notified.\n",
			"commitDate": "2014-09-17, 9:07 AM",
			"commitName": "3e602117b477ea8ed33d2104e85a64184fcc604f",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2014-08-21, 2:54 AM",
			"commitNameOld": "75c1322adc7255cf7916a3e928f19875401db157",
			"commitAuthorOld": "Simone Bordet",
			"daysBetweenCommits": 27.26,
			"commitsBetweenForRepo": 71,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,34 +1,47 @@\n     public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n         boolean isHeadRequest = HttpMethod.HEAD.is(request.getMethod());\n \n         // info != null | content != 0 | last = true => commit + send/end\n         // info != null | content != 0 | last = false => commit + send\n         // info != null | content == 0 | last = true => commit/end\n         // info != null | content == 0 | last = false => commit\n         // info == null | content != 0 | last = true => send/end\n         // info == null | content != 0 | last = false => send\n         // info == null | content == 0 | last = true => send/end\n         // info == null | content == 0 | last = false => noop\n \n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n         boolean sendContent = hasContent || (info == null && lastContent);\n \n         if (info != null)\n         {\n             if (commit.compareAndSet(false, true))\n             {\n-                boolean endStream = !hasContent && lastContent;\n-                commit(info, endStream, sendContent ? commitCallback : callback);\n+                if (sendContent)\n+                {\n+                    commit(info, false, commitCallback);\n+                    send(content, lastContent, callback);\n+                }\n+                else\n+                {\n+                    commit(info, lastContent, callback);\n+                }\n             }\n             else\n             {\n                 callback.failed(new IllegalStateException());\n             }\n         }\n-\n-        if (sendContent)\n+        else\n         {\n-            send(content, lastContent, callback);\n+            if (sendContent)\n+            {\n+                send(content, lastContent, callback);\n+            }\n+            else\n+            {\n+                callback.succeeded();\n+            }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8": {
			"type": "Ybodychange",
			"commitMessage": "Implemented HTTP/2 push functionality.\n\nA PushCacheFilter contains the logic to associate secondary resources\nto primary resources.\nPushCacheFilter calls a Jetty-specific API on the request dispatcher:\nDispatcher.push(ServletRequest). This is a technology preview of the\npush functionality slated for Servlet 4.0.\nThe push() invocation arrives to the transport and it is converted to\nHTTP/2 specific PUSH_PROMISE, along with the mechanism to simulate\nthe request for the secondary resource.\n",
			"commitDate": "2014-08-14, 2:05 PM",
			"commitName": "48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2014-08-05, 5:50 PM",
			"commitNameOld": "b5971484a57212a39af6f70267ea00a24fdbf100",
			"commitAuthorOld": "Greg Wilkins",
			"daysBetweenCommits": 8.84,
			"commitsBetweenForRepo": 40,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,35 +1,34 @@\n     public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n-        MetaData.Request metaData = (MetaData.Request)request.getMetaData();\n-        boolean isHeadRequest = HttpMethod.HEAD.is(metaData.getMethod());\n+        boolean isHeadRequest = HttpMethod.HEAD.is(request.getMethod());\n \n         // info != null | content != 0 | last = true => commit + send/end\n         // info != null | content != 0 | last = false => commit + send\n         // info != null | content == 0 | last = true => commit/end\n         // info != null | content == 0 | last = false => commit\n         // info == null | content != 0 | last = true => send/end\n         // info == null | content != 0 | last = false => send\n         // info == null | content == 0 | last = true => send/end\n         // info == null | content == 0 | last = false => noop\n \n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n         boolean sendContent = hasContent || (info == null && lastContent);\n \n         if (info != null)\n         {\n             if (commit.compareAndSet(false, true))\n             {\n                 boolean endStream = !hasContent && lastContent;\n                 commit(info, endStream, sendContent ? commitCallback : callback);\n             }\n             else\n             {\n                 callback.failed(new IllegalStateException());\n             }\n         }\n \n         if (sendContent)\n         {\n             send(content, lastContent, callback);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"17c03385d68fbf1baa4b8a8c8273a704df1928b6": {
			"type": "Ybodychange",
			"commitMessage": "Fixed send() by properly handling all cases.\n",
			"commitDate": "2014-08-04, 3:09 AM",
			"commitName": "17c03385d68fbf1baa4b8a8c8273a704df1928b6",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2014-07-30, 6:53 PM",
			"commitNameOld": "70dafa8eb3ec0301b1c59301d752f5f5c977ced8",
			"commitAuthorOld": "Greg Wilkins",
			"daysBetweenCommits": 4.34,
			"commitsBetweenForRepo": 37,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,35 @@\n     public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n         MetaData.Request metaData = (MetaData.Request)request.getMetaData();\n         boolean isHeadRequest = HttpMethod.HEAD.is(metaData.getMethod());\n+\n+        // info != null | content != 0 | last = true => commit + send/end\n+        // info != null | content != 0 | last = false => commit + send\n+        // info != null | content == 0 | last = true => commit/end\n+        // info != null | content == 0 | last = false => commit\n+        // info == null | content != 0 | last = true => send/end\n+        // info == null | content != 0 | last = false => send\n+        // info == null | content == 0 | last = true => send/end\n+        // info == null | content == 0 | last = false => noop\n+\n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n+        boolean sendContent = hasContent || (info == null && lastContent);\n \n-        if (commit.compareAndSet(false, true))\n+        if (info != null)\n         {\n-            boolean endStream = !hasContent && lastContent;\n-            commit(info, endStream, !hasContent ? callback : commitCallback);\n-        }\n-        else\n-        {\n-            callback.failed(new IllegalStateException());\n+            if (commit.compareAndSet(false, true))\n+            {\n+                boolean endStream = !hasContent && lastContent;\n+                commit(info, endStream, sendContent ? commitCallback : callback);\n+            }\n+            else\n+            {\n+                callback.failed(new IllegalStateException());\n+            }\n         }\n \n-        if (hasContent)\n+        if (sendContent)\n         {\n             send(content, lastContent, callback);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"86b0d7733803040f0b0a40c5864ca776c8872ef6": {
			"type": "Ybodychange",
			"commitMessage": "Improved the server transport implementation, and fixed a case where\nthe end stream flag was erroneously sent with more content to send.\n",
			"commitDate": "2014-06-23, 12:23 PM",
			"commitName": "86b0d7733803040f0b0a40c5864ca776c8872ef6",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2014-06-16, 3:12 PM",
			"commitNameOld": "25295456aef95974be68c36a09c228309d8aa8ef",
			"commitAuthorOld": "Greg Wilkins",
			"daysBetweenCommits": 6.88,
			"commitsBetweenForRepo": 34,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,27 +1,21 @@\n     public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n         MetaData.Request metaData = (MetaData.Request)request.getMetaData();\n         boolean isHeadRequest = HttpMethod.HEAD.is(metaData.getMethod());\n         boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n \n         if (commit.compareAndSet(false, true))\n         {\n-            commit(info, !hasContent, !hasContent ? callback : new Callback.Adapter()\n-            {\n-                @Override\n-                public void failed(Throwable x)\n-                {\n-                    // TODO\n-                }\n-            });\n+            boolean endStream = !hasContent && lastContent;\n+            commit(info, endStream, !hasContent ? callback : commitCallback);\n         }\n         else\n         {\n-            // TODO\n+            callback.failed(new IllegalStateException());\n         }\n \n         if (hasContent)\n         {\n             send(content, lastContent, callback);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ad034f4d54aa4d6ce04c6fe3da8e8f48f63b21e5": {
			"type": "Ybodychange",
			"commitMessage": "Reworked generation of frames (split into different generators) and\nsketched server-side handling and linking with channel.\n",
			"commitDate": "2014-06-10, 3:02 AM",
			"commitName": "ad034f4d54aa4d6ce04c6fe3da8e8f48f63b21e5",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2014-06-09, 5:01 AM",
			"commitNameOld": "c1247ff6779c78917598a149d36e773702c490d5",
			"commitAuthorOld": "Simone Bordet",
			"daysBetweenCommits": 0.92,
			"commitsBetweenForRepo": 9,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,3 +1,42 @@\n     public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback)\n     {\n+        MetaData.Request metaData = (MetaData.Request)request.getMetaData();\n+        boolean isHeadRequest = HttpMethod.HEAD.is(metaData.getMethod());\n+        boolean hasContent = BufferUtil.hasContent(content) && !isHeadRequest;\n+\n+        // TODO: the idea here is this:\n+        // CallbackLease lease = new CallbackLease(callback);\n+        // commit(lease, ...)\n+        //   stream.header(lease, frame)\n+        //     session.frame(lease, frame)\n+        //       generator.generate(lease, frame)\n+        //         generateHeader(lease, frame);\n+        //         bodyGenerator[frame.getType()].generateBody(lease, frame);\n+        //   stream.content(lease, frame)\n+        //     ...\n+        //   flush(lease)\n+        //\n+        // Problem is that in this way I need to aggregate multiple callbacks for the same lease.\n+        // So it'd need another abstraction that is a Lease+Callback\n+\n+        if (commit.compareAndSet(false, true))\n+        {\n+            commit(info, !hasContent, !hasContent ? callback : new Callback.Adapter()\n+            {\n+                @Override\n+                public void failed(Throwable x)\n+                {\n+                    // TODO\n+                }\n+            });\n+        }\n+        else\n+        {\n+            // TODO\n+        }\n+\n+        if (hasContent)\n+        {\n+            send(content, lastContent, callback);\n+        }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c1247ff6779c78917598a149d36e773702c490d5": {
			"type": "Yintroduced",
			"commitMessage": "Reorganized HTTP2 modules.\n",
			"commitDate": "2014-06-09, 5:01 AM",
			"commitName": "c1247ff6779c78917598a149d36e773702c490d5",
			"commitAuthor": "Simone Bordet",
			"diff": "@@ -0,0 +1,3 @@\n+    public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback)\n+    {\n+    }\n\\ No newline at end of file\n"
		}
	},
	"sha": "fc5dd874f3deda71e6cd42af994a5af5cb6be4af"
}