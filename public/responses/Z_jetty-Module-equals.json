{
	"repo": "https://github.com/eclipse/jetty.project.git",
	"file": "jetty-start/src/main/java/org/eclipse/jetty/start/Module.java",
	"method": {
		"longName": "public boolean equals(Object obj);",
		"startLine": 160,
		"methodName": "equals",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "public"
	},
	"history": {
		"bbc84a3d0121b851fa55e1f3d90c7010ff4b4c13": {
			"type": "Ybodychange",
			"commitMessage": "Issue #515 Alternate start modules\n\nReplaced the module Name mechanism with a Provides mechanism for #515.  This keeps a modules\nname immutable, which makes it easier to find.\n\nSimplified the unit tests by removing all the use-casees with real names (can be confusing and does\nnot age well).  Deleted more specific unit tests in favour of a more capable generic usecase test\nmechanism.   Have added multiple tests per base; exceptional results.  Still need to add in\nsupport for running --add-to-start type commands prior to execution and then to add many more\nusecases\n",
			"commitDate": "2016-04-15, 6:01 PM",
			"commitName": "bbc84a3d0121b851fa55e1f3d90c7010ff4b4c13",
			"commitAuthor": "Greg Wilkins",
			"commitDateOld": "2016-01-04, 1:34 PM",
			"commitNameOld": "ac24196b0d341534793308d585161381d5bca4ac",
			"commitAuthorOld": "",
			"daysBetweenCommits": 102.14,
			"commitsBetweenForRepo": 345,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,20 @@\n     public boolean equals(Object obj)\n     {\n         if (this == obj)\n         {\n             return true;\n         }\n         if (obj == null)\n         {\n             return false;\n         }\n         if (getClass() != obj.getClass())\n         {\n             return false;\n         }\n         Module other = (Module)obj;\n-        if (fileRef == null)\n-        {\n-            if (other.fileRef != null)\n-            {\n-                return false;\n-            }\n-        }\n-        else if (!fileRef.equals(other.fileRef))\n-        {\n-            return false;\n-        }\n-        return true;\n+        if (_path == null)\n+            return other._path == null;\n+        \n+        return _path.equals(other._path);\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"7af87b4a047fb8cc1d70a25d04a8f7b721c8410b": {
			"type": "Ybodychange",
			"commitMessage": "424598 - Module [npn] downloads wrong npn jar\n\n+ Separating Module logical name from file system reference name\n+ [depend] references in *.mod files are tried as file system reference\n  names, then logical names.\n+ --module=<name> are tried only as logical names.\n+ All of the npn/npn-${jvm.version}.mod files are defined as logical\n  name of npn-boot\n",
			"commitDate": "2014-01-06, 10:16 AM",
			"commitName": "7af87b4a047fb8cc1d70a25d04a8f7b721c8410b",
			"commitAuthor": "Joakim Erdfelt",
			"commitDateOld": "2014-01-02, 1:50 PM",
			"commitNameOld": "a12fd9ea033678b51158949a886792b74b42d0a9",
			"commitAuthorOld": "Joakim Erdfelt",
			"daysBetweenCommits": 3.85,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,28 @@\n     public boolean equals(Object obj)\n     {\n         if (this == obj)\n         {\n             return true;\n         }\n         if (obj == null)\n         {\n             return false;\n         }\n         if (getClass() != obj.getClass())\n         {\n             return false;\n         }\n         Module other = (Module)obj;\n-        if (name == null)\n+        if (fileRef == null)\n         {\n-            if (other.name != null)\n+            if (other.fileRef != null)\n             {\n                 return false;\n             }\n         }\n-        else if (!name.equals(other.name))\n+        else if (!fileRef.equals(other.fileRef))\n         {\n             return false;\n         }\n         return true;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"e17cee533ae7209f323cc205ce1ae1ff14d267da": {
			"type": "Ybodychange",
			"commitMessage": "More cleanup in start.jar\n",
			"commitDate": "2013-08-22, 12:00 PM",
			"commitName": "e17cee533ae7209f323cc205ce1ae1ff14d267da",
			"commitAuthor": "Joakim Erdfelt",
			"commitDateOld": "2013-08-22, 10:40 AM",
			"commitNameOld": "314169b49de93642e68930dfcbae7e0d1fd16847",
			"commitAuthorOld": "Joakim Erdfelt",
			"daysBetweenCommits": 0.06,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,18 +1,28 @@\n     public boolean equals(Object obj)\n     {\n         if (this == obj)\n+        {\n             return true;\n+        }\n         if (obj == null)\n+        {\n             return false;\n+        }\n         if (getClass() != obj.getClass())\n+        {\n             return false;\n+        }\n         Module other = (Module)obj;\n         if (name == null)\n         {\n             if (other.name != null)\n+            {\n                 return false;\n+            }\n         }\n         else if (!name.equals(other.name))\n+        {\n             return false;\n+        }\n         return true;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"03cd15ea82ea5483e7244582527e97c0228a4c0a": {
			"type": "Yintroduced",
			"commitMessage": "Adding Module / Modules system classes for start.d\n",
			"commitDate": "2013-08-21, 3:12 PM",
			"commitName": "03cd15ea82ea5483e7244582527e97c0228a4c0a",
			"commitAuthor": "Joakim Erdfelt",
			"diff": "@@ -0,0 +1,18 @@\n+    public boolean equals(Object obj)\n+    {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        Module other = (Module)obj;\n+        if (name == null)\n+        {\n+            if (other.name != null)\n+                return false;\n+        }\n+        else if (!name.equals(other.name))\n+            return false;\n+        return true;\n+    }\n\\ No newline at end of file\n"
		}
	},
	"sha": "fc5dd874f3deda71e6cd42af994a5af5cb6be4af"
}