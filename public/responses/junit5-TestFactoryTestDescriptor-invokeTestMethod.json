{
	"repo": "https://github.com/junit-team/junit5.git",
	"file": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
	"method": {
		"longName": "TestFactoryTestDescriptor::invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor)",
		"startLine": 81,
		"methodName": "invokeTestMethod",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "protected"
	},
	"history": {
		"5cb71ec0e66a7e411c7d238d4b4e53b1c2c27316": {
			"type": "Ybodychange",
			"commitMessage": "Polishing\n\nIssue: #1178\n",
			"commitDate": "2018-06-14, 1:12 AM",
			"commitName": "5cb71ec0e66a7e411c7d238d4b4e53b1c2c27316",
			"commitAuthor": "Christian Stein",
			"commitDateOld": "2018-06-14, 1:12 AM",
			"commitNameOld": "54f11a279cd14d909409a0ee4943ce32af343bcd",
			"commitAuthorOld": "Christian Stein",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tExtensionContext extensionContext = context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n \t\t\tObject instance = extensionContext.getRequiredTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n-\t\t\tTestSource source = getSource().orElseThrow(\n+\t\t\tTestSource defaultTestSource = getSource().orElseThrow(\n \t\t\t\t() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n \t\t\ttry (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n \t\t\t\tint index = 1;\n \t\t\t\tIterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n \t\t\t\twhile (iterator.hasNext()) {\n \t\t\t\t\tDynamicNode dynamicNode = iterator.next();\n \t\t\t\t\tOptional<JupiterTestDescriptor> descriptor = createDynamicDescriptor(this, dynamicNode, index++,\n-\t\t\t\t\t\tsource, getDynamicDescendantFilter());\n+\t\t\t\t\t\tdefaultTestSource, getDynamicDescendantFilter());\n \t\t\t\t\tdescriptor.ifPresent(dynamicTestExecutor::execute);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"fbbd70b7cbbe299b01794446dfa251b3b9e727ad": {
			"type": "Ybodychange",
			"commitMessage": "Allow executing dynamic tests/test template invocations by unique ID\n\nResolves #1025.\n",
			"commitDate": "2018-01-13, 12:47 PM",
			"commitName": "fbbd70b7cbbe299b01794446dfa251b3b9e727ad",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2018-01-13, 12:35 PM",
			"commitNameOld": "931892b1b4c61de968fd324a8825bc88e834bfc2",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,23 +1,24 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tExtensionContext extensionContext = context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n \t\t\tObject instance = extensionContext.getRequiredTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \t\t\tTestSource source = getSource().orElseThrow(\n \t\t\t\t() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n \t\t\ttry (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n \t\t\t\tint index = 1;\n \t\t\t\tIterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n \t\t\t\twhile (iterator.hasNext()) {\n \t\t\t\t\tDynamicNode dynamicNode = iterator.next();\n-\t\t\t\t\tJupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n-\t\t\t\t\tdynamicTestExecutor.execute(descriptor);\n+\t\t\t\t\tOptional<JupiterTestDescriptor> descriptor = createDynamicDescriptor(this, dynamicNode, index++,\n+\t\t\t\t\t\tsource, getDynamicDescendantFilter());\n+\t\t\t\t\tdescriptor.ifPresent(dynamicTestExecutor::execute);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"bef03b5ce4c2385a99b13ac1a3354ac2ca8acc96": {
			"type": "Ybodychange",
			"commitMessage": "Introduce getRequired*() methods in the ExtensionContext API\n\nThis commit introduces new getRequiredTestClass(),\ngetRequiredTestInstance(), and getRequiredTestMethod() convenience\nmethods in the ExtensionContext API which provide extension authors\nshortcuts for retrieving the test class, test instance, and test method\nin use cases for which such elements are required to be present.\n\nIssue: #913\n",
			"commitDate": "2017-07-10, 10:34 AM",
			"commitName": "bef03b5ce4c2385a99b13ac1a3354ac2ca8acc96",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-07-04, 5:30 AM",
			"commitNameOld": "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 6.21,
			"commitsBetweenForRepo": 35,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,23 +1,23 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tExtensionContext extensionContext = context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n-\t\t\tObject instance = getRequiredTestInstance(extensionContext);\n+\t\t\tObject instance = extensionContext.getRequiredTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \t\t\tTestSource source = getSource().orElseThrow(\n \t\t\t\t() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n \t\t\ttry (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n \t\t\t\tint index = 1;\n \t\t\t\tIterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n \t\t\t\twhile (iterator.hasNext()) {\n \t\t\t\t\tDynamicNode dynamicNode = iterator.next();\n \t\t\t\t\tJupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n \t\t\t\t\tdynamicTestExecutor.execute(descriptor);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"7b9267e3665c8550f4d2c9fda4cc6ce24e054cff": {
			"type": "Ybodychange",
			"commitMessage": "Introduce getRequiredTestInstance() in JupiterTestDescriptor\n\nIssue: #419\n",
			"commitDate": "2017-07-04, 5:30 AM",
			"commitName": "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-07-04, 5:00 AM",
			"commitNameOld": "a97e4d3088f97b58031b139c006a98c8e0f49422",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,23 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tExtensionContext extensionContext = context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n-\t\t\tObject instance = extensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\n-\t\t\t\t\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n+\t\t\tObject instance = getRequiredTestInstance(extensionContext);\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \t\t\tTestSource source = getSource().orElseThrow(\n \t\t\t\t() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n \t\t\ttry (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n \t\t\t\tint index = 1;\n \t\t\t\tIterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n \t\t\t\twhile (iterator.hasNext()) {\n \t\t\t\t\tDynamicNode dynamicNode = iterator.next();\n \t\t\t\t\tJupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n \t\t\t\t\tdynamicTestExecutor.execute(descriptor);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a97e4d3088f97b58031b139c006a98c8e0f49422": {
			"type": "Ybodychange",
			"commitMessage": "Revert \"Introduce getRequiredTestInstance() in AbstractExtensionContext\"\n\nThis reverts commit 0836f8f28601d1d27d07ad302c6aa1ef9f2ab023.\n",
			"commitDate": "2017-07-04, 5:00 AM",
			"commitName": "a97e4d3088f97b58031b139c006a98c8e0f49422",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-07-04, 4:36 AM",
			"commitNameOld": "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,23 +1,24 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n-\t\tAbstractExtensionContext<?> extensionContext = context.getExtensionContext();\n+\t\tExtensionContext extensionContext = context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n-\t\t\tObject instance = extensionContext.getRequiredTestInstance();\n+\t\t\tObject instance = extensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\n+\t\t\t\t\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \t\t\tTestSource source = getSource().orElseThrow(\n \t\t\t\t() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n \t\t\ttry (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n \t\t\t\tint index = 1;\n \t\t\t\tIterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n \t\t\t\twhile (iterator.hasNext()) {\n \t\t\t\t\tDynamicNode dynamicNode = iterator.next();\n \t\t\t\t\tJupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n \t\t\t\t\tdynamicTestExecutor.execute(descriptor);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0836f8f28601d1d27d07ad302c6aa1ef9f2ab023": {
			"type": "Ybodychange",
			"commitMessage": "Introduce getRequiredTestInstance() in AbstractExtensionContext\n\nIssue: #910\n",
			"commitDate": "2017-07-04, 4:36 AM",
			"commitName": "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-07-01, 5:45 AM",
			"commitNameOld": "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 2.95,
			"commitsBetweenForRepo": 18,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,23 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n-\t\tExtensionContext extensionContext = context.getExtensionContext();\n+\t\tAbstractExtensionContext<?> extensionContext = context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n-\t\t\tObject instance = extensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\n-\t\t\t\t\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n+\t\t\tObject instance = extensionContext.getRequiredTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \t\t\tTestSource source = getSource().orElseThrow(\n \t\t\t\t() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n \t\t\ttry (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n \t\t\t\tint index = 1;\n \t\t\t\tIterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n \t\t\t\twhile (iterator.hasNext()) {\n \t\t\t\t\tDynamicNode dynamicNode = iterator.next();\n \t\t\t\t\tJupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n \t\t\t\t\tdynamicTestExecutor.execute(descriptor);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7": {
			"type": "Ybodychange",
			"commitMessage": "Remove TestExtensionContext and ContainerExtensionContext\n\nIssue: #901\n",
			"commitDate": "2017-07-01, 5:45 AM",
			"commitName": "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-06-30, 10:16 AM",
			"commitNameOld": "47f824eb5602822093a2cd4fe31c5209ee1e5cbb",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.81,
			"commitsBetweenForRepo": 14,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n-\t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n+\t\tExtensionContext extensionContext = context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n-\t\t\tObject instance = testExtensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\n+\t\t\tObject instance = extensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\n \t\t\t\t\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n-\t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext,\n+\t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \t\t\tTestSource source = getSource().orElseThrow(\n \t\t\t\t() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n \t\t\ttry (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n \t\t\t\tint index = 1;\n \t\t\t\tIterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n \t\t\t\twhile (iterator.hasNext()) {\n \t\t\t\t\tDynamicNode dynamicNode = iterator.next();\n \t\t\t\t\tJupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n \t\t\t\t\tdynamicTestExecutor.execute(descriptor);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"47f824eb5602822093a2cd4fe31c5209ee1e5cbb": {
			"type": "Ybodychange",
			"commitMessage": "Polishing\n",
			"commitDate": "2017-06-30, 10:16 AM",
			"commitName": "47f824eb5602822093a2cd4fe31c5209ee1e5cbb",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-06-30, 10:16 AM",
			"commitNameOld": "fdadf905479b4cd63f1987d08940eddfbf89d088",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,23 +1,24 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n \t\t\tObject instance = testExtensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\n \t\t\t\t\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n-\t\t\tTestSource source = getSource().orElseThrow(() -> new JUnitException(\"Test source must be present\"));\n+\t\t\tTestSource source = getSource().orElseThrow(\n+\t\t\t\t() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n \t\t\ttry (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n \t\t\t\tint index = 1;\n \t\t\t\tIterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n \t\t\t\twhile (iterator.hasNext()) {\n \t\t\t\t\tDynamicNode dynamicNode = iterator.next();\n \t\t\t\t\tJupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n \t\t\t\t\tdynamicTestExecutor.execute(descriptor);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"fdadf905479b4cd63f1987d08940eddfbf89d088": {
			"type": "Ybodychange",
			"commitMessage": "Avoid NoSuchElementException when retrieving test instance\n\nIssue: #419\n",
			"commitDate": "2017-06-30, 10:16 AM",
			"commitName": "fdadf905479b4cd63f1987d08940eddfbf89d088",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-06-30, 10:16 AM",
			"commitNameOld": "ee8cb2e44a92c511bc73553f2005ecc890bec141",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,22 +1,23 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n-\t\t\tObject instance = testExtensionContext.getTestInstance().get();\n+\t\t\tObject instance = testExtensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\n+\t\t\t\t\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \t\t\tTestSource source = getSource().orElseThrow(() -> new JUnitException(\"Test source must be present\"));\n \t\t\ttry (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n \t\t\t\tint index = 1;\n \t\t\t\tIterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n \t\t\t\twhile (iterator.hasNext()) {\n \t\t\t\t\tDynamicNode dynamicNode = iterator.next();\n \t\t\t\t\tJupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n \t\t\t\t\tdynamicTestExecutor.execute(descriptor);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ee8cb2e44a92c511bc73553f2005ecc890bec141": {
			"type": "Ybodychange",
			"commitMessage": "Move getTestInstance() to ExtensionContext\n\nIssue: #419\n",
			"commitDate": "2017-06-30, 10:16 AM",
			"commitName": "ee8cb2e44a92c511bc73553f2005ecc890bec141",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-06-18, 6:54 AM",
			"commitNameOld": "4752af0ce450d3b35b2e12b61bec5e8e3e3cea85",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 12.14,
			"commitsBetweenForRepo": 29,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,22 +1,22 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n-\t\t\tObject instance = testExtensionContext.getTestInstance();\n+\t\t\tObject instance = testExtensionContext.getTestInstance().get();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \t\t\tTestSource source = getSource().orElseThrow(() -> new JUnitException(\"Test source must be present\"));\n \t\t\ttry (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n \t\t\t\tint index = 1;\n \t\t\t\tIterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n \t\t\t\twhile (iterator.hasNext()) {\n \t\t\t\t\tDynamicNode dynamicNode = iterator.next();\n \t\t\t\t\tJupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n \t\t\t\t\tdynamicTestExecutor.execute(descriptor);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"afcec01a9c1c8302a81785dc2ad22e01ddb249b7": {
			"type": "Ybodychange",
			"commitMessage": "Revert accidental changes to TestFactoryTestDescriptor 🙈\n",
			"commitDate": "2017-05-10, 8:40 AM",
			"commitName": "afcec01a9c1c8302a81785dc2ad22e01ddb249b7",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-05-10, 8:34 AM",
			"commitNameOld": "66cfa8aecb6dcadacd4c2c09eaa3f1f3855db080",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,22 +1,22 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \t\t\tTestSource source = getSource().orElseThrow(() -> new JUnitException(\"Test source must be present\"));\n-\t\t\ttry (BaseStream<DynamicNode, ?> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n+\t\t\ttry (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n \t\t\t\tint index = 1;\n \t\t\t\tIterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n \t\t\t\twhile (iterator.hasNext()) {\n \t\t\t\t\tDynamicNode dynamicNode = iterator.next();\n \t\t\t\t\tJupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n \t\t\t\t\tdynamicTestExecutor.execute(descriptor);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"66cfa8aecb6dcadacd4c2c09eaa3f1f3855db080": {
			"type": "Ybodychange",
			"commitMessage": "Support DoubleStream, IntStream, and LongStream for argument providers\n\nRelated issue: #851\n",
			"commitDate": "2017-05-10, 8:34 AM",
			"commitName": "66cfa8aecb6dcadacd4c2c09eaa3f1f3855db080",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-05-03, 5:39 AM",
			"commitNameOld": "1a57e4f386a9f8cd6be0a08a4d914349d32a7f01",
			"commitAuthorOld": "Christian Stein",
			"daysBetweenCommits": 7.12,
			"commitsBetweenForRepo": 16,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,22 +1,22 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \t\t\tTestSource source = getSource().orElseThrow(() -> new JUnitException(\"Test source must be present\"));\n-\t\t\ttry (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n+\t\t\ttry (BaseStream<DynamicNode, ?> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n \t\t\t\tint index = 1;\n \t\t\t\tIterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n \t\t\t\twhile (iterator.hasNext()) {\n \t\t\t\t\tDynamicNode dynamicNode = iterator.next();\n \t\t\t\t\tJupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n \t\t\t\t\tdynamicTestExecutor.execute(descriptor);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"1a57e4f386a9f8cd6be0a08a4d914349d32a7f01": {
			"type": "Ybodychange",
			"commitMessage": "Add DynamicContainer support\n\nPrior to this commit only a flat collection of dynamically generated\ntests was allowed as the return type of a @TestFactory annotated\nmethod. The collection entry type was set to `DynamicTest`.\n\nThis commit introduces the abstract base class `DynamicNode` and a\n`DynamicContainer` class collecting node instance. @TestFactory\nannotated methods are now allowed to return a collection of nodes --\nwhich can be a test or a named container of tests.\nCreating a dynamic tree of tests like that gives users the ability to\nbetter structure the generated tests.\n\nThe old behaviour, returning only instances of `DynamicTest`, is preserved.\n",
			"commitDate": "2017-05-03, 5:39 AM",
			"commitName": "1a57e4f386a9f8cd6be0a08a4d914349d32a7f01",
			"commitAuthor": "Christian Stein",
			"commitDateOld": "2017-05-03, 3:52 AM",
			"commitNameOld": "a3e4b97efb03bd7b52d18c17b9dc185d112a04e8",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.07,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,18 +1,22 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n-\n-\t\t\ttry (Stream<DynamicTest> dynamicTestStream = toDynamicTestStream(testFactoryMethodResult)) {\n-\t\t\t\tAtomicInteger index = new AtomicInteger();\n-\t\t\t\tdynamicTestStream.forEach(\n-\t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n+\t\t\tTestSource source = getSource().orElseThrow(() -> new JUnitException(\"Test source must be present\"));\n+\t\t\ttry (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n+\t\t\t\tint index = 1;\n+\t\t\t\tIterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n+\t\t\t\twhile (iterator.hasNext()) {\n+\t\t\t\t\tDynamicNode dynamicNode = iterator.next();\n+\t\t\t\t\tJupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n+\t\t\t\t\tdynamicTestExecutor.execute(descriptor);\n+\t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3bfdaa969d89efce3f1d0bd1320c0212ef07a6cb": {
			"type": "Ybodychange",
			"commitMessage": "Remove unused argument in TestFactoryTestDescriptor.toDynamicTestStream()\n",
			"commitDate": "2017-03-12, 7:43 AM",
			"commitName": "3bfdaa969d89efce3f1d0bd1320c0212ef07a6cb",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-03-11, 2:41 PM",
			"commitNameOld": "9838fabf19e19b0e6cc80da85aeac94b427867d5",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.67,
			"commitsBetweenForRepo": 7,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,18 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \n-\t\t\ttry (Stream<DynamicTest> dynamicTestStream = toDynamicTestStream(testExtensionContext,\n-\t\t\t\ttestFactoryMethodResult)) {\n+\t\t\ttry (Stream<DynamicTest> dynamicTestStream = toDynamicTestStream(testFactoryMethodResult)) {\n \t\t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\t\tdynamicTestStream.forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9838fabf19e19b0e6cc80da85aeac94b427867d5": {
			"type": "Ybodychange",
			"commitMessage": "Introduce CollectionUtils.toStream to remove duplication\n",
			"commitDate": "2017-03-11, 2:41 PM",
			"commitName": "9838fabf19e19b0e6cc80da85aeac94b427867d5",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-02-26, 11:57 AM",
			"commitNameOld": "21b61f5b1b5337625a505cd28dd2761f09a35536",
			"commitAuthorOld": "Liam Clark",
			"daysBetweenCommits": 13.11,
			"commitsBetweenForRepo": 66,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,19 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n-\t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n-\t\t\tObject testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext,\n+\t\t\tObject testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \n \t\t\ttry (Stream<DynamicTest> dynamicTestStream = toDynamicTestStream(testExtensionContext,\n \t\t\t\ttestFactoryMethodResult)) {\n \t\t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\t\tdynamicTestStream.forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n-\t\t\t\tthrow invalidReturnTypeException(testExtensionContext);\n+\t\t\t\tthrow invalidReturnTypeException(ex);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"21b61f5b1b5337625a505cd28dd2761f09a35536": {
			"type": "Ybodychange",
			"commitMessage": "Close Streams of DynamicTests returned by @TestFactory methods\n\n- Bad weather test for closing TestFactory Streams of incompatible types\n- Document the closing guarantee for TestFactory streams\n\nFixes #683.\n",
			"commitDate": "2017-02-26, 11:57 AM",
			"commitName": "21b61f5b1b5337625a505cd28dd2761f09a35536",
			"commitAuthor": "Liam Clark",
			"commitDateOld": "2017-02-24, 1:20 PM",
			"commitNameOld": "fc3c61b41f014a2500f176e23fe8ad2989d20565",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 1.94,
			"commitsBetweenForRepo": 10,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,19 +1,20 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n \t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \n-\t\t\ttry {\n+\t\t\ttry (Stream<DynamicTest> dynamicTestStream = toDynamicTestStream(testExtensionContext,\n+\t\t\t\ttestFactoryMethodResult)) {\n \t\t\t\tAtomicInteger index = new AtomicInteger();\n-\t\t\t\ttoDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(\n+\t\t\t\tdynamicTestStream.forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(testExtensionContext);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"fc3c61b41f014a2500f176e23fe8ad2989d20565": {
			"type": "Yparameterchange",
			"commitMessage": "Replace Consumer<TestDescriptor> with custom interface\n\nIssue: #14\n",
			"commitDate": "2017-02-24, 1:20 PM",
			"commitName": "fc3c61b41f014a2500f176e23fe8ad2989d20565",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-02-24, 1:20 PM",
			"commitNameOld": "4b41518fa052b28a953e99b087d505603a22c175",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 19,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,19 @@\n-\tprotected void invokeTestMethod(JupiterEngineExecutionContext context,\n-\t\t\tConsumer<TestDescriptor> dynamicTestExecutor) {\n+\tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n \t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \n \t\t\ttry {\n \t\t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\t\ttoDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(testExtensionContext);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-Consumer<TestDescriptor>]",
				"newValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-DynamicTestExecutor]"
			}
		},
		"4b41518fa052b28a953e99b087d505603a22c175": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
			"commitDate": "2017-02-24, 1:20 PM",
			"commitName": "4b41518fa052b28a953e99b087d505603a22c175",
			"commitAuthor": "Marc Philipp",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
					"commitDate": "2017-02-24, 1:20 PM",
					"commitName": "4b41518fa052b28a953e99b087d505603a22c175",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2017-01-02, 1:10 PM",
					"commitNameOld": "73f3eeb436e78226f19554f2c2b5dab63e103670",
					"commitAuthorOld": "JUnit Team",
					"daysBetweenCommits": 53.01,
					"commitsBetweenForRepo": 78,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,20 +1,20 @@\n-\tprotected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+\tprotected void invokeTestMethod(JupiterEngineExecutionContext context,\n+\t\t\tConsumer<TestDescriptor> dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n-\t\tEngineExecutionListener listener = context.getExecutionListener();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n \t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \n \t\t\ttry {\n \t\t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\t\ttoDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(\n-\t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n+\t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(testExtensionContext);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[context-JupiterEngineExecutionContext]",
						"newValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-Consumer<TestDescriptor>]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
					"commitDate": "2017-02-24, 1:20 PM",
					"commitName": "4b41518fa052b28a953e99b087d505603a22c175",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2017-01-02, 1:10 PM",
					"commitNameOld": "73f3eeb436e78226f19554f2c2b5dab63e103670",
					"commitAuthorOld": "JUnit Team",
					"daysBetweenCommits": 53.01,
					"commitsBetweenForRepo": 78,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,20 +1,20 @@\n-\tprotected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+\tprotected void invokeTestMethod(JupiterEngineExecutionContext context,\n+\t\t\tConsumer<TestDescriptor> dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n-\t\tEngineExecutionListener listener = context.getExecutionListener();\n \n \t\tcontext.getThrowableCollector().execute(() -> {\n \t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \n \t\t\ttry {\n \t\t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\t\ttoDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(\n-\t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n+\t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(testExtensionContext);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"3e3b402131a99f01480c57dd82c2e81ad6d9a4ea": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Polish Jupiter TestDescriptor implementations\n",
			"commitDate": "2016-06-25, 2:02 PM",
			"commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
			"commitAuthor": "Sam Brannen",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Polish Jupiter TestDescriptor implementations\n",
					"commitDate": "2016-06-25, 2:02 PM",
					"commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
					"commitAuthor": "Sam Brannen",
					"commitDateOld": "2016-06-20, 7:08 AM",
					"commitNameOld": "babcc661bd906b38a272f287ac8779669268fc58",
					"commitAuthorOld": "JUnit Team",
					"daysBetweenCommits": 5.29,
					"commitsBetweenForRepo": 46,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,21 +1,20 @@\n-\tprotected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext,\n-\t\t\tThrowableCollector throwableCollector) {\n-\n+\tprotected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+\t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tEngineExecutionListener listener = context.getExecutionListener();\n \n-\t\tthrowableCollector.execute(() -> {\n+\t\tcontext.getThrowableCollector().execute(() -> {\n \t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \n \t\t\ttry {\n \t\t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\t\ttoDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(testExtensionContext);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[context-JupiterEngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]",
						"newValue": "[context-JupiterEngineExecutionContext]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Polish Jupiter TestDescriptor implementations\n",
					"commitDate": "2016-06-25, 2:02 PM",
					"commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
					"commitAuthor": "Sam Brannen",
					"commitDateOld": "2016-06-20, 7:08 AM",
					"commitNameOld": "babcc661bd906b38a272f287ac8779669268fc58",
					"commitAuthorOld": "JUnit Team",
					"daysBetweenCommits": 5.29,
					"commitsBetweenForRepo": 46,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,21 +1,20 @@\n-\tprotected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext,\n-\t\t\tThrowableCollector throwableCollector) {\n-\n+\tprotected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+\t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tEngineExecutionListener listener = context.getExecutionListener();\n \n-\t\tthrowableCollector.execute(() -> {\n+\t\tcontext.getThrowableCollector().execute(() -> {\n \t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \n \t\t\ttry {\n \t\t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\t\ttoDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(testExtensionContext);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"babcc661bd906b38a272f287ac8779669268fc58": {
			"type": "Yparameterchange",
			"commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
			"commitDate": "2016-06-20, 7:08 AM",
			"commitName": "babcc661bd906b38a272f287ac8779669268fc58",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2016-06-20, 2:59 AM",
			"commitNameOld": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
			"commitAuthorOld": "JUnit Team",
			"daysBetweenCommits": 0.17,
			"commitsBetweenForRepo": 7,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,21 @@\n-\tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n+\tprotected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tEngineExecutionListener listener = context.getExecutionListener();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \n \t\t\ttry {\n \t\t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\t\ttoDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(testExtensionContext);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[context-JUnit5EngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]",
				"newValue": "[context-JupiterEngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]"
			}
		},
		"4972eb58d680a30e8fbd1ffb6cdc6477bef83374": {
			"type": "Yfilerename",
			"commitMessage": "Rename all JUnit 5 artifacts to platform, jupiter, & vintage\n\nIssue: #286\n",
			"commitDate": "2016-06-20, 2:59 AM",
			"commitName": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2016-06-19, 12:04 PM",
			"commitNameOld": "e5b7300ba40a0420e310d463a63ea4c10cc8d9b9",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.62,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
				"newPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java"
			}
		},
		"507e50872c6df8a66c32f45cb2153555f510c4b1": {
			"type": "Yfilerename",
			"commitMessage": "Rename base package of junit5-api and junit5-engine to org.junit.jupiter\n",
			"commitDate": "2016-06-18, 2:50 PM",
			"commitName": "507e50872c6df8a66c32f45cb2153555f510c4b1",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2016-06-18, 1:31 PM",
			"commitNameOld": "f7741ec30a0578d2ffaf76bca83d4fa31eb666a5",
			"commitAuthorOld": "JUnit Team",
			"daysBetweenCommits": 0.06,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java",
				"newPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java"
			}
		},
		"502a023f5c878321f08ab83bfe9e9395599cbb4e": {
			"type": "Ybodychange",
			"commitMessage": "Polish TestFactoryTestDescriptor\n",
			"commitDate": "2016-06-01, 6:12 AM",
			"commitName": "502a023f5c878321f08ab83bfe9e9395599cbb4e",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-06-01, 6:02 AM",
			"commitNameOld": "3d5bf7756991a5a6b5036cfda914fca3e92cb021",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,21 @@\n \tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tEngineExecutionListener listener = context.getExecutionListener();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\tObject testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n \n-\t\t\tStream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(testExtensionContext,\n-\t\t\t\ttestFactoryMethodResult);\n-\n-\t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\ttry {\n-\t\t\t\tdynamicTestStream.forEach(\n+\t\t\t\tAtomicInteger index = new AtomicInteger();\n+\t\t\t\ttoDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n \t\t\t}\n-\t\t\tcatch (ClassCastException cce) {\n+\t\t\tcatch (ClassCastException ex) {\n \t\t\t\tthrow invalidReturnTypeException(testExtensionContext);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"e0e131335d2117a2a1630db22260a258e47d8c4d": {
			"type": "Ybodychange",
			"commitMessage": "Make ExecutableInvoker stateless\n",
			"commitDate": "2016-05-28, 11:02 AM",
			"commitName": "e0e131335d2117a2a1630db22260a258e47d8c4d",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-26, 6:42 AM",
			"commitNameOld": "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 2.18,
			"commitsBetweenForRepo": 21,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,25 +1,24 @@\n \tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tEngineExecutionListener listener = context.getExecutionListener();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\tObject instance = testExtensionContext.getTestInstance();\n-\t\t\tExecutableInvoker methodInvoker = new ExecutableInvoker(testExtensionContext,\n+\t\t\tObject testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext,\n \t\t\t\tcontext.getExtensionRegistry());\n-\t\t\tObject testFactoryMethodResult = methodInvoker.invoke(method, instance);\n \n \t\t\tStream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(testExtensionContext,\n \t\t\t\ttestFactoryMethodResult);\n \n \t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\ttry {\n \t\t\t\tdynamicTestStream.forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n \t\t\t}\n \t\t\tcatch (ClassCastException cce) {\n \t\t\t\tthrow invalidReturnTypeException(testExtensionContext);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9eacc9c2d51557bffa003ca24fa125b8cbe69bbb": {
			"type": "Ybodychange",
			"commitMessage": "Convert MethodInvoker to generic ExecutableInvoker\n\nPrior to this commit, MethodInvoker was limited to method invocations.\nWith the recent generalization of the ParameterResolver API, it is now\npossible to convert MethodInvoker to a generic ExecutableInvoker that\ncan be applied to constructors or methods, serving as a building block\nfor possible constructor injection support.\n\nThis commit converts MethodInvoker to a generic ExecutableInvoker that\ncan be used to invoke both methods and constructors with dynamic\nparameter resolution via registered ParameterResolvers.\n\nSpecifically, this commit includes the following changes.\n\n - Renamed MethodInvoker to ExecutableInvoker\n - Refactored ExecutableInvoker to support parameter resolution for any\n   java.lang.reflect.Executable\n - Introduced newInstance(Constructor<T>, Object...) in ReflectionUtils\n - Introduced invoke(Constructor), invoke(Method), and\n   invoke(Method, Object) in ExecutableInvoker\n - Removed MethodInvocationContext and MethodInvocationContextFactory\n - Removed ConstructorInvoker proof of concept\n\nIssue: #267\n",
			"commitDate": "2016-05-26, 6:42 AM",
			"commitName": "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-25, 1:50 PM",
			"commitNameOld": "067620c65061755653ee09f11c2ecaac17b206d1",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.7,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,25 @@\n \tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tEngineExecutionListener listener = context.getExecutionListener();\n \n \t\tthrowableCollector.execute(() -> {\n-\t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n-\t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n+\t\t\tMethod method = testExtensionContext.getTestMethod().get();\n+\t\t\tObject instance = testExtensionContext.getTestInstance();\n+\t\t\tExecutableInvoker methodInvoker = new ExecutableInvoker(testExtensionContext,\n+\t\t\t\tcontext.getExtensionRegistry());\n+\t\t\tObject testFactoryMethodResult = methodInvoker.invoke(method, instance);\n \n-\t\t\tMethodInvoker methodInvoker = new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n-\t\t\tObject testFactoryMethodResult = methodInvoker.invoke(methodInvocationContext);\n \t\t\tStream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(testExtensionContext,\n \t\t\t\ttestFactoryMethodResult);\n \n \t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\ttry {\n \t\t\t\tdynamicTestStream.forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n \t\t\t}\n \t\t\tcatch (ClassCastException cce) {\n \t\t\t\tthrow invalidReturnTypeException(testExtensionContext);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"24339be6d3fcc499da1c7623cfb8f8b08c183727": {
			"type": "Ybodychange",
			"commitMessage": "Improve exception messages in TestFactoryTestDescriptor\n",
			"commitDate": "2016-05-24, 5:15 PM",
			"commitName": "24339be6d3fcc499da1c7623cfb8f8b08c183727",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-24, 3:32 PM",
			"commitNameOld": "64b948139b96395899f2852d3cab932a852ed5d8",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.07,
			"commitsBetweenForRepo": 6,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,25 +1,24 @@\n \tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tEngineExecutionListener listener = context.getExecutionListener();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n \t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n \n \t\t\tMethodInvoker methodInvoker = new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n \t\t\tObject testFactoryMethodResult = methodInvoker.invoke(methodInvocationContext);\n-\t\t\tStream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(testFactoryMethodResult);\n+\t\t\tStream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(testExtensionContext,\n+\t\t\t\ttestFactoryMethodResult);\n \n \t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\ttry {\n \t\t\t\tdynamicTestStream.forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n \t\t\t}\n \t\t\tcatch (ClassCastException cce) {\n-\t\t\t\tthrow new JUnitException(\n-\t\t\t\t\t\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n+\t\t\t\tthrow invalidReturnTypeException(testExtensionContext);\n \t\t\t}\n-\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"64b948139b96395899f2852d3cab932a852ed5d8": {
			"type": "Ybodychange",
			"commitMessage": "Revise DynamicTest support regarding display names\n\nIssue: #153\n",
			"commitDate": "2016-05-24, 3:32 PM",
			"commitName": "64b948139b96395899f2852d3cab932a852ed5d8",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-24, 1:45 AM",
			"commitNameOld": "d51f874a1250f2ebde26f0963f29a6f4fdab75fb",
			"commitAuthorOld": "Matthias Merdes",
			"daysBetweenCommits": 0.57,
			"commitsBetweenForRepo": 10,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,25 +1,25 @@\n \tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tEngineExecutionListener listener = context.getExecutionListener();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n-\t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n+\t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n \n \t\t\tMethodInvoker methodInvoker = new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n \t\t\tObject testFactoryMethodResult = methodInvoker.invoke(methodInvocationContext);\n \t\t\tStream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(testFactoryMethodResult);\n \n \t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\ttry {\n \t\t\t\tdynamicTestStream.forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n \t\t\t}\n \t\t\tcatch (ClassCastException cce) {\n \t\t\t\tthrow new JUnitException(\n \t\t\t\t\t\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n \t\t\t}\n \n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"77f7820ffc9ec56f3e6ec88c9bb1f5b77445a25d": {
			"type": "Ymultichange(Yfilerename,Ybodychange)",
			"commitMessage": "Renamed @Dynamic to avoid confusion between factory and products (#58)\n",
			"commitDate": "2016-05-23, 2:36 PM",
			"commitName": "77f7820ffc9ec56f3e6ec88c9bb1f5b77445a25d",
			"commitAuthor": "Matthias Merdes",
			"subchanges": [
				{
					"type": "Yfilerename",
					"commitMessage": "Renamed @Dynamic to avoid confusion between factory and products (#58)\n",
					"commitDate": "2016-05-23, 2:36 PM",
					"commitName": "77f7820ffc9ec56f3e6ec88c9bb1f5b77445a25d",
					"commitAuthor": "Matthias Merdes",
					"commitDateOld": "2016-05-23, 2:34 PM",
					"commitNameOld": "e8eeefa4d56ccdfd7b4cce4bb26778940f7a5106",
					"commitAuthorOld": "Johannes Link",
					"daysBetweenCommits": 0,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,25 +1,25 @@\n \tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tEngineExecutionListener listener = context.getExecutionListener();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n \t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n \n \t\t\tMethodInvoker methodInvoker = new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n-\t\t\tObject dynamicMethodResult = methodInvoker.invoke(methodInvocationContext);\n-\t\t\tStream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(dynamicMethodResult);\n+\t\t\tObject testFactoryMethodResult = methodInvoker.invoke(methodInvocationContext);\n+\t\t\tStream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(testFactoryMethodResult);\n \n \t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\ttry {\n \t\t\t\tdynamicTestStream.forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n \t\t\t}\n \t\t\tcatch (ClassCastException cce) {\n \t\t\t\tthrow new JUnitException(\n \t\t\t\t\t\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n \t\t\t}\n \n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/DynamicMethodTestDescriptor.java",
						"newPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Renamed @Dynamic to avoid confusion between factory and products (#58)\n",
					"commitDate": "2016-05-23, 2:36 PM",
					"commitName": "77f7820ffc9ec56f3e6ec88c9bb1f5b77445a25d",
					"commitAuthor": "Matthias Merdes",
					"commitDateOld": "2016-05-23, 2:34 PM",
					"commitNameOld": "e8eeefa4d56ccdfd7b4cce4bb26778940f7a5106",
					"commitAuthorOld": "Johannes Link",
					"daysBetweenCommits": 0,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,25 +1,25 @@\n \tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tEngineExecutionListener listener = context.getExecutionListener();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n \t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n \n \t\t\tMethodInvoker methodInvoker = new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n-\t\t\tObject dynamicMethodResult = methodInvoker.invoke(methodInvocationContext);\n-\t\t\tStream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(dynamicMethodResult);\n+\t\t\tObject testFactoryMethodResult = methodInvoker.invoke(methodInvocationContext);\n+\t\t\tStream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(testFactoryMethodResult);\n \n \t\t\tAtomicInteger index = new AtomicInteger();\n \t\t\ttry {\n \t\t\t\tdynamicTestStream.forEach(\n \t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n \t\t\t}\n \t\t\tcatch (ClassCastException cce) {\n \t\t\t\tthrow new JUnitException(\n \t\t\t\t\t\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n \t\t\t}\n \n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"abcdd7d3b4e072923ac92a2ed99dbc6ce0954319": {
			"type": "Ybodychange",
			"commitMessage": "Dynamic test factory supports Iterable and Iterator (#58)\n\n- Simplify DynamicTestsDemo\n",
			"commitDate": "2016-05-23, 2:16 PM",
			"commitName": "abcdd7d3b4e072923ac92a2ed99dbc6ce0954319",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2016-05-23, 1:28 PM",
			"commitNameOld": "11850fce68fddb5fdcf6ae67a0474fb827710918",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,18 +1,25 @@\n \tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tEngineExecutionListener listener = context.getExecutionListener();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n \t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n \n-\t\t\t//Todo: Handle cast exceptions\n-\t\t\tStream<DynamicTest> dynamicTestStream = (Stream<DynamicTest>) new MethodInvoker(testExtensionContext,\n-\t\t\t\tcontext.getExtensionRegistry()).invoke(methodInvocationContext);\n+\t\t\tMethodInvoker methodInvoker = new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n+\t\t\tObject dynamicMethodResult = methodInvoker.invoke(methodInvocationContext);\n+\t\t\tStream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(dynamicMethodResult);\n \n \t\t\tAtomicInteger index = new AtomicInteger();\n-\t\t\tdynamicTestStream.forEach(\n-\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n+\t\t\ttry {\n+\t\t\t\tdynamicTestStream.forEach(\n+\t\t\t\t\tdynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n+\t\t\t}\n+\t\t\tcatch (ClassCastException cce) {\n+\t\t\t\tthrow new JUnitException(\n+\t\t\t\t\t\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n+\t\t\t}\n+\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ac7bb522519cd8a600324aa909a5c17a110cb97f": {
			"type": "Yintroduced",
			"commitMessage": "Execution of simple dynamic tests (#58)\n\n- HierarchicalTestExecutor only executes children from containers\n- Unique IDs for dynamic tests are created using index\n- Add tests for discovery of dynamic test by method selector (#58)\n",
			"commitDate": "2016-05-23, 1:21 PM",
			"commitName": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
			"commitAuthor": "Johannes Link"
		}
	},
	"sha": "77cfe71e7f787c59626198e25350545f41e968bd"
}