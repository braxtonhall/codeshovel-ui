{
	"repo": "https://github.com/eclipse/jetty.project.git",
	"file": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
	"method": {
		"longName": "public void doStart();",
		"startLine": 311,
		"methodName": "doStart",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "public"
	},
	"history": {
		"a7891b2f520c1cdedf7b0b74cbf71f11b6137ba9": {
			"type": "Ybodychange",
			"commitMessage": "Issue #1841 reduce ServletHolder contention\n",
			"commitDate": "2017-09-25, 11:40 PM",
			"commitName": "a7891b2f520c1cdedf7b0b74cbf71f11b6137ba9",
			"commitAuthor": "Greg Wilkins",
			"commitDateOld": "2017-09-22, 3:47 PM",
			"commitNameOld": "86c6caf608992db094b27b29b75de034f31fe94d",
			"commitAuthorOld": "Greg Wilkins",
			"daysBetweenCommits": 3.33,
			"commitsBetweenForRepo": 8,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,100 +1,102 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n         if (!_enabled)\n             return;\n \n         // Handle JSP file forced paths\n         if (_forcedPath != null)\n         {\n             // Look for a precompiled JSP Servlet\n             String precompiled=getClassNameForJsp(_forcedPath);\n             if (!StringUtil.isBlank(precompiled))\n             {\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n                 ServletHolder jsp = getServletHandler().getServlet(precompiled);\n                 if (jsp!=null && jsp.getClassName() !=  null)\n                 {\n                     if (LOG.isDebugEnabled())\n                         LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n                     // set the className for this servlet to the precompiled one\n                     setClassName(jsp.getClassName());\n                 } \n                 else\n                 {\n                     // Look for normal JSP servlet\n                     jsp=getServletHandler().getServlet(\"jsp\");\n                     if (jsp!=null)\n                     {\n                         if (LOG.isDebugEnabled())\n                             LOG.debug(\"JSP file {} for {} mapped to JspServlet class {}\",_forcedPath, getName(),jsp.getClassName());\n                         setClassName(jsp.getClassName());\n                         //copy jsp init params that don't exist for this servlet\n                         for (Map.Entry<String, String> entry:jsp.getInitParameters().entrySet())\n                         {\n                             if (!_initParams.containsKey(entry.getKey()))\n                                 setInitParameter(entry.getKey(), entry.getValue());\n                         }\n                         //jsp specific: set up the jsp-file on the JspServlet. If load-on-startup is >=0 and the jsp container supports\n                         //precompilation, the jsp will be compiled when this holder is initialized. If not load on startup, or the\n                         //container does not support startup precompilation, it will be compiled at runtime when handling a request for this jsp.\n                         //See also adaptForcedPathToJspContainer\n                         setInitParameter(\"jspFile\", _forcedPath);\n                     }\n                 }\n             }\n             else\n                 LOG.warn(\"Bad jsp-file {} conversion to classname in holder {}\", _forcedPath, getName());\n         }\n \n \n         //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n \n         //servlet is not an instance of javax.servlet.Servlet\n         try\n         {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n         //check if we need to forcibly set load-on-startup\n         checkInitOnStartup();\n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n \n         _config=new Config();\n \n-        if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n-            _servlet = new SingleThreadedWrapper();\n-\n+        synchronized (this)\n+        {\n+            if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n+                _servlet = new SingleThreadedWrapper();\n+        }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"edfd05dd9c9be4af1c61b30924d10725f8a7ec55": {
			"type": "Ybodychange",
			"commitMessage": "Issue #1268\n\nAdd unit tests, tweak log and error messages, fix bug.\n",
			"commitDate": "2017-01-18, 6:49 PM",
			"commitName": "edfd05dd9c9be4af1c61b30924d10725f8a7ec55",
			"commitAuthor": "Jan Bartel",
			"commitDateOld": "2017-01-17, 8:16 PM",
			"commitNameOld": "69afe33b820401cef1e08fcb5911a025b29a4487",
			"commitAuthorOld": "Jan Bartel",
			"daysBetweenCommits": 0.94,
			"commitsBetweenForRepo": 8,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,98 +1,100 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n         if (!_enabled)\n             return;\n \n         // Handle JSP file forced paths\n         if (_forcedPath != null)\n         {\n             // Look for a precompiled JSP Servlet\n             String precompiled=getClassNameForJsp(_forcedPath);\n             if (!StringUtil.isBlank(precompiled))\n             {\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n                 ServletHolder jsp = getServletHandler().getServlet(precompiled);\n                 if (jsp!=null && jsp.getClassName() !=  null)\n                 {\n                     if (LOG.isDebugEnabled())\n                         LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n                     // set the className for this servlet to the precompiled one\n                     setClassName(jsp.getClassName());\n                 } \n                 else\n                 {\n                     // Look for normal JSP servlet\n                     jsp=getServletHandler().getServlet(\"jsp\");\n                     if (jsp!=null)\n                     {\n                         if (LOG.isDebugEnabled())\n-                            LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\",_forcedPath, getName(),jsp.getClassName());\n+                            LOG.debug(\"JSP file {} for {} mapped to JspServlet class {}\",_forcedPath, getName(),jsp.getClassName());\n                         setClassName(jsp.getClassName());\n                         //copy jsp init params that don't exist for this servlet\n                         for (Map.Entry<String, String> entry:jsp.getInitParameters().entrySet())\n                         {\n                             if (!_initParams.containsKey(entry.getKey()))\n                                 setInitParameter(entry.getKey(), entry.getValue());\n                         }\n                         //jsp specific: set up the jsp-file on the JspServlet. If load-on-startup is >=0 and the jsp container supports\n                         //precompilation, the jsp will be compiled when this holder is initialized. If not load on startup, or the\n                         //container does not support startup precompilation, it will be compiled at runtime when handling a request for this jsp.\n                         //See also adaptForcedPathToJspContainer\n                         setInitParameter(\"jspFile\", _forcedPath);\n                     }\n                 }\n             }\n+            else\n+                LOG.warn(\"Bad jsp-file {} conversion to classname in holder {}\", _forcedPath, getName());\n         }\n \n \n         //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n \n         //servlet is not an instance of javax.servlet.Servlet\n         try\n         {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n         //check if we need to forcibly set load-on-startup\n         checkInitOnStartup();\n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"69afe33b820401cef1e08fcb5911a025b29a4487": {
			"type": "Ybodychange",
			"commitMessage": "Issue #1268\n",
			"commitDate": "2017-01-17, 8:16 PM",
			"commitName": "69afe33b820401cef1e08fcb5911a025b29a4487",
			"commitAuthor": "Jan Bartel",
			"commitDateOld": "2016-11-01, 11:32 PM",
			"commitNameOld": "8461cc07b3e64e6f9e56d58a2a8f955bd734240f",
			"commitAuthorOld": "Jan Bartel",
			"daysBetweenCommits": 76.91,
			"commitsBetweenForRepo": 115,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,98 +1,98 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n         if (!_enabled)\n             return;\n \n         // Handle JSP file forced paths\n         if (_forcedPath != null)\n         {\n             // Look for a precompiled JSP Servlet\n             String precompiled=getClassNameForJsp(_forcedPath);\n-            if (LOG.isDebugEnabled())\n-                LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n-            ServletHolder jsp=getServletHandler().getServlet(precompiled);\n-            if (jsp!=null && jsp.getClassName() !=  null)\n+            if (!StringUtil.isBlank(precompiled))\n             {\n                 if (LOG.isDebugEnabled())\n-                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n-                // set the className for this servlet to the precompiled one\n-                setClassName(jsp.getClassName());\n-            }\n-            else\n-            {\n-                if (getClassName() == null)\n+                    LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n+                ServletHolder jsp = getServletHandler().getServlet(precompiled);\n+                if (jsp!=null && jsp.getClassName() !=  null)\n+                {\n+                    if (LOG.isDebugEnabled())\n+                        LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n+                    // set the className for this servlet to the precompiled one\n+                    setClassName(jsp.getClassName());\n+                } \n+                else\n                 {\n                     // Look for normal JSP servlet\n                     jsp=getServletHandler().getServlet(\"jsp\");\n                     if (jsp!=null)\n                     {\n                         if (LOG.isDebugEnabled())\n                             LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\",_forcedPath, getName(),jsp.getClassName());\n                         setClassName(jsp.getClassName());\n                         //copy jsp init params that don't exist for this servlet\n                         for (Map.Entry<String, String> entry:jsp.getInitParameters().entrySet())\n                         {\n                             if (!_initParams.containsKey(entry.getKey()))\n                                 setInitParameter(entry.getKey(), entry.getValue());\n                         }\n                         //jsp specific: set up the jsp-file on the JspServlet. If load-on-startup is >=0 and the jsp container supports\n                         //precompilation, the jsp will be compiled when this holder is initialized. If not load on startup, or the\n                         //container does not support startup precompilation, it will be compiled at runtime when handling a request for this jsp.\n                         //See also adaptForcedPathToJspContainer\n                         setInitParameter(\"jspFile\", _forcedPath);\n                     }\n                 }\n             }\n         }\n \n \n         //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n \n         //servlet is not an instance of javax.servlet.Servlet\n         try\n         {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n         //check if we need to forcibly set load-on-startup\n         checkInitOnStartup();\n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"6097123af68784a0186337b2e01a8025d7d13d25": {
			"type": "Ybodychange",
			"commitMessage": "460176  When checking for precompiled jsp, ensure classname is present\n",
			"commitDate": "2015-02-17, 4:05 PM",
			"commitName": "6097123af68784a0186337b2e01a8025d7d13d25",
			"commitAuthor": "Jan Bartel",
			"commitDateOld": "2015-01-23, 4:59 AM",
			"commitNameOld": "ae47edb8a785aedc469482667d1aacdf2aefeae2",
			"commitAuthorOld": "Jan Bartel",
			"daysBetweenCommits": 25.46,
			"commitsBetweenForRepo": 49,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,98 +1,98 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n         if (!_enabled)\n             return;\n         \n         // Handle JSP file forced paths\n         if (_forcedPath != null)\n         {\n             // Look for a precompiled JSP Servlet\n             String precompiled=getClassNameForJsp(_forcedPath);\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n             ServletHolder jsp=getServletHandler().getServlet(precompiled);\n-            if (jsp!=null)\n+            if (jsp!=null && jsp.getClassName() !=  null)\n             {\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n                 // set the className for this servlet to the precompiled one\n                 setClassName(jsp.getClassName());\n             }\n             else\n             { \n                 if (getClassName() == null)\n                 {\n                     // Look for normal JSP servlet\n                     jsp=getServletHandler().getServlet(\"jsp\");\n                     if (jsp!=null)\n                     {\n                         if (LOG.isDebugEnabled())\n                             LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\",_forcedPath, getName(),jsp.getClassName());\n                         setClassName(jsp.getClassName());\n                         //copy jsp init params that don't exist for this servlet\n                         for (Map.Entry<String, String> entry:jsp.getInitParameters().entrySet())\n                         {\n                             if (!_initParams.containsKey(entry.getKey()))\n                                 setInitParameter(entry.getKey(), entry.getValue());\n                         }\n                         //jsp specific: set up the jsp-file on the JspServlet. If load-on-startup is >=0 and the jsp container supports\n                         //precompilation, the jsp will be compiled when this holder is initialized. If not load on startup, or the\n                         //container does not support startup precompilation, it will be compiled at runtime when handling a request for this jsp.\n                         //See also adaptForcedPathToJspContainer\n                         setInitParameter(\"jspFile\", _forcedPath);\n                     }                       \n                 }\n             }\n         }\n         \n         \n         //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n \n         //servlet is not an instance of javax.servlet.Servlet\n         try\n         {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n         //check if we need to forcibly set load-on-startup\n         checkInitOnStartup();\n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n      \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"49a32eb1b0da23229441cd2f199ec57caab46cbc": {
			"type": "Ybodychange",
			"commitMessage": "444124  JSP include with <servlet><jsp-file> can cause infinite recursion\n",
			"commitDate": "2014-09-23, 2:33 AM",
			"commitName": "49a32eb1b0da23229441cd2f199ec57caab46cbc",
			"commitAuthor": "Jan Bartel",
			"commitDateOld": "2014-07-22, 11:53 PM",
			"commitNameOld": "fa3d7d0f7e02dee5285decb7786ab2575875ec84",
			"commitAuthorOld": "",
			"daysBetweenCommits": 62.11,
			"commitsBetweenForRepo": 235,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,96 +1,98 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n         if (!_enabled)\n             return;\n         \n         // Handle JSP file forced paths\n         if (_forcedPath != null)\n         {\n             // Look for a precompiled JSP Servlet\n             String precompiled=getClassNameForJsp(_forcedPath);\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n             ServletHolder jsp=getServletHandler().getServlet(precompiled);\n             if (jsp!=null)\n             {\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n                 // set the className for this servlet to the precompiled one\n                 setClassName(jsp.getClassName());\n             }\n             else\n             { \n                 if (getClassName() == null)\n                 {\n                     // Look for normal JSP servlet\n                     jsp=getServletHandler().getServlet(\"jsp\");\n                     if (jsp!=null)\n                     {\n                         if (LOG.isDebugEnabled())\n-                            LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n+                            LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\",_forcedPath, getName(),jsp.getClassName());\n                         setClassName(jsp.getClassName());\n                         //copy jsp init params that don't exist for this servlet\n                         for (Map.Entry<String, String> entry:jsp.getInitParameters().entrySet())\n                         {\n                             if (!_initParams.containsKey(entry.getKey()))\n                                 setInitParameter(entry.getKey(), entry.getValue());\n                         }\n-                        //jsp specific: set up the jsp-file on the JspServlet so it can precompile iff load-on-startup is >=0\n-                        if (_initOnStartup)\n-                            setInitParameter(\"jspFile\", _forcedPath);\n+                        //jsp specific: set up the jsp-file on the JspServlet. If load-on-startup is >=0 and the jsp container supports\n+                        //precompilation, the jsp will be compiled when this holder is initialized. If not load on startup, or the\n+                        //container does not support startup precompilation, it will be compiled at runtime when handling a request for this jsp.\n+                        //See also adaptForcedPathToJspContainer\n+                        setInitParameter(\"jspFile\", _forcedPath);\n                     }                       \n                 }\n             }\n         }\n         \n         \n         //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n \n         //servlet is not an instance of javax.servlet.Servlet\n         try\n         {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n         //check if we need to forcibly set load-on-startup\n         checkInitOnStartup();\n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n      \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"2a25402de0a12ca41d85dc95fa365dbd70a4a086": {
			"type": "Ybodychange",
			"commitMessage": "444124  JSP include with <servlet><jsp-file> can cause infinite recursion\n",
			"commitDate": "2014-09-18, 1:02 AM",
			"commitName": "2a25402de0a12ca41d85dc95fa365dbd70a4a086",
			"commitAuthor": "Jan Bartel",
			"commitDateOld": "2014-07-22, 11:49 PM",
			"commitNameOld": "3a6879d3e8efb895bf27803735785428f7ed3659",
			"commitAuthorOld": "Greg Wilkins",
			"daysBetweenCommits": 57.05,
			"commitsBetweenForRepo": 91,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,96 +1,98 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n         if (!_enabled)\n             return;\n         \n         // Handle JSP file forced paths\n         if (_forcedPath != null)\n         {\n             // Look for a precompiled JSP Servlet\n             String precompiled=getClassNameForJsp(_forcedPath);\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n             ServletHolder jsp=getServletHandler().getServlet(precompiled);\n             if (jsp!=null)\n             {\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n                 // set the className for this servlet to the precompiled one\n                 setClassName(jsp.getClassName());\n             }\n             else\n             { \n                 if (getClassName() == null)\n                 {\n                     // Look for normal JSP servlet\n                     jsp=getServletHandler().getServlet(\"jsp\");\n                     if (jsp!=null)\n                     {\n                         if (LOG.isDebugEnabled())\n-                            LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n+                            LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\",_forcedPath, getName(),jsp.getClassName());\n                         setClassName(jsp.getClassName());\n                         //copy jsp init params that don't exist for this servlet\n                         for (Map.Entry<String, String> entry:jsp.getInitParameters().entrySet())\n                         {\n                             if (!_initParams.containsKey(entry.getKey()))\n                                 setInitParameter(entry.getKey(), entry.getValue());\n                         }\n-                        //jsp specific: set up the jsp-file on the JspServlet so it can precompile iff load-on-startup is >=0\n-                        if (_initOnStartup)\n-                            setInitParameter(\"jspFile\", _forcedPath);\n+                        //jsp specific: set up the jsp-file on the JspServlet. If load-on-startup is >=0 and the jsp container supports\n+                        //precompilation, the jsp will be compiled when this holder is initialized. If not load on startup, or the\n+                        //container does not support startup precompilation, it will be compiled at runtime when handling a request for this jsp.\n+                        //See also adaptForcedPathToJspContainer\n+                        setInitParameter(\"jspFile\", _forcedPath);\n                     }                       \n                 }\n             }\n         }\n         \n         \n         //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n \n         //servlet is not an instance of javax.servlet.Servlet\n         try\n         {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n         //check if we need to forcibly set load-on-startup\n         checkInitOnStartup();\n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n      \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3ff4195dbc3a5d2767e6ba1978d090ea41dd3d99": {
			"type": "Ybodychange",
			"commitMessage": "Guarded calls to LOG.debug() with if (LOG.isDebugEnabled()) to reduce allocation of varargs Object[].\n",
			"commitDate": "2014-06-25, 3:26 AM",
			"commitName": "3ff4195dbc3a5d2767e6ba1978d090ea41dd3d99",
			"commitAuthor": "Simone Bordet",
			"commitDateOld": "2014-05-13, 2:21 AM",
			"commitNameOld": "fb2010177c55c6c144e1e52dd9aa1321b534e089",
			"commitAuthorOld": "Jan Bartel",
			"daysBetweenCommits": 43.05,
			"commitsBetweenForRepo": 109,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,93 +1,96 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n         if (!_enabled)\n             return;\n         \n         // Handle JSP file forced paths\n         if (_forcedPath != null)\n         {\n             // Look for a precompiled JSP Servlet\n             String precompiled=getClassNameForJsp(_forcedPath);\n-            LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n             ServletHolder jsp=getServletHandler().getServlet(precompiled);\n             if (jsp!=null)\n             {\n-                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n                 // set the className for this servlet to the precompiled one\n                 setClassName(jsp.getClassName());\n             }\n             else\n             { \n                 if (getClassName() == null)\n                 {\n                     // Look for normal JSP servlet\n                     jsp=getServletHandler().getServlet(\"jsp\");\n                     if (jsp!=null)\n                     {\n-                        LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n+                        if (LOG.isDebugEnabled())\n+                            LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n                         setClassName(jsp.getClassName());\n                         //copy jsp init params that don't exist for this servlet\n                         for (Map.Entry<String, String> entry:jsp.getInitParameters().entrySet())\n                         {\n                             if (!_initParams.containsKey(entry.getKey()))\n                                 setInitParameter(entry.getKey(), entry.getValue());\n                         }\n                         //jsp specific: set up the jsp-file on the JspServlet so it can precompile iff load-on-startup is >=0\n                         if (_initOnStartup)\n                             setInitParameter(\"jspFile\", _forcedPath);\n                     }                       \n                 }\n             }\n         }\n         \n         \n         //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n \n         //servlet is not an instance of javax.servlet.Servlet\n         try\n         {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n         //check if we need to forcibly set load-on-startup\n         checkInitOnStartup();\n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n      \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"7db7620c3656c89b70868e584445248838795233": {
			"type": "Ybodychange",
			"commitMessage": "367680 jsp-file with load-on-startup not precompiled\n",
			"commitDate": "2014-05-06, 12:22 PM",
			"commitName": "7db7620c3656c89b70868e584445248838795233",
			"commitAuthor": "Jan Bartel",
			"commitDateOld": "2014-03-13, 7:07 PM",
			"commitNameOld": "b3be24742353f7b5880fa8229a20ed0b19058cac",
			"commitAuthorOld": "Greg Wilkins",
			"daysBetweenCommits": 53.72,
			"commitsBetweenForRepo": 239,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,83 +1,93 @@\n     public void doStart()\n         throws Exception\n     {\n-\n-        \n         _unavailable=0;\n         if (!_enabled)\n             return;\n         \n         // Handle JSP file forced paths\n         if (_forcedPath != null)\n         {\n             // Look for a precompiled JSP Servlet\n-            String precompiled=\"org.apache.jsp\"+_forcedPath.replace('.','_').replace('/','.');\n-            \n+            String precompiled=getClassNameForJsp(_forcedPath);\n+            LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n             ServletHolder jsp=getServletHandler().getServlet(precompiled);\n             if (jsp!=null)\n             {\n                 LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n                 // set the className for this servlet to the precompiled one\n                 setClassName(jsp.getClassName());\n             }\n             else\n-            {\n-                // Look for normal JSP servlet\n-                jsp=getServletHandler().getServlet(\"jsp\");\n-                if (jsp!=null)\n+            { \n+                if (getClassName() == null)\n                 {\n-                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n-                    setClassName(jsp.getClassName());\n+                    // Look for normal JSP servlet\n+                    jsp=getServletHandler().getServlet(\"jsp\");\n+                    if (jsp!=null)\n+                    {\n+                        LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n+                        setClassName(jsp.getClassName());\n+                        //copy jsp init params that don't exist for this servlet\n+                        for (Map.Entry<String, String> entry:jsp.getInitParameters().entrySet())\n+                        {\n+                            if (!_initParams.containsKey(entry.getKey()))\n+                                setInitParameter(entry.getKey(), entry.getValue());\n+                        }\n+                        //jsp specific: set up the jsp-file on the JspServlet so it can precompile iff load-on-startup is >=0\n+                        if (_initOnStartup)\n+                            setInitParameter(\"jspFile\", _forcedPath);\n+                    }                       \n                 }\n             }\n         }\n         \n         \n         //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n \n         //servlet is not an instance of javax.servlet.Servlet\n         try\n         {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n         //check if we need to forcibly set load-on-startup\n         checkInitOnStartup();\n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n      \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b3be24742353f7b5880fa8229a20ed0b19058cac": {
			"type": "Ybodychange",
			"commitMessage": "merged quickstart changes\n",
			"commitDate": "2014-03-13, 7:07 PM",
			"commitName": "b3be24742353f7b5880fa8229a20ed0b19058cac",
			"commitAuthor": "Greg Wilkins",
			"commitDateOld": "2014-02-12, 5:31 PM",
			"commitNameOld": "18e19260ff2a0f99b7c935177287c77aa2c5588d",
			"commitAuthorOld": "Greg Wilkins",
			"daysBetweenCommits": 29.02,
			"commitsBetweenForRepo": 75,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,56 +1,83 @@\n     public void doStart()\n         throws Exception\n     {\n+\n+        \n         _unavailable=0;\n         if (!_enabled)\n             return;\n         \n+        // Handle JSP file forced paths\n+        if (_forcedPath != null)\n+        {\n+            // Look for a precompiled JSP Servlet\n+            String precompiled=\"org.apache.jsp\"+_forcedPath.replace('.','_').replace('/','.');\n+            \n+            ServletHolder jsp=getServletHandler().getServlet(precompiled);\n+            if (jsp!=null)\n+            {\n+                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n+                // set the className for this servlet to the precompiled one\n+                setClassName(jsp.getClassName());\n+            }\n+            else\n+            {\n+                // Look for normal JSP servlet\n+                jsp=getServletHandler().getServlet(\"jsp\");\n+                if (jsp!=null)\n+                {\n+                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\",_forcedPath, getName(),jsp.getClassName());\n+                    setClassName(jsp.getClassName());\n+                }\n+            }\n+        }\n+        \n         \n         //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n \n         //servlet is not an instance of javax.servlet.Servlet\n         try\n         {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n         //check if we need to forcibly set load-on-startup\n         checkInitOnStartup();\n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n      \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"801a33d367041ad1752ddfcae5348485ca928c25": {
			"type": "Ybodychange",
			"commitMessage": "424303  @ServletSecurity not applied on non load-on-startup servlets\n",
			"commitDate": "2013-12-18, 8:23 PM",
			"commitName": "801a33d367041ad1752ddfcae5348485ca928c25",
			"commitAuthor": "Jan Bartel",
			"commitDateOld": "2013-12-11, 7:44 PM",
			"commitNameOld": "dfe5889bc4b006054e550ab85c537857e4d66b6e",
			"commitAuthorOld": "Jan Bartel",
			"daysBetweenCommits": 7.03,
			"commitsBetweenForRepo": 37,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,54 +1,56 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n         if (!_enabled)\n             return;\n         \n         \n         //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n \n         //servlet is not an instance of javax.servlet.Servlet\n         try\n         {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (_servletHandler.isStartWithUnavailable())\n             {\n                 LOG.ignore(ue);\n                 return;\n             }\n             else\n                 throw ue;\n         }\n \n+        //check if we need to forcibly set load-on-startup\n+        checkInitOnStartup();\n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n      \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9c168866ffbb349d56501d11801f0418bdee3596": {
			"type": "Ybodychange",
			"commitMessage": "407931 Add toggle for failing on servlet availability\n",
			"commitDate": "2013-05-15, 5:27 PM",
			"commitName": "9c168866ffbb349d56501d11801f0418bdee3596",
			"commitAuthor": "Jan Bartel",
			"commitDateOld": "2013-05-02, 11:20 PM",
			"commitNameOld": "dfbef2db05da1a68e774f250572c3b670ee651e7",
			"commitAuthorOld": "",
			"daysBetweenCommits": 12.75,
			"commitsBetweenForRepo": 57,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,39 +1,54 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n         if (!_enabled)\n             return;\n+        \n+        \n         //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n-            throw ue;\n+            if (_servletHandler.isStartWithUnavailable())\n+            {\n+                LOG.ignore(ue);\n+                return;\n+            }\n+            else\n+                throw ue;\n         }\n \n+\n+        //servlet is not an instance of javax.servlet.Servlet\n         try\n         {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n-            if (!_servletHandler.isStartWithUnavailable())\n-                throw ue; //servlet is not an instance of javax.servlet.Servlet\n+            if (_servletHandler.isStartWithUnavailable())\n+            {\n+                LOG.ignore(ue);\n+                return;\n+            }\n+            else\n+                throw ue;\n         }\n \n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n      \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3f4a05fde3a3ef756809d0528e78031f46554fc9": {
			"type": "Ybodychange",
			"commitMessage": "407931 Add toggle for failing on servlet availability\n",
			"commitDate": "2013-05-15, 3:25 PM",
			"commitName": "3f4a05fde3a3ef756809d0528e78031f46554fc9",
			"commitAuthor": "Jan Bartel",
			"commitDateOld": "2013-05-02, 11:18 PM",
			"commitNameOld": "f4ee8ba48d77b7e571d21a52838a166b53530355",
			"commitAuthorOld": "",
			"daysBetweenCommits": 12.67,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,53 +1,68 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n         if (!_enabled)\n             return;\n+        \n+        \n         //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n         } \n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n-            throw ue;\n+            if (_servletHandler.isStartWithUnavailable())\n+            {\n+                LOG.ignore(ue);\n+                return;\n+            }\n+            else\n+                throw ue;\n         }\n-        \n+\n+\n+        //servlet is not an instance of javax.servlet.Servlet\n         try\n         {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n-            if (!_servletHandler.isStartWithUnavailable())\n-                throw ue; //servlet is not an instance of javax.servlet.Servlet\n+            if (_servletHandler.isStartWithUnavailable())\n+            {\n+                LOG.ignore(ue);\n+                return;\n+            }\n+            else\n+                throw ue;\n         }\n         \n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n         \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n \n         if (_extInstance || _initOnStartup)\n         {\n             try\n             {\n                 initServlet();\n             }\n             catch(Exception e)\n             {\n                 if (_servletHandler.isStartWithUnavailable())\n                     LOG.ignore(e);\n                 else\n                     throw e;\n             }\n         }  \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"cd47727ce491d6bb1984ac1f6934080abc608c90": {
			"type": "Ybodychange",
			"commitMessage": "402982 Premature initialization of Servlets\n",
			"commitDate": "2013-03-13, 9:28 PM",
			"commitName": "cd47727ce491d6bb1984ac1f6934080abc608c90",
			"commitAuthor": "Jan Bartel",
			"commitDateOld": "2013-01-11, 3:04 PM",
			"commitNameOld": "e1c516c7d1937b8604864dfe57236877ef5be4ea",
			"commitAuthorOld": "",
			"daysBetweenCommits": 61.22,
			"commitsBetweenForRepo": 335,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,53 +1,39 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n         if (!_enabled)\n             return;\n         //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             throw ue;\n         }\n \n         try\n         {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n             if (!_servletHandler.isStartWithUnavailable())\n                 throw ue; //servlet is not an instance of javax.servlet.Servlet\n         }\n \n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n-\n-        if (_extInstance || _initOnStartup)\n-        {\n-            try\n-            {\n-                initServlet();\n-            }\n-            catch(Exception e)\n-            {\n-                if (_servletHandler.isStartWithUnavailable())\n-                    LOG.ignore(e);\n-                else\n-                    throw e;\n-            }\n-        }\n+     \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3bcfc2946991975e804c8c00aad550aa0610db07": {
			"type": "Ybodychange",
			"commitMessage": "384280 Implement preliminary ServletRegistrations\n",
			"commitDate": "2012-07-11, 11:27 PM",
			"commitName": "3bcfc2946991975e804c8c00aad550aa0610db07",
			"commitAuthor": "Jan Bartel",
			"commitDateOld": "2012-07-04, 8:11 AM",
			"commitNameOld": "96fe2d6c3fc1337d359a9900f176363d8c775b6c",
			"commitAuthorOld": "Jan Bartel",
			"daysBetweenCommits": 7.64,
			"commitsBetweenForRepo": 16,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,41 +1,53 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n         if (!_enabled)\n             return;\n-        \n+        //check servlet has a class (ie is not a preliminary registration). If preliminary, fail startup.\n         try\n         {\n             super.doStart();\n+        } \n+        catch (UnavailableException ue)\n+        {\n+            makeUnavailable(ue);\n+            throw ue;\n+        }\n+        \n+        try\n+        {\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n+            if (!_servletHandler.isStartWithUnavailable())\n+                throw ue; //servlet is not an instance of javax.servlet.Servlet\n         }\n+        \n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n         \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n \n         if (_extInstance || _initOnStartup)\n         {\n             try\n             {\n                 initServlet();\n             }\n             catch(Exception e)\n             {\n                 if (_servletHandler.isStartWithUnavailable())\n                     LOG.ignore(e);\n                 else\n                     throw e;\n             }\n         }  \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"de005c68fdd010c22d0cab95729a07f8dc51c9e3": {
			"type": "Ybodychange",
			"commitMessage": "Revert \"Merge branch 'release-8'\"\n\nThis reverts commit 9e72457941e98eb2ee1adf64f2bc53160b01e34d, reversing\nchanges made to df12605f0e3e549c07c96968eedfd382fd6f274e.\n",
			"commitDate": "2011-11-29, 9:27 PM",
			"commitName": "de005c68fdd010c22d0cab95729a07f8dc51c9e3",
			"commitAuthor": "Greg Wilkins",
			"commitDateOld": "2011-11-21, 7:09 PM",
			"commitNameOld": "cbec18af6028105cfa5261c6176c29ac210140bc",
			"commitAuthorOld": "Jan Bartel",
			"daysBetweenCommits": 8.1,
			"commitsBetweenForRepo": 35,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,41 +1,38 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n-        if (!_enabled)\n-            return;\n-        \n         try\n         {\n             super.doStart();\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n         }\n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n         \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n \n         if (_extInstance || _initOnStartup)\n         {\n             try\n             {\n                 initServlet();\n             }\n             catch(Exception e)\n             {\n                 if (_servletHandler.isStartWithUnavailable())\n                     LOG.ignore(e);\n                 else\n                     throw e;\n             }\n         }  \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"cbec18af6028105cfa5261c6176c29ac210140bc": {
			"type": "Ybodychange",
			"commitMessage": "364430 Support web.xml enabled state for servlets\n",
			"commitDate": "2011-11-21, 7:09 PM",
			"commitName": "cbec18af6028105cfa5261c6176c29ac210140bc",
			"commitAuthor": "Jan Bartel",
			"commitDateOld": "2011-11-16, 3:59 PM",
			"commitNameOld": "127a5af8d7d9c10fdc1904ec94700e185bdd87b3",
			"commitAuthorOld": "",
			"daysBetweenCommits": 5.13,
			"commitsBetweenForRepo": 16,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,38 +1,41 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n+        if (!_enabled)\n+            return;\n+        \n         try\n         {\n             super.doStart();\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n         }\n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n         \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n \n         if (_extInstance || _initOnStartup)\n         {\n             try\n             {\n                 initServlet();\n             }\n             catch(Exception e)\n             {\n                 if (_servletHandler.isStartWithUnavailable())\n                     LOG.ignore(e);\n                 else\n                     throw e;\n             }\n         }  \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f7f7e0af7545e060f6508c7fe07b858fd58ebc3b": {
			"type": "Ybodychange",
			"commitMessage": "293739 - Deprecate static Jetty Log usage in favor of named logs\n\n+ Finished conversion of jetty-security, jetty-server, jetty-servlet,\n  jetty-servlets, jetty-websocket\n",
			"commitDate": "2011-08-24, 12:53 PM",
			"commitName": "f7f7e0af7545e060f6508c7fe07b858fd58ebc3b",
			"commitAuthor": "Joakim Erdfelt",
			"commitDateOld": "2011-08-16, 12:59 AM",
			"commitNameOld": "ee1afa5e97d0a49dcb039ae576fdb5ad0242341b",
			"commitAuthorOld": "Greg Wilkins",
			"daysBetweenCommits": 8.5,
			"commitsBetweenForRepo": 36,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,38 +1,38 @@\n     public void doStart()\n         throws Exception\n     {\n         _unavailable=0;\n         try\n         {\n             super.doStart();\n             checkServletType();\n         }\n         catch (UnavailableException ue)\n         {\n             makeUnavailable(ue);\n         }\n \n         _identityService = _servletHandler.getIdentityService();\n         if (_identityService!=null && _runAsRole!=null)\n             _runAsToken=_identityService.newRunAsToken(_runAsRole);\n         \n         _config=new Config();\n \n         if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet = new SingleThreadedWrapper();\n \n         if (_extInstance || _initOnStartup)\n         {\n             try\n             {\n                 initServlet();\n             }\n             catch(Exception e)\n             {\n                 if (_servletHandler.isStartWithUnavailable())\n-                    Log.ignore(e);\n+                    LOG.ignore(e);\n                 else\n                     throw e;\n             }\n         }  \n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"da627b843fe81fa0fe52a046c1be8595630e9ae7": {
			"type": "Yintroduced",
			"commitMessage": "jetty @ eclipse initial commit\n\ngit-svn-id: svn+ssh://dev.eclipse.org/svnroot/rt/org.eclipse.jetty/jetty/trunk@8 7e9141cc-0065-0410-87d8-b60c137991c4\n",
			"commitDate": "2009-03-24, 2:07 PM",
			"commitName": "da627b843fe81fa0fe52a046c1be8595630e9ae7",
			"commitAuthor": "Greg Wilkins",
			"diff": "@@ -0,0 +1,38 @@\n+    public void doStart()\n+    throws Exception\n+    {\n+        _unavailable=0;\n+        try\n+        {\n+            super.doStart();\n+            checkServletType();\n+        }\n+        catch (UnavailableException ue)\n+        {\n+            makeUnavailable(ue);\n+        }\n+\n+        _identityService = _servletHandler.getIdentityService();\n+        if (_identityService!=null && _runAsRole!=null)\n+            _runAsToken=_identityService.newRunAsToken(_runAsRole);\n+        \n+        _config=new Config();\n+\n+        if (_class!=null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n+            _servlet = new SingleThreadedWrapper();\n+\n+        if (_extInstance || _initOnStartup)\n+        {\n+            try\n+            {\n+                initServlet();\n+            }\n+            catch(Exception e)\n+            {\n+                if (_servletHandler.isStartWithUnavailable())\n+                    Log.ignore(e);\n+                else\n+                    throw e;\n+            }\n+        }  \n+    }\n\\ No newline at end of file\n"
		}
	},
	"sha": "fc5dd874f3deda71e6cd42af994a5af5cb6be4af"
}