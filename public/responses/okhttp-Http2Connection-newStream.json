{
	"repo": "https://github.com/square/okhttp.git",
	"file": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java",
	"method": {
		"longName": "Http2Connection::newStream(int associatedStreamId, List<Header> requestHeaders, boolean out)",
		"startLine": 233,
		"methodName": "newStream",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "private"
	},
	"history": {
		"8f56e81f938c6f68d9e15f9b43f3f17ab467faa2": {
			"type": "Ybodychange",
			"commitMessage": "Reset stream after a rollover (#3752)\n\n* Fail requests that roll over stream id\r\n\r\n* revert bad starting id\r\n\r\n* alternate implementation\r\n",
			"commitDate": "2018-01-28, 9:42 AM",
			"commitName": "8f56e81f938c6f68d9e15f9b43f3f17ab467faa2",
			"commitAuthor": "Yuri Schimke",
			"commitDateOld": "2017-08-14, 8:43 AM",
			"commitNameOld": "cd22113332cdeeedac8d6bda3297194f983b4aaf",
			"commitAuthorOld": "Igor Fedorenko",
			"daysBetweenCommits": 167.08,
			"commitsBetweenForRepo": 74,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,36 +1,39 @@\n   private Http2Stream newStream(\n       int associatedStreamId, List<Header> requestHeaders, boolean out) throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = false;\n     boolean flushHeaders;\n     Http2Stream stream;\n     int streamId;\n \n     synchronized (writer) {\n       synchronized (this) {\n+        if (nextStreamId > Integer.MAX_VALUE / 2) {\n+          shutdown(REFUSED_STREAM);\n+        }\n         if (shutdown) {\n           throw new ConnectionShutdownException();\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n         flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n         }\n       }\n       if (associatedStreamId == 0) {\n         writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n       } else if (client) {\n         throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n         writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (flushHeaders) {\n       writer.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"86be1c3acdf3c7b26c57cae17612b74ada5ce1a1": {
			"type": "Ybodychange",
			"commitMessage": "Gracefully recover from an HTTP/2 connection shutdown at start of request.\n",
			"commitDate": "2016-11-20, 5:54 AM",
			"commitName": "86be1c3acdf3c7b26c57cae17612b74ada5ce1a1",
			"commitAuthor": "Dave Roberge",
			"commitDateOld": "2016-11-13, 8:50 AM",
			"commitNameOld": "c581f5ddc6a091e36e745a44ca787d903e32df51",
			"commitAuthorOld": "",
			"daysBetweenCommits": 6.88,
			"commitsBetweenForRepo": 7,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,36 +1,36 @@\n   private Http2Stream newStream(\n       int associatedStreamId, List<Header> requestHeaders, boolean out) throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = false;\n     boolean flushHeaders;\n     Http2Stream stream;\n     int streamId;\n \n     synchronized (writer) {\n       synchronized (this) {\n         if (shutdown) {\n-          throw new IOException(\"shutdown\");\n+          throw new ConnectionShutdownException();\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n         flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n         }\n       }\n       if (associatedStreamId == 0) {\n         writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n       } else if (client) {\n         throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n         writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (flushHeaders) {\n       writer.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3d43a8dba89ccd7333c3ebcf74928e441790d943": {
			"type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
			"commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
			"commitDate": "2016-07-09, 4:09 PM",
			"commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
			"commitAuthor": "jwilson",
			"subchanges": [
				{
					"type": "Yfilerename",
					"commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
					"commitDate": "2016-07-09, 4:09 PM",
					"commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
					"commitAuthor": "jwilson",
					"commitDateOld": "2016-07-09, 3:27 PM",
					"commitNameOld": "33660bf58babd09521d19ef0ed1b09c15a5e27bb",
					"commitAuthorOld": "Jesse Wilson",
					"daysBetweenCommits": 0.03,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,36 +1,36 @@\n-  private FramedStream newStream(\n+  private Http2Stream newStream(\n       int associatedStreamId, List<Header> requestHeaders, boolean out) throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = false;\n     boolean flushHeaders;\n-    FramedStream stream;\n+    Http2Stream stream;\n     int streamId;\n \n-    synchronized (frameWriter) {\n+    synchronized (writer) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n-        stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n+        stream = new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n         flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n         }\n       }\n       if (associatedStreamId == 0) {\n-        frameWriter.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n+        writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n       } else if (client) {\n         throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n-        frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n+        writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (flushHeaders) {\n-      frameWriter.flush();\n+      writer.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java",
						"newPath": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
					"commitDate": "2016-07-09, 4:09 PM",
					"commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
					"commitAuthor": "jwilson",
					"commitDateOld": "2016-07-09, 3:27 PM",
					"commitNameOld": "33660bf58babd09521d19ef0ed1b09c15a5e27bb",
					"commitAuthorOld": "Jesse Wilson",
					"daysBetweenCommits": 0.03,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,36 +1,36 @@\n-  private FramedStream newStream(\n+  private Http2Stream newStream(\n       int associatedStreamId, List<Header> requestHeaders, boolean out) throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = false;\n     boolean flushHeaders;\n-    FramedStream stream;\n+    Http2Stream stream;\n     int streamId;\n \n-    synchronized (frameWriter) {\n+    synchronized (writer) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n-        stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n+        stream = new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n         flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n         }\n       }\n       if (associatedStreamId == 0) {\n-        frameWriter.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n+        writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n       } else if (client) {\n         throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n-        frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n+        writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (flushHeaders) {\n-      frameWriter.flush();\n+      writer.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "FramedStream",
						"newValue": "Http2Stream"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
					"commitDate": "2016-07-09, 4:09 PM",
					"commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
					"commitAuthor": "jwilson",
					"commitDateOld": "2016-07-09, 3:27 PM",
					"commitNameOld": "33660bf58babd09521d19ef0ed1b09c15a5e27bb",
					"commitAuthorOld": "Jesse Wilson",
					"daysBetweenCommits": 0.03,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,36 +1,36 @@\n-  private FramedStream newStream(\n+  private Http2Stream newStream(\n       int associatedStreamId, List<Header> requestHeaders, boolean out) throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = false;\n     boolean flushHeaders;\n-    FramedStream stream;\n+    Http2Stream stream;\n     int streamId;\n \n-    synchronized (frameWriter) {\n+    synchronized (writer) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n-        stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n+        stream = new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n         flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n         }\n       }\n       if (associatedStreamId == 0) {\n-        frameWriter.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n+        writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n       } else if (client) {\n         throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n-        frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n+        writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (flushHeaders) {\n-      frameWriter.flush();\n+      writer.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"0c04821a25c83fddebb29e8cd590609142ba20a2": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Drop support for SPDY/3.\n\nIt's redundant with HTTP/2.\n",
			"commitDate": "2016-07-09, 3:19 PM",
			"commitName": "0c04821a25c83fddebb29e8cd590609142ba20a2",
			"commitAuthor": "jwilson",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Drop support for SPDY/3.\n\nIt's redundant with HTTP/2.\n",
					"commitDate": "2016-07-09, 3:19 PM",
					"commitName": "0c04821a25c83fddebb29e8cd590609142ba20a2",
					"commitAuthor": "jwilson",
					"commitDateOld": "2016-07-06, 8:02 PM",
					"commitNameOld": "1267cb958c507f123ab135cac638768009dc84b5",
					"commitAuthorOld": "Dave Roberge",
					"daysBetweenCommits": 2.8,
					"commitsBetweenForRepo": 7,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,37 +1,36 @@\n-  private FramedStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n-      boolean in) throws IOException {\n+  private FramedStream newStream(\n+      int associatedStreamId, List<Header> requestHeaders, boolean out) throws IOException {\n     boolean outFinished = !out;\n-    boolean inFinished = !in;\n+    boolean inFinished = false;\n     boolean flushHeaders;\n     FramedStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n         flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n         }\n       }\n       if (associatedStreamId == 0) {\n-        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId,\n-            requestHeaders);\n+        frameWriter.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n       } else if (client) {\n         throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n         frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (flushHeaders) {\n       frameWriter.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[associatedStreamId-int, requestHeaders-List<Header>, out-boolean, in-boolean]",
						"newValue": "[associatedStreamId-int, requestHeaders-List<Header>, out-boolean]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Drop support for SPDY/3.\n\nIt's redundant with HTTP/2.\n",
					"commitDate": "2016-07-09, 3:19 PM",
					"commitName": "0c04821a25c83fddebb29e8cd590609142ba20a2",
					"commitAuthor": "jwilson",
					"commitDateOld": "2016-07-06, 8:02 PM",
					"commitNameOld": "1267cb958c507f123ab135cac638768009dc84b5",
					"commitAuthorOld": "Dave Roberge",
					"daysBetweenCommits": 2.8,
					"commitsBetweenForRepo": 7,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,37 +1,36 @@\n-  private FramedStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n-      boolean in) throws IOException {\n+  private FramedStream newStream(\n+      int associatedStreamId, List<Header> requestHeaders, boolean out) throws IOException {\n     boolean outFinished = !out;\n-    boolean inFinished = !in;\n+    boolean inFinished = false;\n     boolean flushHeaders;\n     FramedStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n         flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n         }\n       }\n       if (associatedStreamId == 0) {\n-        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId,\n-            requestHeaders);\n+        frameWriter.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n       } else if (client) {\n         throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n         frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (flushHeaders) {\n       frameWriter.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"a18d4e184b224d1567ffc1faa5502a5eeaf5445c": {
			"type": "Ybodychange",
			"commitMessage": "Remove methods from FramedConnection that are unused\n\nWhile investigating an Android issue with these methods\nI found they were not used. Tidying up.\n",
			"commitDate": "2016-05-31, 3:15 AM",
			"commitName": "a18d4e184b224d1567ffc1faa5502a5eeaf5445c",
			"commitAuthor": "Neil Fuller",
			"commitDateOld": "2016-05-22, 8:18 AM",
			"commitNameOld": "1503e362f61ca8c55adebcce802a724ae375debe",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 8.79,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,38 +1,37 @@\n   private FramedStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n       boolean in) throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n     boolean flushHeaders;\n     FramedStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n         flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n-          setIdle(false);\n         }\n       }\n       if (associatedStreamId == 0) {\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId,\n             requestHeaders);\n       } else if (client) {\n         throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n         frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (flushHeaders) {\n       frameWriter.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"1503e362f61ca8c55adebcce802a724ae375debe": {
			"type": "Ybodychange",
			"commitMessage": "Flush streams if the window size is zero.\n\nOtherwise we can deadlock, with OkHttp waiting for the server to send a larger\nwindow and the server not knowing that there's a stream that even wants it.\n",
			"commitDate": "2016-05-22, 8:18 AM",
			"commitName": "1503e362f61ca8c55adebcce802a724ae375debe",
			"commitAuthor": "jwilson",
			"commitDateOld": "2016-05-07, 7:08 PM",
			"commitNameOld": "4f24a30c12032b7033884a630696014afd3e77cb",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 14.55,
			"commitsBetweenForRepo": 6,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,36 +1,38 @@\n   private FramedStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n       boolean in) throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n+    boolean flushHeaders;\n     FramedStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n+        flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n       if (associatedStreamId == 0) {\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId,\n             requestHeaders);\n       } else if (client) {\n         throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n         frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n-    if (!out) {\n+    if (flushHeaders) {\n       frameWriter.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c9a89876de476983f273edbf108c365127c18c5e": {
			"type": "Ymovefromfile",
			"commitMessage": "Rename com.squareup.okhttp to okhttp3\n\nMaven group changes will come in follow up.\n",
			"commitDate": "2015-12-15, 11:34 PM",
			"commitName": "c9a89876de476983f273edbf108c365127c18c5e",
			"commitAuthor": "jwilson",
			"commitDateOld": "2015-12-15, 7:36 PM",
			"commitNameOld": "54dc2df914f2aae37fb48cc2c2f7560ee664bc2b",
			"commitAuthorOld": "Jake Wharton",
			"daysBetweenCommits": 0.17,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java",
				"newPath": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java",
				"oldMethodName": "newStream",
				"newMethodName": "newStream"
			}
		},
		"c753d2e41ba667f9b5a31451a16ecbaecdc65d80": {
			"type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
			"commitMessage": "Rename 'spdy' references to 'framed' where appropriate.\n",
			"commitDate": "2015-06-17, 4:40 PM",
			"commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
			"commitAuthor": "Jake Wharton",
			"subchanges": [
				{
					"type": "Yfilerename",
					"commitMessage": "Rename 'spdy' references to 'framed' where appropriate.\n",
					"commitDate": "2015-06-17, 4:40 PM",
					"commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
					"commitAuthor": "Jake Wharton",
					"commitDateOld": "2015-06-16, 10:46 AM",
					"commitNameOld": "b262f2a03001cd990568b929b2739dd3c7adb75f",
					"commitAuthorOld": "Jesse Wilson",
					"daysBetweenCommits": 1.25,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,36 +1,36 @@\n-  private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n+  private FramedStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n       boolean in) throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n-    SpdyStream stream;\n+    FramedStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n-        stream = new SpdyStream(streamId, this, outFinished, inFinished, requestHeaders);\n+        stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n       if (associatedStreamId == 0) {\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId,\n             requestHeaders);\n       } else if (client) {\n         throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n         frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (!out) {\n       frameWriter.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
						"newPath": "okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "Rename 'spdy' references to 'framed' where appropriate.\n",
					"commitDate": "2015-06-17, 4:40 PM",
					"commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
					"commitAuthor": "Jake Wharton",
					"commitDateOld": "2015-06-16, 10:46 AM",
					"commitNameOld": "b262f2a03001cd990568b929b2739dd3c7adb75f",
					"commitAuthorOld": "Jesse Wilson",
					"daysBetweenCommits": 1.25,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,36 +1,36 @@\n-  private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n+  private FramedStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n       boolean in) throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n-    SpdyStream stream;\n+    FramedStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n-        stream = new SpdyStream(streamId, this, outFinished, inFinished, requestHeaders);\n+        stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n       if (associatedStreamId == 0) {\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId,\n             requestHeaders);\n       } else if (client) {\n         throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n         frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (!out) {\n       frameWriter.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "SpdyStream",
						"newValue": "FramedStream"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Rename 'spdy' references to 'framed' where appropriate.\n",
					"commitDate": "2015-06-17, 4:40 PM",
					"commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
					"commitAuthor": "Jake Wharton",
					"commitDateOld": "2015-06-16, 10:46 AM",
					"commitNameOld": "b262f2a03001cd990568b929b2739dd3c7adb75f",
					"commitAuthorOld": "Jesse Wilson",
					"daysBetweenCommits": 1.25,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,36 +1,36 @@\n-  private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n+  private FramedStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n       boolean in) throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n-    SpdyStream stream;\n+    FramedStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n-        stream = new SpdyStream(streamId, this, outFinished, inFinished, requestHeaders);\n+        stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n       if (associatedStreamId == 0) {\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId,\n             requestHeaders);\n       } else if (client) {\n         throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n         frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (!out) {\n       frameWriter.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"cc38140be4c7e41330cf7749c3eeba23c85f9522": {
			"type": "Ybodychange",
			"commitMessage": "Added support for http/2 draft 12, which is incompatible with previous priority schemes.\n",
			"commitDate": "2014-05-04, 12:53 PM",
			"commitName": "cc38140be4c7e41330cf7749c3eeba23c85f9522",
			"commitAuthor": "Adrian Cole",
			"commitDateOld": "2014-04-18, 9:58 AM",
			"commitNameOld": "889bc764a5f1627090a69e6e100bcd18474dfb86",
			"commitAuthorOld": "Jesse Wilson",
			"daysBetweenCommits": 16.12,
			"commitsBetweenForRepo": 65,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,38 +1,36 @@\n   private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n       boolean in) throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n-    int priority = -1; // TODO: permit the caller to specify a priority?\n-    int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n-        stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n+        stream = new SpdyStream(streamId, this, outFinished, inFinished, requestHeaders);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n       if (associatedStreamId == 0) {\n-        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n+        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId,\n             requestHeaders);\n       } else if (client) {\n         throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n         frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (!out) {\n       frameWriter.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"1ab398fb93f61e6053ba0190fb76b2d312b83800": {
			"type": "Ybodychange",
			"commitMessage": "Address PushObserver feedback.\n",
			"commitDate": "2014-03-04, 9:53 PM",
			"commitName": "1ab398fb93f61e6053ba0190fb76b2d312b83800",
			"commitAuthor": "Adrian Cole",
			"commitDateOld": "2014-03-01, 10:23 PM",
			"commitNameOld": "a5ba3e9062f3bde4bb6896f1db433a2408119e94",
			"commitAuthorOld": "Adrian Cole",
			"daysBetweenCommits": 2.98,
			"commitsBetweenForRepo": 9,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,37 +1,38 @@\n   private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n       boolean in) throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n     int priority = -1; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n       if (associatedStreamId == 0) {\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n             requestHeaders);\n+      } else if (client) {\n+        throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n       } else { // HTTP/2 has a PUSH_PROMISE frame.\n-        if (client) throw new IOException(\"Client attempted to push stream: \" + associatedStreamId);\n         frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (!out) {\n       frameWriter.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a5ba3e9062f3bde4bb6896f1db433a2408119e94": {
			"type": "Ybodychange",
			"commitMessage": "Add HTTP/2 PushObserver.\n",
			"commitDate": "2014-03-01, 10:23 PM",
			"commitName": "a5ba3e9062f3bde4bb6896f1db433a2408119e94",
			"commitAuthor": "Adrian Cole",
			"commitDateOld": "2014-02-27, 9:28 PM",
			"commitNameOld": "110a4fac4257fe2df0e23149fbef76e750604cf4",
			"commitAuthorOld": "Jesse Wilson",
			"daysBetweenCommits": 2.04,
			"commitsBetweenForRepo": 10,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,37 +1,37 @@\n   private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n-      boolean in)\n-      throws IOException {\n+      boolean in) throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n     int priority = -1; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n       if (associatedStreamId == 0) {\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n             requestHeaders);\n-      } else {\n+      } else { // HTTP/2 has a PUSH_PROMISE frame.\n+        if (client) throw new IOException(\"Client attempted to push stream: \" + associatedStreamId);\n         frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n       }\n     }\n \n     if (!out) {\n       frameWriter.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"110a4fac4257fe2df0e23149fbef76e750604cf4": {
			"type": "Yfilerename",
			"commitMessage": "Rearrange OkHttp modules.\n\nThe HTTP client and SPDY code are now a single module that\nmockwebserver depends upon.\n\nThe tests are now in a separate module that depends on both\nOkHttp and mockwebserver.\n",
			"commitDate": "2014-02-27, 9:28 PM",
			"commitName": "110a4fac4257fe2df0e23149fbef76e750604cf4",
			"commitAuthor": "Jesse Wilson",
			"commitDateOld": "2014-02-25, 8:34 PM",
			"commitNameOld": "d5cbd0aebe090d956f54b6697068fcbff6d668e7",
			"commitAuthorOld": "Adrian Cole",
			"daysBetweenCommits": 2.04,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
				"newPath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java"
			}
		},
		"fb46f100a4d66342a0b101624fd351a51b6f14a9": {
			"type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
			"commitMessage": "Teach MockWebServer HTTP/2 Push Promise.\n",
			"commitDate": "2014-02-23, 6:16 PM",
			"commitName": "fb46f100a4d66342a0b101624fd351a51b6f14a9",
			"commitAuthor": "Adrian Cole",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Teach MockWebServer HTTP/2 Push Promise.\n",
					"commitDate": "2014-02-23, 6:16 PM",
					"commitName": "fb46f100a4d66342a0b101624fd351a51b6f14a9",
					"commitAuthor": "Adrian Cole",
					"commitDateOld": "2014-02-23, 4:44 PM",
					"commitNameOld": "416e59e219804c8eca46b9317b19b8f8ac3cf24e",
					"commitAuthorOld": "jwilson",
					"daysBetweenCommits": 0.06,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,34 +1,37 @@\n-  public SpdyStream newStream(List<Header> requestHeaders, boolean out, boolean in)\n+  private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n+      boolean in)\n       throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n-    int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n     int priority = -1; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n-\n-      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n-          requestHeaders);\n+      if (associatedStreamId == 0) {\n+        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n+            requestHeaders);\n+      } else {\n+        frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n+      }\n     }\n \n     if (!out) {\n       frameWriter.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[requestHeaders-List<Header>, out-boolean, in-boolean]",
						"newValue": "[associatedStreamId-int, requestHeaders-List<Header>, out-boolean, in-boolean]"
					}
				},
				{
					"type": "Ymodifierchange",
					"commitMessage": "Teach MockWebServer HTTP/2 Push Promise.\n",
					"commitDate": "2014-02-23, 6:16 PM",
					"commitName": "fb46f100a4d66342a0b101624fd351a51b6f14a9",
					"commitAuthor": "Adrian Cole",
					"commitDateOld": "2014-02-23, 4:44 PM",
					"commitNameOld": "416e59e219804c8eca46b9317b19b8f8ac3cf24e",
					"commitAuthorOld": "jwilson",
					"daysBetweenCommits": 0.06,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,34 +1,37 @@\n-  public SpdyStream newStream(List<Header> requestHeaders, boolean out, boolean in)\n+  private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n+      boolean in)\n       throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n-    int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n     int priority = -1; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n-\n-      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n-          requestHeaders);\n+      if (associatedStreamId == 0) {\n+        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n+            requestHeaders);\n+      } else {\n+        frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n+      }\n     }\n \n     if (!out) {\n       frameWriter.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[public]",
						"newValue": "[private]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Teach MockWebServer HTTP/2 Push Promise.\n",
					"commitDate": "2014-02-23, 6:16 PM",
					"commitName": "fb46f100a4d66342a0b101624fd351a51b6f14a9",
					"commitAuthor": "Adrian Cole",
					"commitDateOld": "2014-02-23, 4:44 PM",
					"commitNameOld": "416e59e219804c8eca46b9317b19b8f8ac3cf24e",
					"commitAuthorOld": "jwilson",
					"daysBetweenCommits": 0.06,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,34 +1,37 @@\n-  public SpdyStream newStream(List<Header> requestHeaders, boolean out, boolean in)\n+  private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out,\n+      boolean in)\n       throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n-    int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n     int priority = -1; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n-\n-      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n-          requestHeaders);\n+      if (associatedStreamId == 0) {\n+        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n+            requestHeaders);\n+      } else {\n+        frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n+      }\n     }\n \n     if (!out) {\n       frameWriter.flush();\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"ab78dadb4bb94db74770e179e04e2ed791c4a51e": {
			"type": "Ybodychange",
			"commitMessage": "Use BufferedSink in SPDY and HTTP/2.\n",
			"commitDate": "2014-02-23, 9:42 AM",
			"commitName": "ab78dadb4bb94db74770e179e04e2ed791c4a51e",
			"commitAuthor": "jwilson",
			"commitDateOld": "2014-02-22, 2:08 PM",
			"commitNameOld": "095448552ee41e62e58994be0f424df750c6822f",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 0.82,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,30 +1,34 @@\n   public SpdyStream newStream(List<Header> requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n     int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n     int priority = -1; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n+    if (!out) {\n+      frameWriter.flush();\n+    }\n+\n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"358169b89f32c00bf229b4e42ccef756588da71f": {
			"type": "Ybodychange",
			"commitMessage": "Send window update after the peer sends half the limit on a stream or connection.\n",
			"commitDate": "2014-01-26, 10:54 PM",
			"commitName": "358169b89f32c00bf229b4e42ccef756588da71f",
			"commitAuthor": "Adrian Cole",
			"commitDateOld": "2014-01-26, 3:01 PM",
			"commitNameOld": "d990b5819cd6282923134564f3bcc59263eb0616",
			"commitAuthorOld": "Adrian Cole",
			"daysBetweenCommits": 0.33,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,31 +1,30 @@\n   public SpdyStream newStream(List<Header> requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n     int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n     int priority = -1; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n-        stream = new SpdyStream(\n-            streamId, this, outFinished, inFinished, priority, requestHeaders, initialWindowSize);\n+        stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d4508141fc9fa1b816c5a1ff3f39149d4dfb22de": {
			"type": "Ybodychange",
			"commitMessage": "Honor change in connection-level initial write window from peer settings.\n",
			"commitDate": "2014-01-26, 12:48 PM",
			"commitName": "d4508141fc9fa1b816c5a1ff3f39149d4dfb22de",
			"commitAuthor": "Adrian Cole",
			"commitDateOld": "2014-01-26, 10:36 AM",
			"commitNameOld": "b9b5c8462da2abe26dcf157d2df483ba61e3d379",
			"commitAuthorOld": "",
			"daysBetweenCommits": 0.09,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,31 +1,31 @@\n   public SpdyStream newStream(List<Header> requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n     int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n     int priority = -1; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new SpdyStream(\n-            streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n+            streamId, this, outFinished, inFinished, priority, requestHeaders, initialWindowSize);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b95a0ccbcae50f92acc923d62fc6c9cecc6bbb63": {
			"type": "Yparameterchange",
			"commitMessage": "Top-level immutable, internal HeaderEntry class to reduce duplication around header names.  Do not emit :version in http/2.\n",
			"commitDate": "2014-01-19, 11:35 AM",
			"commitName": "b95a0ccbcae50f92acc923d62fc6c9cecc6bbb63",
			"commitAuthor": "Adrian Cole",
			"commitDateOld": "2014-01-18, 9:46 PM",
			"commitNameOld": "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8",
			"commitAuthorOld": "Adrian Cole",
			"daysBetweenCommits": 0.58,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,31 +1,31 @@\n-  public SpdyStream newStream(List<ByteString> requestHeaders, boolean out, boolean in)\n+  public SpdyStream newStream(List<Header> requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n     int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n     int priority = -1; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new SpdyStream(\n             streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[requestHeaders-List<ByteString>, out-boolean, in-boolean]",
				"newValue": "[requestHeaders-List<Header>, out-boolean, in-boolean]"
			}
		},
		"ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8": {
			"type": "Ybodychange",
			"commitMessage": "Extract default settings to variants.  Read windowSize (spdy/3) and headerTableSize (http/2) from peer.\n",
			"commitDate": "2014-01-18, 9:46 PM",
			"commitName": "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8",
			"commitAuthor": "Adrian Cole",
			"commitDateOld": "2014-01-16, 9:39 AM",
			"commitNameOld": "9766de54dc8be4560b45d89452b016998277dae3",
			"commitAuthorOld": "Adrian Cole",
			"daysBetweenCommits": 2.51,
			"commitsBetweenForRepo": 6,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,31 +1,31 @@\n   public SpdyStream newStream(List<ByteString> requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n     int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n     int priority = -1; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new SpdyStream(\n-            streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n+            streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"5c787a0b9d5c83c764880da4b1503a65ee0ff267": {
			"type": "Yparameterchange",
			"commitMessage": "Refactor SPDY code to use ByteString for headers.\n",
			"commitDate": "2014-01-06, 7:51 PM",
			"commitName": "5c787a0b9d5c83c764880da4b1503a65ee0ff267",
			"commitAuthor": "Adrian Cole",
			"commitDateOld": "2014-01-05, 5:53 PM",
			"commitNameOld": "d7444f5fc4414b51b2708606257381cc0de404e1",
			"commitAuthorOld": "Adrian Cole",
			"daysBetweenCommits": 1.08,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,31 +1,31 @@\n-  public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n+  public SpdyStream newStream(List<ByteString> requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n     int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n     int priority = -1; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new SpdyStream(\n             streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[requestHeaders-List<String>, out-boolean, in-boolean]",
				"newValue": "[requestHeaders-List<ByteString>, out-boolean, in-boolean]"
			}
		},
		"68de030b356e83ca5680986a290e98cfee8fd550": {
			"type": "Ybodychange",
			"commitMessage": "update http2 to draft 9 and hpack to draft 5\n",
			"commitDate": "2014-01-04, 8:33 PM",
			"commitName": "68de030b356e83ca5680986a290e98cfee8fd550",
			"commitAuthor": "Adrian Cole",
			"commitDateOld": "2013-12-02, 11:18 AM",
			"commitNameOld": "f7d96b25631612860a1a3e3ebed76d5a4511b90c",
			"commitAuthorOld": "Adrian Cole",
			"daysBetweenCommits": 33.39,
			"commitsBetweenForRepo": 27,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,31 +1,31 @@\n   public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n     int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n-    int priority = 0; // TODO: permit the caller to specify a priority?\n+    int priority = -1; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new SpdyStream(\n             streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a91124b6d4e2eb1bb3c71a7a8ddff7d40b7db55a": {
			"type": "Ybodychange",
			"commitMessage": "Use one callback for SYN_STREAM, SYN_REPLY and HEADERS.\n\nThis is closer to the semantics of HTTP/2.0, which uses the HEADERS\nframe for all three types. SPDY is a bit more strict because it\nrelies on redundancy; it's an error to send a SYN_REPLY after a\nHEADERS frame. With HTTP/2.0, there's only one type so there's\nno error to detect.\n",
			"commitDate": "2013-09-01, 11:57 AM",
			"commitName": "a91124b6d4e2eb1bb3c71a7a8ddff7d40b7db55a",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-08-27, 8:25 AM",
			"commitNameOld": "5663f815af072160f344712d5b353439bd2066f1",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 5.15,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,31 +1,31 @@\n   public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n     int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n     int priority = 0; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n-        stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, slot,\n-            requestHeaders, settings);\n+        stream = new SpdyStream(\n+            streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"2f31d7122d8806b6c32d2d1e181ca635fb80bba7": {
			"type": "Ybodychange",
			"commitMessage": "Hide more flags from SPDY APIs.\n\nFlags are not portable between SPDY/3 and HTTP/2.0,\nso hide them in the reader & writer code.\n\nAlso rename SpdyReader to FrameReader and SpdyWriter to\nFrameWriter. Other classes will be renamed as they become\nindependent of the underlying protocol.\n",
			"commitDate": "2013-08-14, 10:29 PM",
			"commitName": "2f31d7122d8806b6c32d2d1e181ca635fb80bba7",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-08-14, 5:25 AM",
			"commitNameOld": "39c0d7d56397ab14892db8032464cb8a9f983ff1",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 0.71,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,31 +1,31 @@\n   public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished = !out;\n     boolean inFinished = !in;\n     int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n     int priority = 0; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n-    synchronized (spdyWriter) {\n+    synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n         stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, slot,\n             requestHeaders, settings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n-      spdyWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n+      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"39c0d7d56397ab14892db8032464cb8a9f983ff1": {
			"type": "Ybodychange",
			"commitMessage": "Push stream flags into Spdy3.\n\nPreviously flags were being interpretted in SpdyConnection\nand SpdyStream. This won't work for HTTP/2.0, which has its\nown flag setup.\n",
			"commitDate": "2013-08-14, 5:25 AM",
			"commitName": "39c0d7d56397ab14892db8032464cb8a9f983ff1",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-08-11, 10:02 AM",
			"commitNameOld": "21dc92f967d01c2da3ace57b7cc04421e2fd296b",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 2.81,
			"commitsBetweenForRepo": 11,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,31 @@\n   public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n       throws IOException {\n-    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n+    boolean outFinished = !out;\n+    boolean inFinished = !in;\n     int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n     int priority = 0; // TODO: permit the caller to specify a priority?\n     int slot = 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (spdyWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId = nextStreamId;\n         nextStreamId += 2;\n-        stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n+        stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, slot,\n+            requestHeaders, settings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n-      spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n+      spdyWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n+          requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3c0faa9ca18de3be0a178e590086888f4f89612a": {
			"type": "Yfilerename",
			"commitMessage": "Make a home for MockWebServer in OkHttp.\n\nTo build HTTP/2.0 support into OkHttp I'm going to simultaneously\nbuild HTTP/2.0 support into MockWebServer. To make that possible,\nI'm first going to fork MockWebServer and then combine it with\nMockSpdyServer.\n",
			"commitDate": "2013-08-03, 10:50 AM",
			"commitName": "3c0faa9ca18de3be0a178e590086888f4f89612a",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-07-20, 12:14 PM",
			"commitNameOld": "cc4633943800572673c03b32d0b2bc9a08ae184d",
			"commitAuthorOld": "Jesse Wilson",
			"daysBetweenCommits": 13.94,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
				"newPath": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java"
			}
		},
		"7ccbf48838b7cfe42759c67790636d442ea5daa3": {
			"type": "Yfilerename",
			"commitMessage": "Move library into a module. Introduce sample module with simple GitHub client.\n",
			"commitDate": "2013-03-25, 9:04 PM",
			"commitName": "7ccbf48838b7cfe42759c67790636d442ea5daa3",
			"commitAuthor": "Jake Wharton",
			"commitDateOld": "2013-03-15, 8:39 AM",
			"commitNameOld": "ba2b7432cb9fabfc725b09a9f14878cb128ef208",
			"commitAuthorOld": "Jesse Wilson",
			"daysBetweenCommits": 10.52,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
				"newPath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java"
			}
		},
		"6f6d959fdae64065521990413f86bc7ab038d7c1": {
			"type": "Ybodychange",
			"commitMessage": "Improvements to connection pool\n",
			"commitDate": "2013-01-31, 3:23 PM",
			"commitName": "6f6d959fdae64065521990413f86bc7ab038d7c1",
			"commitAuthor": "Marcelo Cortes",
			"commitDateOld": "2013-01-22, 11:38 AM",
			"commitNameOld": "3a0874cb220a26170e7097432676307feef4504f",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 9.16,
			"commitsBetweenForRepo": 6,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,29 +1,30 @@\n     public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n         int priority = 0; // TODO: permit the caller to specify a priority?\n         int slot = 0; // TODO: permit the caller to specify a slot?\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n                 if (shutdown) {\n                     throw new IOException(\"shutdown\");\n                 }\n                 streamId = nextStreamId;\n                 nextStreamId += 2;\n                 stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders,\n                         settings);\n                 if (stream.isOpen()) {\n                     streams.put(streamId, stream);\n+                    setIdle(false);\n                 }\n             }\n \n             spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot,\n                     requestHeaders);\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"1bd9fefb5199d1499c8dac6c82c18c82e0678428": {
			"type": "Ybodychange",
			"commitMessage": "Implement flow control for the outgoing stream.\n\nWe had a bug where we were using spdy/2's layout for\nsetting frames rather than spdy/3's layout. I discovered\nthis when testing flow control against Chrome.\n\nThis fixes uploads greater than 64 KiB.\n",
			"commitDate": "2013-01-18, 1:50 PM",
			"commitName": "1bd9fefb5199d1499c8dac6c82c18c82e0678428",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-01-18, 10:52 AM",
			"commitNameOld": "b1c592d7c9013a0b5e18f83cd5bd4b56f420b37c",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 0.12,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,28 +1,29 @@\n     public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n         int priority = 0; // TODO: permit the caller to specify a priority?\n         int slot = 0; // TODO: permit the caller to specify a slot?\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n                 if (shutdown) {\n                     throw new IOException(\"shutdown\");\n                 }\n                 streamId = nextStreamId;\n                 nextStreamId += 2;\n-                stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders);\n+                stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders,\n+                        settings);\n                 if (stream.isOpen()) {\n                     streams.put(streamId, stream);\n                 }\n             }\n \n             spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot,\n                     requestHeaders);\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"06579c5bfb6a051a9fbca5be2d15a52fcf77f38c": {
			"type": "Ybodychange",
			"commitMessage": "Upgrade from spdy/2 to spdy/3.\n",
			"commitDate": "2013-01-06, 4:30 PM",
			"commitName": "06579c5bfb6a051a9fbca5be2d15a52fcf77f38c",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-01-01, 8:50 PM",
			"commitNameOld": "689f66222bd8984dd69229a4ee9caf8da528ae12",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 4.82,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,26 +1,28 @@\n     public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n-        int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream.\n-        int priority = 0; // TODO: permit the caller to specify a priority.\n+        int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream?\n+        int priority = 0; // TODO: permit the caller to specify a priority?\n+        int slot = 0; // TODO: permit the caller to specify a slot?\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n                 if (shutdown) {\n                     throw new IOException(\"shutdown\");\n                 }\n                 streamId = nextStreamId;\n                 nextStreamId += 2;\n-                stream = new SpdyStream(streamId, this, requestHeaders, flags);\n+                stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders);\n                 if (stream.isOpen()) {\n                     streams.put(streamId, stream);\n                 }\n             }\n \n-            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n+            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot,\n+                    requestHeaders);\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"689f66222bd8984dd69229a4ee9caf8da528ae12": {
			"type": "Yfilerename",
			"commitMessage": "Flatten internal packages and utility classes.\n\nThe previous structure had hierarchy that was useful\nfor libcore but overkill for OkHttp.\n",
			"commitDate": "2013-01-01, 8:50 PM",
			"commitName": "689f66222bd8984dd69229a4ee9caf8da528ae12",
			"commitAuthor": "jwilson",
			"commitDateOld": "2013-01-01, 8:27 PM",
			"commitNameOld": "73516e6ab1d336ffd520e845e14f80cf08657bd0",
			"commitAuthorOld": "Jake Wharton",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java",
				"newPath": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java"
			}
		},
		"7f4249625960b7f10dc61aae4d1896c2e126f538": {
			"type": "Ybodychange",
			"commitMessage": "Discard streams once they're no longer open.\n\nThis avoids a memory leak; we don't hold onto the input stream\nand it's large 64 KiB buffer long after that stream is done.\n\nIt also allows SpdyConnection to track how many streams are\ncurrently active. This will allow a follow up change to shut\ndown connections that don't host any streams.\n",
			"commitDate": "2012-12-31, 6:55 PM",
			"commitName": "7f4249625960b7f10dc61aae4d1896c2e126f538",
			"commitAuthor": "jwilson",
			"commitDateOld": "2012-12-31, 12:35 AM",
			"commitNameOld": "60d5852c6676ece85b0e3d0c6e45fb0186303f83",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 0.76,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,26 @@\n     public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream.\n         int priority = 0; // TODO: permit the caller to specify a priority.\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n                 if (shutdown) {\n                     throw new IOException(\"shutdown\");\n                 }\n                 streamId = nextStreamId;\n                 nextStreamId += 2;\n                 stream = new SpdyStream(streamId, this, requestHeaders, flags);\n-                streams.put(streamId, stream);\n+                if (stream.isOpen()) {\n+                    streams.put(streamId, stream);\n+                }\n             }\n \n             spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"60d5852c6676ece85b0e3d0c6e45fb0186303f83": {
			"type": "Ybodychange",
			"commitMessage": "Implement GOAWAY, for clean shutdowns of SPDY connections.\n\nAlso clean up some SPDY headers and improve error messages.\n",
			"commitDate": "2012-12-31, 12:35 AM",
			"commitName": "60d5852c6676ece85b0e3d0c6e45fb0186303f83",
			"commitAuthor": "jwilson",
			"commitDateOld": "2012-12-29, 10:36 PM",
			"commitNameOld": "768059cfc4c611f3212d0b92ff5073541a852faf",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 1.08,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,21 +1,24 @@\n     public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream.\n         int priority = 0; // TODO: permit the caller to specify a priority.\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n+                if (shutdown) {\n+                    throw new IOException(\"shutdown\");\n+                }\n                 streamId = nextStreamId;\n                 nextStreamId += 2;\n                 stream = new SpdyStream(streamId, this, requestHeaders, flags);\n                 streams.put(streamId, stream);\n             }\n \n             spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d": {
			"type": "Yfilerename",
			"commitMessage": "Move out of the libcore package.\n\nTo promote the code into AOSP, we'll keep this package as-is\nand do the jarjar in Android instead.\n",
			"commitDate": "2012-12-15, 2:55 PM",
			"commitName": "50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d",
			"commitAuthor": "jwilson",
			"commitDateOld": "2012-12-15, 2:17 PM",
			"commitNameOld": "7f7aa90bc5d41d8f818fc988d2a91d22393c7329",
			"commitAuthorOld": "jwilson",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/main/java/libcore/net/spdy/SpdyConnection.java",
				"newPath": "src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java"
			}
		},
		"853c4012b79711f123c0b9780e565062b32bf1c7": {
			"type": "Ybodychange",
			"commitMessage": "Abandon foolish consistency with SpdyReader for sending frames.\n\nSetting fields and then calling a method is just not as usable\nas calling a method that takes arguments.\n\nAlso move Settings into their own class, so we can sling them\naround without a bunch of ceremony.\n",
			"commitDate": "2012-09-26, 9:58 AM",
			"commitName": "853c4012b79711f123c0b9780e565062b32bf1c7",
			"commitAuthor": "Jesse Wilson",
			"commitDateOld": "2012-09-25, 3:32 PM",
			"commitNameOld": "68ebb704fb73ad1545ae82287f8b2a5f68d8e69d",
			"commitAuthorOld": "Jesse Wilson",
			"daysBetweenCommits": 0.77,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,26 +1,21 @@\n     public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream.\n         int priority = 0; // TODO: permit the caller to specify a priority.\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n                 streamId = nextStreamId;\n                 nextStreamId += 2;\n                 stream = new SpdyStream(streamId, this, requestHeaders, flags);\n                 streams.put(streamId, stream);\n             }\n \n-            spdyWriter.flags = flags;\n-            spdyWriter.id = streamId;\n-            spdyWriter.associatedId = associatedStreamId;\n-            spdyWriter.priority = priority;\n-            spdyWriter.nameValueBlock = requestHeaders;\n-            spdyWriter.synStream();\n+            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"68ebb704fb73ad1545ae82287f8b2a5f68d8e69d": {
			"type": "Ybodychange",
			"commitMessage": "Address some todos around stream failures and peer errors.\n",
			"commitDate": "2012-09-25, 3:32 PM",
			"commitName": "68ebb704fb73ad1545ae82287f8b2a5f68d8e69d",
			"commitAuthor": "Jesse Wilson",
			"commitDateOld": "2012-09-25, 12:29 PM",
			"commitNameOld": "60b3a6dd6240f40c29fffd897c2dac314af49836",
			"commitAuthorOld": "Jesse Wilson",
			"daysBetweenCommits": 0.13,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,26 +1,26 @@\n     public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n-        int associatedStreamId = 0;  // TODO\n-        int priority = 0; // TODO\n+        int associatedStreamId = 0;  // TODO: permit the caller to specify an associated stream.\n+        int priority = 0; // TODO: permit the caller to specify a priority.\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n                 streamId = nextStreamId;\n                 nextStreamId += 2;\n                 stream = new SpdyStream(streamId, this, requestHeaders, flags);\n                 streams.put(streamId, stream);\n             }\n \n             spdyWriter.flags = flags;\n             spdyWriter.id = streamId;\n             spdyWriter.associatedId = associatedStreamId;\n             spdyWriter.priority = priority;\n             spdyWriter.nameValueBlock = requestHeaders;\n             spdyWriter.synStream();\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"60b3a6dd6240f40c29fffd897c2dac314af49836": {
			"type": "Ymultichange(Ymodifierchange,Ybodychange)",
			"commitMessage": "Be more careful about synchronization.\n\nSpdyConnection needs to guard its own state separately from\nthe SpdyWriter, which permits slow blocking calls. Split these\ninto multiple independent locks.\n\nAlso use independent right-sized thread pools for reading (exactly\none thread all the time) delayed writing (0 or 1 threads) and\ncallbacks (any number of threads).\n",
			"commitDate": "2012-09-25, 12:29 PM",
			"commitName": "60b3a6dd6240f40c29fffd897c2dac314af49836",
			"commitAuthor": "Jesse Wilson",
			"subchanges": [
				{
					"type": "Ymodifierchange",
					"commitMessage": "Be more careful about synchronization.\n\nSpdyConnection needs to guard its own state separately from\nthe SpdyWriter, which permits slow blocking calls. Split these\ninto multiple independent locks.\n\nAlso use independent right-sized thread pools for reading (exactly\none thread all the time) delayed writing (0 or 1 threads) and\ncallbacks (any number of threads).\n",
					"commitDate": "2012-09-25, 12:29 PM",
					"commitName": "60b3a6dd6240f40c29fffd897c2dac314af49836",
					"commitAuthor": "Jesse Wilson",
					"commitDateOld": "2012-09-24, 10:34 PM",
					"commitNameOld": "2bd54fa72fe72f92212428a024050838c2b62d57",
					"commitAuthorOld": "Jesse Wilson",
					"daysBetweenCommits": 0.58,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,20 +1,26 @@\n-    public synchronized SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n+    public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n             throws IOException {\n-        int streamId = nextStreamId; // TODO\n-        nextStreamId += 2;\n         int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId = 0;  // TODO\n         int priority = 0; // TODO\n+        SpdyStream stream;\n+        int streamId;\n \n-        SpdyStream result = new SpdyStream(streamId, this, requestHeaders, flags);\n-        streams.put(streamId, result);\n+        synchronized (spdyWriter) {\n+            synchronized (this) {\n+                streamId = nextStreamId;\n+                nextStreamId += 2;\n+                stream = new SpdyStream(streamId, this, requestHeaders, flags);\n+                streams.put(streamId, stream);\n+            }\n \n-        spdyWriter.flags = flags;\n-        spdyWriter.id = streamId;\n-        spdyWriter.associatedId = associatedStreamId;\n-        spdyWriter.priority = priority;\n-        spdyWriter.nameValueBlock = requestHeaders;\n-        spdyWriter.synStream();\n+            spdyWriter.flags = flags;\n+            spdyWriter.id = streamId;\n+            spdyWriter.associatedId = associatedStreamId;\n+            spdyWriter.priority = priority;\n+            spdyWriter.nameValueBlock = requestHeaders;\n+            spdyWriter.synStream();\n+        }\n \n-        return result;\n+        return stream;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[public, synchronized]",
						"newValue": "[public]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Be more careful about synchronization.\n\nSpdyConnection needs to guard its own state separately from\nthe SpdyWriter, which permits slow blocking calls. Split these\ninto multiple independent locks.\n\nAlso use independent right-sized thread pools for reading (exactly\none thread all the time) delayed writing (0 or 1 threads) and\ncallbacks (any number of threads).\n",
					"commitDate": "2012-09-25, 12:29 PM",
					"commitName": "60b3a6dd6240f40c29fffd897c2dac314af49836",
					"commitAuthor": "Jesse Wilson",
					"commitDateOld": "2012-09-24, 10:34 PM",
					"commitNameOld": "2bd54fa72fe72f92212428a024050838c2b62d57",
					"commitAuthorOld": "Jesse Wilson",
					"daysBetweenCommits": 0.58,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,20 +1,26 @@\n-    public synchronized SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n+    public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n             throws IOException {\n-        int streamId = nextStreamId; // TODO\n-        nextStreamId += 2;\n         int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId = 0;  // TODO\n         int priority = 0; // TODO\n+        SpdyStream stream;\n+        int streamId;\n \n-        SpdyStream result = new SpdyStream(streamId, this, requestHeaders, flags);\n-        streams.put(streamId, result);\n+        synchronized (spdyWriter) {\n+            synchronized (this) {\n+                streamId = nextStreamId;\n+                nextStreamId += 2;\n+                stream = new SpdyStream(streamId, this, requestHeaders, flags);\n+                streams.put(streamId, stream);\n+            }\n \n-        spdyWriter.flags = flags;\n-        spdyWriter.id = streamId;\n-        spdyWriter.associatedId = associatedStreamId;\n-        spdyWriter.priority = priority;\n-        spdyWriter.nameValueBlock = requestHeaders;\n-        spdyWriter.synStream();\n+            spdyWriter.flags = flags;\n+            spdyWriter.id = streamId;\n+            spdyWriter.associatedId = associatedStreamId;\n+            spdyWriter.priority = priority;\n+            spdyWriter.nameValueBlock = requestHeaders;\n+            spdyWriter.synStream();\n+        }\n \n-        return result;\n+        return stream;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"2bd54fa72fe72f92212428a024050838c2b62d57": {
			"type": "Ybodychange",
			"commitMessage": "Implement TYPE_PING.\n\nThough it isn't particularly useful in practice, it's\ngoing to be extremely handy for testing since it makes\na happens-before relationship very easy to create.\n",
			"commitDate": "2012-09-24, 10:34 PM",
			"commitName": "2bd54fa72fe72f92212428a024050838c2b62d57",
			"commitAuthor": "Jesse Wilson",
			"commitDateOld": "2012-09-21, 3:28 PM",
			"commitNameOld": "7a7ad1cdb22ed381c468ee38d757da03b4b1877a",
			"commitAuthorOld": "Jesse Wilson",
			"daysBetweenCommits": 3.3,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,20 +1,20 @@\n     public synchronized SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int streamId = nextStreamId; // TODO\n         nextStreamId += 2;\n         int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId = 0;  // TODO\n         int priority = 0; // TODO\n \n         SpdyStream result = new SpdyStream(streamId, this, requestHeaders, flags);\n         streams.put(streamId, result);\n \n         spdyWriter.flags = flags;\n-        spdyWriter.streamId = streamId;\n-        spdyWriter.associatedStreamId = associatedStreamId;\n+        spdyWriter.id = streamId;\n+        spdyWriter.associatedId = associatedStreamId;\n         spdyWriter.priority = priority;\n         spdyWriter.nameValueBlock = requestHeaders;\n         spdyWriter.synStream();\n \n         return result;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ea63463c2ff8a67f63e541036f0d5998b5bb1f3e": {
			"type": "Yintroduced",
			"commitMessage": "Initial import.\n\nThis is a fork of okhttp from http://code.google.com/p/okhttp.\nI'm moving it to Github since that's where my code reviewers\nare. I've renamed the core package from com.google.okhttp to\ncom.squareup.okhttp because Square is where I expect ongoing\ndevelopment of this project to take place.\n\nAll code in this project is subject to be contributed upstream\nto AOSP. In particular, all code in the libcore package is\nderived from AOSP and intended to be contributed back to AOSP\non an ongoing basis.\n",
			"commitDate": "2012-07-23, 8:02 AM",
			"commitName": "ea63463c2ff8a67f63e541036f0d5998b5bb1f3e",
			"commitAuthor": "Jesse Wilson"
		}
	},
	"sha": "5224f3045ba9b171fce521777edf389f9206173c"
}