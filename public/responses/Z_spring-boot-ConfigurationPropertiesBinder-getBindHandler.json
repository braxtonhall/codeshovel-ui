{
	"repo": "https://github.com/spring-projects/spring-boot.git",
	"file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java",
	"method": {
		"longName": "ConfigurationPropertiesBinder::getBindHandler(ConfigurationProperties annotation, List<Validator> validators)",
		"startLine": 115,
		"methodName": "getBindHandler",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "private"
	},
	"history": {
		"26811b89746debffe33c27e7f78a139e1a4a0106": {
			"type": "Ybodychange",
			"commitMessage": "Ignore top-level ConfigurationProperty binding failures\n\nFixes gh-12357\n",
			"commitDate": "2018-03-09, 11:36 AM",
			"commitName": "26811b89746debffe33c27e7f78a139e1a4a0106",
			"commitAuthor": "Madhura Bhave",
			"commitDateOld": "2018-02-22, 10:11 PM",
			"commitNameOld": "4b9c3c137e39806e0459552e8474fd8a5bb59a9a",
			"commitAuthorOld": "Phillip Webb",
			"daysBetweenCommits": 14.56,
			"commitsBetweenForRepo": 192,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,16 +1,16 @@\n \tprivate BindHandler getBindHandler(ConfigurationProperties annotation,\n \t\t\tList<Validator> validators) {\n-\t\tBindHandler handler = BindHandler.DEFAULT;\n+\t\tBindHandler handler = new IgnoreTopLevelConverterNotFoundBindHandler();\n \t\tif (annotation.ignoreInvalidFields()) {\n \t\t\thandler = new IgnoreErrorsBindHandler(handler);\n \t\t}\n \t\tif (!annotation.ignoreUnknownFields()) {\n \t\t\tUnboundElementsSourceFilter filter = new UnboundElementsSourceFilter();\n \t\t\thandler = new NoUnboundElementsBindHandler(handler, filter);\n \t\t}\n \t\tif (!validators.isEmpty()) {\n \t\t\thandler = new ValidationBindHandler(handler,\n \t\t\t\t\tvalidators.toArray(new Validator[0]));\n \t\t}\n \t\treturn handler;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"4b9c3c137e39806e0459552e8474fd8a5bb59a9a": {
			"type": "Ybodychange",
			"commitMessage": "Polish Collection.toArray\n\nConsistently use `StringUtils.toStringArray`, `ClassUtils.toClassArray`\nor zero length when converting collections to arrays.\n\nFixes gh-12160\n",
			"commitDate": "2018-02-22, 10:11 PM",
			"commitName": "4b9c3c137e39806e0459552e8474fd8a5bb59a9a",
			"commitAuthor": "Phillip Webb",
			"commitDateOld": "2018-02-19, 9:25 PM",
			"commitNameOld": "20109e27be24da74e884c14a03afc8f9561e4196",
			"commitAuthorOld": "Phillip Webb",
			"daysBetweenCommits": 3.03,
			"commitsBetweenForRepo": 62,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,16 +1,16 @@\n \tprivate BindHandler getBindHandler(ConfigurationProperties annotation,\n \t\t\tList<Validator> validators) {\n \t\tBindHandler handler = BindHandler.DEFAULT;\n \t\tif (annotation.ignoreInvalidFields()) {\n \t\t\thandler = new IgnoreErrorsBindHandler(handler);\n \t\t}\n \t\tif (!annotation.ignoreUnknownFields()) {\n \t\t\tUnboundElementsSourceFilter filter = new UnboundElementsSourceFilter();\n \t\t\thandler = new NoUnboundElementsBindHandler(handler, filter);\n \t\t}\n \t\tif (!validators.isEmpty()) {\n \t\t\thandler = new ValidationBindHandler(handler,\n-\t\t\t\t\tvalidators.toArray(new Validator[validators.size()]));\n+\t\t\t\t\tvalidators.toArray(new Validator[0]));\n \t\t}\n \t\treturn handler;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"1d83e87bcdcd0a70680ac834900ddd3821cc65b9": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Validate @ConfigurationProperties on @Bean methods\n\nRefactor `ConfigurationPropertiesBindingPostProcessor` to allow JSR-303\nvalidation on `@ConfigurationProperties` defined at the `@Bean` method\nlevel.\n\nJSR-303 validation is now applied when a JSR-303 implementation is\navailable and `@Validated` is present on either the configuration\nproperties class itself or the `@Bean` method that creates it.\n\nStandard Spring validation is also supported using a validator bean\nnamed `configurationPropertiesValidator`, or by having the configuration\nproperties implement `Validator`.\n\nThe commit also consolidates tests into a single location.\n\nFixes gh-10803\n",
			"commitDate": "2018-02-16, 7:11 PM",
			"commitName": "1d83e87bcdcd0a70680ac834900ddd3821cc65b9",
			"commitAuthor": "Phillip Webb",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Validate @ConfigurationProperties on @Bean methods\n\nRefactor `ConfigurationPropertiesBindingPostProcessor` to allow JSR-303\nvalidation on `@ConfigurationProperties` defined at the `@Bean` method\nlevel.\n\nJSR-303 validation is now applied when a JSR-303 implementation is\navailable and `@Validated` is present on either the configuration\nproperties class itself or the `@Bean` method that creates it.\n\nStandard Spring validation is also supported using a validator bean\nnamed `configurationPropertiesValidator`, or by having the configuration\nproperties implement `Validator`.\n\nThe commit also consolidates tests into a single location.\n\nFixes gh-10803\n",
					"commitDate": "2018-02-16, 7:11 PM",
					"commitName": "1d83e87bcdcd0a70680ac834900ddd3821cc65b9",
					"commitAuthor": "Phillip Webb",
					"commitDateOld": "2018-02-08, 3:53 AM",
					"commitNameOld": "76a450dfba1b79a511eed0ea426a911207e9d3a2",
					"commitAuthorOld": "Andy Wilkinson",
					"daysBetweenCommits": 8.64,
					"commitsBetweenForRepo": 162,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,15 +1,16 @@\n \tprivate BindHandler getBindHandler(ConfigurationProperties annotation,\n-\t\t\tValidator validator) {\n+\t\t\tList<Validator> validators) {\n \t\tBindHandler handler = BindHandler.DEFAULT;\n \t\tif (annotation.ignoreInvalidFields()) {\n \t\t\thandler = new IgnoreErrorsBindHandler(handler);\n \t\t}\n \t\tif (!annotation.ignoreUnknownFields()) {\n \t\t\tUnboundElementsSourceFilter filter = new UnboundElementsSourceFilter();\n \t\t\thandler = new NoUnboundElementsBindHandler(handler, filter);\n \t\t}\n-\t\tif (validator != null) {\n-\t\t\thandler = new ValidationBindHandler(handler, validator);\n+\t\tif (!validators.isEmpty()) {\n+\t\t\thandler = new ValidationBindHandler(handler,\n+\t\t\t\t\tvalidators.toArray(new Validator[validators.size()]));\n \t\t}\n \t\treturn handler;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[annotation-ConfigurationProperties, validator-Validator]",
						"newValue": "[annotation-ConfigurationProperties, validators-List<Validator>]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Validate @ConfigurationProperties on @Bean methods\n\nRefactor `ConfigurationPropertiesBindingPostProcessor` to allow JSR-303\nvalidation on `@ConfigurationProperties` defined at the `@Bean` method\nlevel.\n\nJSR-303 validation is now applied when a JSR-303 implementation is\navailable and `@Validated` is present on either the configuration\nproperties class itself or the `@Bean` method that creates it.\n\nStandard Spring validation is also supported using a validator bean\nnamed `configurationPropertiesValidator`, or by having the configuration\nproperties implement `Validator`.\n\nThe commit also consolidates tests into a single location.\n\nFixes gh-10803\n",
					"commitDate": "2018-02-16, 7:11 PM",
					"commitName": "1d83e87bcdcd0a70680ac834900ddd3821cc65b9",
					"commitAuthor": "Phillip Webb",
					"commitDateOld": "2018-02-08, 3:53 AM",
					"commitNameOld": "76a450dfba1b79a511eed0ea426a911207e9d3a2",
					"commitAuthorOld": "Andy Wilkinson",
					"daysBetweenCommits": 8.64,
					"commitsBetweenForRepo": 162,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,15 +1,16 @@\n \tprivate BindHandler getBindHandler(ConfigurationProperties annotation,\n-\t\t\tValidator validator) {\n+\t\t\tList<Validator> validators) {\n \t\tBindHandler handler = BindHandler.DEFAULT;\n \t\tif (annotation.ignoreInvalidFields()) {\n \t\t\thandler = new IgnoreErrorsBindHandler(handler);\n \t\t}\n \t\tif (!annotation.ignoreUnknownFields()) {\n \t\t\tUnboundElementsSourceFilter filter = new UnboundElementsSourceFilter();\n \t\t\thandler = new NoUnboundElementsBindHandler(handler, filter);\n \t\t}\n-\t\tif (validator != null) {\n-\t\t\thandler = new ValidationBindHandler(handler, validator);\n+\t\tif (!validators.isEmpty()) {\n+\t\t\thandler = new ValidationBindHandler(handler,\n+\t\t\t\t\tvalidators.toArray(new Validator[validators.size()]));\n \t\t}\n \t\treturn handler;\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"0ba4830b4fb20deea040ca5e1c9a34651708b222": {
			"type": "Yfilerename",
			"commitMessage": "Relocate projects to spring-boot-project\n\nMove projects to better reflect the way that Spring Boot is released.\n\nThe following projects are under `spring-boot-project`:\n\n  - `spring-boot`\n  - `spring-boot-autoconfigure`\n  - `spring-boot-tools`\n  - `spring-boot-starters`\n  - `spring-boot-actuator`\n  - `spring-boot-actuator-autoconfigure`\n  - `spring-boot-test`\n  - `spring-boot-test-autoconfigure`\n  - `spring-boot-devtools`\n  - `spring-boot-cli`\n  - `spring-boot-docs`\n\nSee gh-9316\n",
			"commitDate": "2017-10-04, 5:34 PM",
			"commitName": "0ba4830b4fb20deea040ca5e1c9a34651708b222",
			"commitAuthor": "Phillip Webb",
			"commitDateOld": "2017-10-04, 5:04 PM",
			"commitNameOld": "0419d42b7ca37611955bc0211359c215e5477fa4",
			"commitAuthorOld": "Phillip Webb",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java",
				"newPath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java"
			}
		},
		"67fc5ca4335d5692707a25d22fc0045d9237bccf": {
			"type": "Ymovefromfile",
			"commitMessage": "Create a public API to bind a ConfigurationProperties object\n\nPreviously, the API used to bind a ConfigurationProperties annotated\nobject was private to the BeanPostProcessor implementation.\n\nThis commit moves most of the logic to ConfigurationPropertiesBinder. As\nwe want this object to have the same state regardless of how it is built,\na builder is now provided that detects the components that the binder\nneeds if not specified explicitly.\n\nCloses gh-8344\n",
			"commitDate": "2017-09-05, 12:51 AM",
			"commitName": "67fc5ca4335d5692707a25d22fc0045d9237bccf",
			"commitAuthor": "Stephane Nicoll",
			"commitDateOld": "2017-09-04, 7:40 AM",
			"commitNameOld": "9242def4c0753278599614d22e07c076f5e246ec",
			"commitAuthorOld": "Andy Wilkinson",
			"daysBetweenCommits": 0.72,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java",
				"newPath": "spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java",
				"oldMethodName": "getBindHandler",
				"newMethodName": "getBindHandler"
			}
		},
		"00430ac2161e3d9e7ee9546e87d74e2bd85f2f85": {
			"type": "Ybodychange",
			"commitMessage": "Ignore unbound env variables and system props\n\nCloses gh-3832\n",
			"commitDate": "2017-07-17, 4:09 PM",
			"commitName": "00430ac2161e3d9e7ee9546e87d74e2bd85f2f85",
			"commitAuthor": "Madhura Bhave",
			"commitDateOld": "2017-07-06, 7:38 PM",
			"commitNameOld": "eb17aa06f9e542f5d8fdfdb5423adcd16e5efb57",
			"commitAuthorOld": "",
			"daysBetweenCommits": 10.85,
			"commitsBetweenForRepo": 44,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,14 +1,15 @@\n \tprivate BindHandler getBindHandler(ConfigurationProperties annotation,\n \t\t\tValidator validator) {\n \t\tBindHandler handler = BindHandler.DEFAULT;\n \t\tif (annotation.ignoreInvalidFields()) {\n \t\t\thandler = new IgnoreErrorsBindHandler(handler);\n \t\t}\n \t\tif (!annotation.ignoreUnknownFields()) {\n-\t\t\thandler = new NoUnboundElementsBindHandler(handler);\n+\t\t\tUnboundElementsSourceFilter filter = new UnboundElementsSourceFilter();\n+\t\t\thandler = new NoUnboundElementsBindHandler(handler, filter);\n \t\t}\n \t\tif (validator != null) {\n \t\t\thandler = new ValidationBindHandler(handler, validator);\n \t\t}\n \t\treturn handler;\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		}
	},
	"sha": "5cfe8dbee950dbf3a8de3ece2f6f3363f13d904a"
}