{
	"repo": "https://github.com/apache/commons-io.git",
	"file": "src/main/java/org/apache/commons/io/FilenameUtils.java",
	"method": {
		"longName": "public boolean wildcardMatch(String fileName, String wildcardMatcher, IOCase caseSensitivity);",
		"startLine": 1374,
		"methodName": "wildcardMatch",
		"isStatic": true,
		"isAbstract": false,
		"visibility": "public"
	},
	"history": {
		"e4e03ef4c091f5a35da0d97a6a35224197b8be02": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Fix param names 'filename' -> 'fileName' in code and Javadocs.",
			"commitDate": "2018-03-08, 7:50 AM",
			"commitName": "e4e03ef4c091f5a35da0d97a6a35224197b8be02",
			"commitAuthor": "Gary Gregory",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Fix param names 'filename' -> 'fileName' in code and Javadocs.",
					"commitDate": "2018-03-08, 7:50 AM",
					"commitName": "e4e03ef4c091f5a35da0d97a6a35224197b8be02",
					"commitAuthor": "Gary Gregory",
					"commitDateOld": "2018-03-08, 7:32 AM",
					"commitNameOld": "90b2e46494eea8461523c55fd9cf3fe3d1bf00ce",
					"commitAuthorOld": "Gary Gregory",
					"daysBetweenCommits": 0.01,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,81 +1,81 @@\n-    public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n-        if (filename == null && wildcardMatcher == null) {\n+    public static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {\n+        if (fileName == null && wildcardMatcher == null) {\n             return true;\n         }\n-        if (filename == null || wildcardMatcher == null) {\n+        if (fileName == null || wildcardMatcher == null) {\n             return false;\n         }\n         if (caseSensitivity == null) {\n             caseSensitivity = IOCase.SENSITIVE;\n         }\n         final String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n         final Stack<int[]> backtrack = new Stack<>();\n \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 final int[] array = backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n-                    if (textIdx > filename.length()) {\n+                    if (textIdx > fileName.length()) {\n                         break;\n                     }\n                     anyChars = false;\n \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n-                        textIdx = filename.length();\n+                        textIdx = fileName.length();\n                     }\n \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n-                        textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n+                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);\n                         if (textIdx == NOT_FOUND) {\n                             // token not found\n                             break;\n                         }\n-                        final int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n+                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n+                        if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n \n                 wcsIdx++;\n             }\n \n             // full match\n-            if (wcsIdx == wcs.length && textIdx == filename.length()) {\n+            if (wcsIdx == wcs.length && textIdx == fileName.length()) {\n                 return true;\n             }\n \n         } while (backtrack.size() > 0);\n \n         return false;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[filename-String(modifiers-final), wildcardMatcher-String(modifiers-final), caseSensitivity-IOCase]",
						"newValue": "[fileName-String(modifiers-final), wildcardMatcher-String(modifiers-final), caseSensitivity-IOCase]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Fix param names 'filename' -> 'fileName' in code and Javadocs.",
					"commitDate": "2018-03-08, 7:50 AM",
					"commitName": "e4e03ef4c091f5a35da0d97a6a35224197b8be02",
					"commitAuthor": "Gary Gregory",
					"commitDateOld": "2018-03-08, 7:32 AM",
					"commitNameOld": "90b2e46494eea8461523c55fd9cf3fe3d1bf00ce",
					"commitAuthorOld": "Gary Gregory",
					"daysBetweenCommits": 0.01,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,81 +1,81 @@\n-    public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n-        if (filename == null && wildcardMatcher == null) {\n+    public static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {\n+        if (fileName == null && wildcardMatcher == null) {\n             return true;\n         }\n-        if (filename == null || wildcardMatcher == null) {\n+        if (fileName == null || wildcardMatcher == null) {\n             return false;\n         }\n         if (caseSensitivity == null) {\n             caseSensitivity = IOCase.SENSITIVE;\n         }\n         final String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n         final Stack<int[]> backtrack = new Stack<>();\n \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 final int[] array = backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n-                    if (textIdx > filename.length()) {\n+                    if (textIdx > fileName.length()) {\n                         break;\n                     }\n                     anyChars = false;\n \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n-                        textIdx = filename.length();\n+                        textIdx = fileName.length();\n                     }\n \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n-                        textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n+                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);\n                         if (textIdx == NOT_FOUND) {\n                             // token not found\n                             break;\n                         }\n-                        final int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n+                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n+                        if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n \n                 wcsIdx++;\n             }\n \n             // full match\n-            if (wcsIdx == wcs.length && textIdx == filename.length()) {\n+            if (wcsIdx == wcs.length && textIdx == fileName.length()) {\n                 return true;\n             }\n \n         } while (backtrack.size() > 0);\n \n         return false;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"51f13c846dae950e1d27693c9e23c1063945210f": {
			"type": "Ybodychange",
			"commitMessage": "Updated for Java7 features\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1746593 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2016-06-02, 8:36 AM",
			"commitName": "51f13c846dae950e1d27693c9e23c1063945210f",
			"commitAuthor": "Kristian Rosenvold",
			"commitDateOld": "2015-09-09, 11:35 PM",
			"commitNameOld": "5d072ef89fbc2532f621a5a0b4d6791cb926a997",
			"commitAuthorOld": "Kristian Rosenvold",
			"daysBetweenCommits": 266.38,
			"commitsBetweenForRepo": 103,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,81 +1,81 @@\n     public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n         if (caseSensitivity == null) {\n             caseSensitivity = IOCase.SENSITIVE;\n         }\n         final String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n-        final Stack<int[]> backtrack = new Stack<int[]>();\n+        final Stack<int[]> backtrack = new Stack<>();\n \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 final int[] array = backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     if (textIdx > filename.length()) {\n                         break;\n                     }\n                     anyChars = false;\n \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                         if (textIdx == NOT_FOUND) {\n                             // token not found\n                             break;\n                         }\n                         final int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n \n                 wcsIdx++;\n             }\n \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n \n         } while (backtrack.size() > 0);\n \n         return false;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"63eba2740e08ede085c78b131bc1a9c3f1d5ddb1": {
			"type": "Ybodychange",
			"commitMessage": "Refactor magic number into constant.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1586309 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2014-04-10, 7:08 AM",
			"commitName": "63eba2740e08ede085c78b131bc1a9c3f1d5ddb1",
			"commitAuthor": "Gary D. Gregory",
			"commitDateOld": "2014-04-10, 6:58 AM",
			"commitNameOld": "c4a7e644a5fc43210fa0a563e9087347e3eef67d",
			"commitAuthorOld": "Gary D. Gregory",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,81 +1,81 @@\n     public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n         if (caseSensitivity == null) {\n             caseSensitivity = IOCase.SENSITIVE;\n         }\n         final String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n         final Stack<int[]> backtrack = new Stack<int[]>();\n \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 final int[] array = backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     if (textIdx > filename.length()) {\n                         break;\n                     }\n                     anyChars = false;\n \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n-                        if (textIdx == -1) {\n+                        if (textIdx == NOT_FOUND) {\n                             // token not found\n                             break;\n                         }\n                         final int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n \n                 wcsIdx++;\n             }\n \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n \n         } while (backtrack.size() > 0);\n \n         return false;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"6aa00766b9103d75c763160280429af8e1f0549e": {
			"type": "Ymultichange(Ybodychange,Yparametermetachange)",
			"commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2012-11-30, 12:51 PM",
			"commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
			"commitAuthor": "Gary D. Gregory",
			"subchanges": [
				{
					"type": "Ybodychange",
					"commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2012-11-30, 12:51 PM",
					"commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
					"commitAuthor": "Gary D. Gregory",
					"commitDateOld": "2012-03-30, 8:13 AM",
					"commitNameOld": "3ef56378e33ed5ccc296806e4ad6b8c463e5979f",
					"commitAuthorOld": "Gary D. Gregory",
					"daysBetweenCommits": 245.24,
					"commitsBetweenForRepo": 143,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,81 +1,81 @@\n-    public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n+    public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n         if (caseSensitivity == null) {\n             caseSensitivity = IOCase.SENSITIVE;\n         }\n-        String[] wcs = splitOnTokens(wildcardMatcher);\n+        final String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n-        Stack<int[]> backtrack = new Stack<int[]>();\n+        final Stack<int[]> backtrack = new Stack<int[]>();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n-                int[] array = backtrack.pop();\n+                final int[] array = backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     if (textIdx > filename.length()) {\n                         break;\n                     }\n                     anyChars = false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                         if (textIdx == -1) {\n                             // token not found\n                             break;\n                         }\n-                        int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n+                        final int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() > 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				},
				{
					"type": "Yparametermetachange",
					"commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2012-11-30, 12:51 PM",
					"commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
					"commitAuthor": "Gary D. Gregory",
					"commitDateOld": "2012-03-30, 8:13 AM",
					"commitNameOld": "3ef56378e33ed5ccc296806e4ad6b8c463e5979f",
					"commitAuthorOld": "Gary D. Gregory",
					"daysBetweenCommits": 245.24,
					"commitsBetweenForRepo": 143,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,81 +1,81 @@\n-    public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n+    public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n         if (caseSensitivity == null) {\n             caseSensitivity = IOCase.SENSITIVE;\n         }\n-        String[] wcs = splitOnTokens(wildcardMatcher);\n+        final String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n-        Stack<int[]> backtrack = new Stack<int[]>();\n+        final Stack<int[]> backtrack = new Stack<int[]>();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n-                int[] array = backtrack.pop();\n+                final int[] array = backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     if (textIdx > filename.length()) {\n                         break;\n                     }\n                     anyChars = false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                         if (textIdx == -1) {\n                             // token not found\n                             break;\n                         }\n-                        int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n+                        final int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() > 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[filename-String, wildcardMatcher-String, caseSensitivity-IOCase]",
						"newValue": "[filename-String(modifiers-final), wildcardMatcher-String(modifiers-final), caseSensitivity-IOCase]"
					}
				}
			]
		},
		"83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": {
			"type": "Yfilerename",
			"commitMessage": "Build changes - re-organize to standard m2 layout, remove useless JIRA report and fix some Ant issues\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004358 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2010-10-04, 11:54 AM",
			"commitName": "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
			"commitAuthor": "Niall Pemberton",
			"commitDateOld": "2010-10-04, 10:54 AM",
			"commitNameOld": "19f48eb1711427a43a5e10c84bbbf1218a08bdd2",
			"commitAuthorOld": "Niall Pemberton",
			"daysBetweenCommits": 0.04,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/java/org/apache/commons/io/FilenameUtils.java",
				"newPath": "src/main/java/org/apache/commons/io/FilenameUtils.java"
			}
		},
		"d062bd01f7e9e9194ae0fd9dc01683e7c934c315": {
			"type": "Ybodychange",
			"commitMessage": "IO-246 FilenameUtils - wildcardMatch gives incorrect results - thanks to wa\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1002582 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2010-09-29, 4:28 AM",
			"commitName": "d062bd01f7e9e9194ae0fd9dc01683e7c934c315",
			"commitAuthor": "Niall Pemberton",
			"commitDateOld": "2009-01-22, 6:02 PM",
			"commitNameOld": "d4c5044c7b7697d944a444470a296dcd15911595",
			"commitAuthorOld": "Niall Pemberton",
			"daysBetweenCommits": 614.39,
			"commitsBetweenForRepo": 120,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,78 +1,81 @@\n     public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n         if (caseSensitivity == null) {\n             caseSensitivity = IOCase.SENSITIVE;\n         }\n         String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n         Stack<int[]> backtrack = new Stack<int[]>();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 int[] array = backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n+                    if (textIdx > filename.length()) {\n+                        break;\n+                    }\n                     anyChars = false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                         if (textIdx == -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() > 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"5c13fa7579650c2cbcab61c6b18e509951f640aa": {
			"type": "Ybodychange",
			"commitMessage": "IO-167 Fix case-insensitive string handling - thanks to Benjamin Bentmann\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@661822 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2008-05-30, 12:12 PM",
			"commitName": "5c13fa7579650c2cbcab61c6b18e509951f640aa",
			"commitAuthor": "Niall Pemberton",
			"commitDateOld": "2008-03-06, 4:16 PM",
			"commitNameOld": "ce0e40253805516e781e4acac9001428fc01ecfd",
			"commitAuthorOld": "Niall Pemberton",
			"daysBetweenCommits": 84.79,
			"commitsBetweenForRepo": 23,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,80 +1,78 @@\n     public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n         if (caseSensitivity == null) {\n             caseSensitivity = IOCase.SENSITIVE;\n         }\n-        filename = caseSensitivity.convertCase(filename);\n-        wildcardMatcher = caseSensitivity.convertCase(wildcardMatcher);\n         String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n         Stack<int[]> backtrack = new Stack<int[]>();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 int[] array = backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars = false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n-                        textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n+                        textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                         if (textIdx == -1) {\n                             // token not found\n                             break;\n                         }\n-                        int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n+                        int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n+                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() > 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10": {
			"type": "Ybodychange",
			"commitMessage": "IO-140 JDK 1.5 changes: Use generics\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@619103 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2008-02-06, 11:01 AM",
			"commitName": "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10",
			"commitAuthor": "Niall Pemberton",
			"commitDateOld": "2008-01-07, 8:46 PM",
			"commitNameOld": "14978fec52d916b2e371044c714191013d3bb02c",
			"commitAuthorOld": "Niall Pemberton",
			"daysBetweenCommits": 29.59,
			"commitsBetweenForRepo": 37,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,80 +1,80 @@\n     public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n         if (caseSensitivity == null) {\n             caseSensitivity = IOCase.SENSITIVE;\n         }\n         filename = caseSensitivity.convertCase(filename);\n         wildcardMatcher = caseSensitivity.convertCase(wildcardMatcher);\n         String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n-        Stack backtrack = new Stack();\n+        Stack<int[]> backtrack = new Stack<int[]>();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n-                int[] array = (int[]) backtrack.pop();\n+                int[] array = backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars = false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx == -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() > 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"eff391033a01a092d943db90513412b08bb01525": {
			"type": "Ybodychange",
			"commitMessage": "Test and fix case sensitive wildcard filter\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@418641 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2006-07-02, 12:42 PM",
			"commitName": "eff391033a01a092d943db90513412b08bb01525",
			"commitAuthor": "Stephen Colebourne",
			"commitDateOld": "2006-06-25, 4:19 PM",
			"commitNameOld": "07751ea95c575cb95a310a23a78dc8cbe85b27a9",
			"commitAuthorOld": "Stephen Colebourne",
			"daysBetweenCommits": 6.85,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,78 +1,80 @@\n     public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n         if (caseSensitivity == null) {\n             caseSensitivity = IOCase.SENSITIVE;\n         }\n+        filename = caseSensitivity.convertCase(filename);\n+        wildcardMatcher = caseSensitivity.convertCase(wildcardMatcher);\n         String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n         Stack backtrack = new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 int[] array = (int[]) backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars = false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx == -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n+                        if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() > 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"07751ea95c575cb95a310a23a78dc8cbe85b27a9": {
			"type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
			"commitMessage": "Add methods to use IOCase case-sensitivity\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@417091 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2006-06-25, 4:19 PM",
			"commitName": "07751ea95c575cb95a310a23a78dc8cbe85b27a9",
			"commitAuthor": "Stephen Colebourne",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Add methods to use IOCase case-sensitivity\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@417091 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2006-06-25, 4:19 PM",
					"commitName": "07751ea95c575cb95a310a23a78dc8cbe85b27a9",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2006-06-25, 3:40 PM",
					"commitNameOld": "49ca3a4241c1847e08921ead7b582419fa53537c",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 0.03,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,79 +1,78 @@\n-    private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n+    public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n-        if (system && isSystemWindows()) {\n-            filename = filename.toLowerCase();\n-            wildcardMatcher = wildcardMatcher.toLowerCase();\n+        if (caseSensitivity == null) {\n+            caseSensitivity = IOCase.SENSITIVE;\n         }\n         String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n         Stack backtrack = new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 int[] array = (int[]) backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars = false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx == -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n+                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() > 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[filename-String, wildcardMatcher-String, system-boolean]",
						"newValue": "[filename-String, wildcardMatcher-String, caseSensitivity-IOCase]"
					}
				},
				{
					"type": "Ymodifierchange",
					"commitMessage": "Add methods to use IOCase case-sensitivity\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@417091 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2006-06-25, 4:19 PM",
					"commitName": "07751ea95c575cb95a310a23a78dc8cbe85b27a9",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2006-06-25, 3:40 PM",
					"commitNameOld": "49ca3a4241c1847e08921ead7b582419fa53537c",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 0.03,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,79 +1,78 @@\n-    private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n+    public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n-        if (system && isSystemWindows()) {\n-            filename = filename.toLowerCase();\n-            wildcardMatcher = wildcardMatcher.toLowerCase();\n+        if (caseSensitivity == null) {\n+            caseSensitivity = IOCase.SENSITIVE;\n         }\n         String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n         Stack backtrack = new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 int[] array = (int[]) backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars = false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx == -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n+                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() > 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[private, static]",
						"newValue": "[public, static]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Add methods to use IOCase case-sensitivity\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@417091 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2006-06-25, 4:19 PM",
					"commitName": "07751ea95c575cb95a310a23a78dc8cbe85b27a9",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2006-06-25, 3:40 PM",
					"commitNameOld": "49ca3a4241c1847e08921ead7b582419fa53537c",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 0.03,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,79 +1,78 @@\n-    private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n+    public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n-        if (system && isSystemWindows()) {\n-            filename = filename.toLowerCase();\n-            wildcardMatcher = wildcardMatcher.toLowerCase();\n+        if (caseSensitivity == null) {\n+            caseSensitivity = IOCase.SENSITIVE;\n         }\n         String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n         Stack backtrack = new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 int[] array = (int[]) backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars = false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx == -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n-                        if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n+                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() > 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"49ca3a4241c1847e08921ead7b582419fa53537c": {
			"type": "Ybodychange",
			"commitMessage": "Refactor windows identification to a method\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@417086 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2006-06-25, 3:40 PM",
			"commitName": "49ca3a4241c1847e08921ead7b582419fa53537c",
			"commitAuthor": "Stephen Colebourne",
			"commitDateOld": "2005-09-18, 4:12 PM",
			"commitNameOld": "990ea5d016b6ebc1961be059ba9aab0f5079683b",
			"commitAuthorOld": "Stephen Colebourne",
			"daysBetweenCommits": 279.98,
			"commitsBetweenForRepo": 109,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,79 +1,79 @@\n     private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n-        if (system && (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR)) {\n+        if (system && isSystemWindows()) {\n             filename = filename.toLowerCase();\n             wildcardMatcher = wildcardMatcher.toLowerCase();\n         }\n         String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n         Stack backtrack = new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 int[] array = (int[]) backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars = false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx == -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() > 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"745375d22e427574f1ef1301c8378cd81e85a1fc": {
			"type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
			"commitMessage": "Make FilenameUtils equals methods case-sensitive, with some optional system case matching\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@160343 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2005-04-06, 4:35 PM",
			"commitName": "745375d22e427574f1ef1301c8378cd81e85a1fc",
			"commitAuthor": "Stephen Colebourne",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Make FilenameUtils equals methods case-sensitive, with some optional system case matching\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@160343 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2005-04-06, 4:35 PM",
					"commitName": "745375d22e427574f1ef1301c8378cd81e85a1fc",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2005-03-04, 5:22 PM",
					"commitNameOld": "1ead1cc51d537700eb72e3fa991e1d68162029d5",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 32.93,
					"commitsBetweenForRepo": 4,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,79 +1,79 @@\n-    public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n+    private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n-        if (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR) {\n+        if (system && (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR)) {\n             filename = filename.toLowerCase();\n             wildcardMatcher = wildcardMatcher.toLowerCase();\n         }\n         String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n         Stack backtrack = new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 int[] array = (int[]) backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars = false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx == -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() > 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[filename-String, wildcardMatcher-String]",
						"newValue": "[filename-String, wildcardMatcher-String, system-boolean]"
					}
				},
				{
					"type": "Ymodifierchange",
					"commitMessage": "Make FilenameUtils equals methods case-sensitive, with some optional system case matching\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@160343 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2005-04-06, 4:35 PM",
					"commitName": "745375d22e427574f1ef1301c8378cd81e85a1fc",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2005-03-04, 5:22 PM",
					"commitNameOld": "1ead1cc51d537700eb72e3fa991e1d68162029d5",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 32.93,
					"commitsBetweenForRepo": 4,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,79 +1,79 @@\n-    public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n+    private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n-        if (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR) {\n+        if (system && (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR)) {\n             filename = filename.toLowerCase();\n             wildcardMatcher = wildcardMatcher.toLowerCase();\n         }\n         String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n         Stack backtrack = new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 int[] array = (int[]) backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars = false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx == -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() > 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[public, static]",
						"newValue": "[private, static]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Make FilenameUtils equals methods case-sensitive, with some optional system case matching\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@160343 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2005-04-06, 4:35 PM",
					"commitName": "745375d22e427574f1ef1301c8378cd81e85a1fc",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2005-03-04, 5:22 PM",
					"commitNameOld": "1ead1cc51d537700eb72e3fa991e1d68162029d5",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 32.93,
					"commitsBetweenForRepo": 4,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,79 +1,79 @@\n-    public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n+    private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n-        if (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR) {\n+        if (system && (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR)) {\n             filename = filename.toLowerCase();\n             wildcardMatcher = wildcardMatcher.toLowerCase();\n         }\n         String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n         Stack backtrack = new Stack();\n         \n         // loop around a backtrack stack, to handle complex * matching\n         do {\n             if (backtrack.size() > 0) {\n                 int[] array = (int[]) backtrack.pop();\n                 wcsIdx = array[0];\n                 textIdx = array[1];\n                 anyChars = true;\n             }\n             \n             // loop whilst tokens and text left to process\n             while (wcsIdx < wcs.length) {\n       \n                 if (wcs[wcsIdx].equals(\"?\")) {\n                     // ? so move to next text char\n                     textIdx++;\n                     anyChars = false;\n                     \n                 } else if (wcs[wcsIdx].equals(\"*\")) {\n                     // set any chars status\n                     anyChars = true;\n                     if (wcsIdx == wcs.length - 1) {\n                         textIdx = filename.length();\n                     }\n                     \n                 } else {\n                     // matching text token\n                     if (anyChars) {\n                         // any chars then try to locate text token\n                         textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                         if (textIdx == -1) {\n                             // token not found\n                             break;\n                         }\n                         int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                         if (repeat >= 0) {\n                             backtrack.push(new int[] {wcsIdx, repeat});\n                         }\n                     } else {\n                         // matching from current position\n                         if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                             // couldnt match token\n                             break;\n                         }\n                     }\n       \n                     // matched text token, move text index to end of matched token\n                     textIdx += wcs[wcsIdx].length();\n                     anyChars = false;\n                 }\n       \n                 wcsIdx++;\n             }\n             \n             // full match\n             if (wcsIdx == wcs.length && textIdx == filename.length()) {\n                 return true;\n             }\n             \n         } while (backtrack.size() > 0);\n   \n         return false;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"1ead1cc51d537700eb72e3fa991e1d68162029d5": {
			"type": "Ybodychange",
			"commitMessage": "Fix bug in wildcard search for advanced repetitive matches\nbug 33303, from Danival Taffarel Calegari\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@156217 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2005-03-04, 5:22 PM",
			"commitName": "1ead1cc51d537700eb72e3fa991e1d68162029d5",
			"commitAuthor": "Stephen Colebourne",
			"commitDateOld": "2005-02-13, 4:08 AM",
			"commitNameOld": "7a009ea80932204d693c2f80fb89bb43df3907f0",
			"commitAuthorOld": "Jeremias Maerki",
			"daysBetweenCommits": 19.55,
			"commitsBetweenForRepo": 10,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,73 +1,79 @@\n     public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n         if (filename == null && wildcardMatcher == null) {\n             return true;\n         }\n         if (filename == null || wildcardMatcher == null) {\n             return false;\n         }\n         if (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR) {\n             filename = filename.toLowerCase();\n             wildcardMatcher = wildcardMatcher.toLowerCase();\n         }\n         String[] wcs = splitOnTokens(wildcardMatcher);\n         boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n-  \n-        // loop whilst tokens and text left to process\n-        while (wcsIdx < wcs.length && textIdx < filename.length()) {\n-  \n-            if (wcs[wcsIdx].equals(\"?\")) {\n-                // ? so move to next text char\n-                textIdx++;\n-                anyChars = false;\n-                \n-            } else if (wcs[wcsIdx].equals(\"*\")) {\n-                // set any chars status\n+        Stack backtrack = new Stack();\n+        \n+        // loop around a backtrack stack, to handle complex * matching\n+        do {\n+            if (backtrack.size() > 0) {\n+                int[] array = (int[]) backtrack.pop();\n+                wcsIdx = array[0];\n+                textIdx = array[1];\n                 anyChars = true;\n-                \n-            } else {\n-                // matching text token\n-                if (anyChars) {\n-                    // any chars then try to locate text token\n-                    textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n-                    if (textIdx == -1) {\n-                        // token not found\n-                        return false;\n+            }\n+            \n+            // loop whilst tokens and text left to process\n+            while (wcsIdx < wcs.length) {\n+      \n+                if (wcs[wcsIdx].equals(\"?\")) {\n+                    // ? so move to next text char\n+                    textIdx++;\n+                    anyChars = false;\n+                    \n+                } else if (wcs[wcsIdx].equals(\"*\")) {\n+                    // set any chars status\n+                    anyChars = true;\n+                    if (wcsIdx == wcs.length - 1) {\n+                        textIdx = filename.length();\n                     }\n+                    \n                 } else {\n-                    // matching from current position\n-                    if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n-                        // couldnt match token\n-                        return false;\n+                    // matching text token\n+                    if (anyChars) {\n+                        // any chars then try to locate text token\n+                        textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n+                        if (textIdx == -1) {\n+                            // token not found\n+                            break;\n+                        }\n+                        int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n+                        if (repeat >= 0) {\n+                            backtrack.push(new int[] {wcsIdx, repeat});\n+                        }\n+                    } else {\n+                        // matching from current position\n+                        if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n+                            // couldnt match token\n+                            break;\n+                        }\n                     }\n+      \n+                    // matched text token, move text index to end of matched token\n+                    textIdx += wcs[wcsIdx].length();\n+                    anyChars = false;\n                 }\n-  \n-                // matched text token, move text index to end of matched token\n-                textIdx += wcs[wcsIdx].length();\n-                anyChars = false;\n+      \n+                wcsIdx++;\n             }\n-  \n-            wcsIdx++;\n-        }\n-\n-        // didnt match all wildcards\n-        if (wcsIdx < wcs.length) {\n-            // ok if one remaining and wildcard or empty\n-            if (wcsIdx + 1 != wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n-                return false;\n+            \n+            // full match\n+            if (wcsIdx == wcs.length && textIdx == filename.length()) {\n+                return true;\n             }\n-        }\n+            \n+        } while (backtrack.size() > 0);\n   \n-        // ran out of text chars\n-        if (textIdx > filename.length()) {\n-           return false;\n-        }\n-  \n-        // didnt match all text chars, only ok if any chars set\n-        if (textIdx < filename.length() && !anyChars) {\n-            return false;\n-        }\n-  \n-        return true;\n+        return false;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"84b251bf545c9df52c9c750835a86d5af4bf0387": {
			"type": "Ybodychange",
			"commitMessage": "Convert wildcard method to match based on OS case sensitivity\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140647 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2004-12-10, 2:36 PM",
			"commitName": "84b251bf545c9df52c9c750835a86d5af4bf0387",
			"commitAuthor": "Stephen Colebourne",
			"commitDateOld": "2004-12-04, 11:28 AM",
			"commitNameOld": "a09ebfc6c0f84a0aa9a05da04801461d99509ec5",
			"commitAuthorOld": "Stephen Colebourne",
			"daysBetweenCommits": 6.13,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,61 +1,73 @@\n     public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n+        if (filename == null && wildcardMatcher == null) {\n+            return true;\n+        }\n+        if (filename == null || wildcardMatcher == null) {\n+            return false;\n+        }\n+        if (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR) {\n+            filename = filename.toLowerCase();\n+            wildcardMatcher = wildcardMatcher.toLowerCase();\n+        }\n         String[] wcs = splitOnTokens(wildcardMatcher);\n-  \n+        boolean anyChars = false;\n         int textIdx = 0;\n         int wcsIdx = 0;\n-        boolean anyChars = false;\n   \n         // loop whilst tokens and text left to process\n         while (wcsIdx < wcs.length && textIdx < filename.length()) {\n   \n-            // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n+                // ? so move to next text char\n                 textIdx++;\n-            } else if (!wcs[wcsIdx].equals(\"*\")) {\n+                anyChars = false;\n+                \n+            } else if (wcs[wcsIdx].equals(\"*\")) {\n+                // set any chars status\n+                anyChars = true;\n+                \n+            } else {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n                     textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n-  \n                     if (textIdx == -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n                     if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx += wcs[wcsIdx].length();\n+                anyChars = false;\n             }\n   \n-            // set any chars status\n-            anyChars = wcs[wcsIdx].equals(\"*\");\n-  \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx < wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 != wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n         if (textIdx > filename.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n         if (textIdx < filename.length() && !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a09ebfc6c0f84a0aa9a05da04801461d99509ec5": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Add equals methods, document Unix/Windows behaviour\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140646 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2004-12-04, 11:28 AM",
			"commitName": "a09ebfc6c0f84a0aa9a05da04801461d99509ec5",
			"commitAuthor": "Stephen Colebourne",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Add equals methods, document Unix/Windows behaviour\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140646 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2004-12-04, 11:28 AM",
					"commitName": "a09ebfc6c0f84a0aa9a05da04801461d99509ec5",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2004-11-27, 9:00 AM",
					"commitNameOld": "289a56cf5d5c89ad3d85389b9651b0e227ded057",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 7.1,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,61 +1,61 @@\n-    public static boolean wildcardMatch(String filename, String wildcard) {\n-        String[] wcs = splitOnTokens(wildcard);\n+    public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n+        String[] wcs = splitOnTokens(wildcardMatcher);\n   \n         int textIdx = 0;\n         int wcsIdx = 0;\n         boolean anyChars = false;\n   \n         // loop whilst tokens and text left to process\n         while (wcsIdx < wcs.length && textIdx < filename.length()) {\n   \n             // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n             } else if (!wcs[wcsIdx].equals(\"*\")) {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n                     textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n   \n                     if (textIdx == -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n                     if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx += wcs[wcsIdx].length();\n             }\n   \n             // set any chars status\n             anyChars = wcs[wcsIdx].equals(\"*\");\n   \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx < wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 != wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n         if (textIdx > filename.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n         if (textIdx < filename.length() && !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[filename-String, wildcard-String]",
						"newValue": "[filename-String, wildcardMatcher-String]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Add equals methods, document Unix/Windows behaviour\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140646 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2004-12-04, 11:28 AM",
					"commitName": "a09ebfc6c0f84a0aa9a05da04801461d99509ec5",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2004-11-27, 9:00 AM",
					"commitNameOld": "289a56cf5d5c89ad3d85389b9651b0e227ded057",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 7.1,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,61 +1,61 @@\n-    public static boolean wildcardMatch(String filename, String wildcard) {\n-        String[] wcs = splitOnTokens(wildcard);\n+    public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n+        String[] wcs = splitOnTokens(wildcardMatcher);\n   \n         int textIdx = 0;\n         int wcsIdx = 0;\n         boolean anyChars = false;\n   \n         // loop whilst tokens and text left to process\n         while (wcsIdx < wcs.length && textIdx < filename.length()) {\n   \n             // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n             } else if (!wcs[wcsIdx].equals(\"*\")) {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n                     textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n   \n                     if (textIdx == -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n                     if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx += wcs[wcsIdx].length();\n             }\n   \n             // set any chars status\n             anyChars = wcs[wcsIdx].equals(\"*\");\n   \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx < wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 != wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n         if (textIdx > filename.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n         if (textIdx < filename.length() && !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"f93f8bebb4fc714a6b60e1d2a4452d6ff6d3df5c": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Add commented out implementations of prefix handling, Javadoc\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140640 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2004-11-21, 5:11 PM",
			"commitName": "f93f8bebb4fc714a6b60e1d2a4452d6ff6d3df5c",
			"commitAuthor": "Stephen Colebourne",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Add commented out implementations of prefix handling, Javadoc\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140640 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2004-11-21, 5:11 PM",
					"commitName": "f93f8bebb4fc714a6b60e1d2a4452d6ff6d3df5c",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2004-10-30, 9:17 PM",
					"commitNameOld": "4694d5a982413a12bce4ce0e5570404b8cc7b1f7",
					"commitAuthorOld": "Henri Yandell",
					"daysBetweenCommits": 21.87,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,62 +1,61 @@\n-    public static boolean wildcardMatch(String text, String wildcard) {\n+    public static boolean wildcardMatch(String filename, String wildcard) {\n         String[] wcs = splitOnTokens(wildcard);\n   \n         int textIdx = 0;\n         int wcsIdx = 0;\n         boolean anyChars = false;\n   \n         // loop whilst tokens and text left to process\n-        while (wcsIdx < wcs.length && textIdx < text.length()) {\n+        while (wcsIdx < wcs.length && textIdx < filename.length()) {\n   \n             // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n-            } else\n-            if (!wcs[wcsIdx].equals(\"*\")) {\n+            } else if (!wcs[wcsIdx].equals(\"*\")) {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n-                    textIdx = text.indexOf(wcs[wcsIdx], textIdx);\n+                    textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n   \n                     if (textIdx == -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n-                    if (!text.startsWith(wcs[wcsIdx], textIdx)) {\n+                    if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx += wcs[wcsIdx].length();\n             }\n   \n             // set any chars status\n             anyChars = wcs[wcsIdx].equals(\"*\");\n   \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx < wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 != wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n-        if (textIdx > text.length()) {\n+        if (textIdx > filename.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n-        if (textIdx < text.length() && !anyChars) {\n+        if (textIdx < filename.length() && !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[text-String, wildcard-String]",
						"newValue": "[filename-String, wildcard-String]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Add commented out implementations of prefix handling, Javadoc\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140640 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2004-11-21, 5:11 PM",
					"commitName": "f93f8bebb4fc714a6b60e1d2a4452d6ff6d3df5c",
					"commitAuthor": "Stephen Colebourne",
					"commitDateOld": "2004-10-30, 9:17 PM",
					"commitNameOld": "4694d5a982413a12bce4ce0e5570404b8cc7b1f7",
					"commitAuthorOld": "Henri Yandell",
					"daysBetweenCommits": 21.87,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,62 +1,61 @@\n-    public static boolean wildcardMatch(String text, String wildcard) {\n+    public static boolean wildcardMatch(String filename, String wildcard) {\n         String[] wcs = splitOnTokens(wildcard);\n   \n         int textIdx = 0;\n         int wcsIdx = 0;\n         boolean anyChars = false;\n   \n         // loop whilst tokens and text left to process\n-        while (wcsIdx < wcs.length && textIdx < text.length()) {\n+        while (wcsIdx < wcs.length && textIdx < filename.length()) {\n   \n             // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n-            } else\n-            if (!wcs[wcsIdx].equals(\"*\")) {\n+            } else if (!wcs[wcsIdx].equals(\"*\")) {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n-                    textIdx = text.indexOf(wcs[wcsIdx], textIdx);\n+                    textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n   \n                     if (textIdx == -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n-                    if (!text.startsWith(wcs[wcsIdx], textIdx)) {\n+                    if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx += wcs[wcsIdx].length();\n             }\n   \n             // set any chars status\n             anyChars = wcs[wcsIdx].equals(\"*\");\n   \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx < wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 != wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n-        if (textIdx > text.length()) {\n+        if (textIdx > filename.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n-        if (textIdx < text.length() && !anyChars) {\n+        if (textIdx < filename.length() && !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"4694d5a982413a12bce4ce0e5570404b8cc7b1f7": {
			"type": "Ymultichange(Ymovefromfile,Yrename)",
			"commitMessage": "merged WildcardUtils into FilenameUtils; thought the test case is still a separate file\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140639 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2004-10-30, 9:17 PM",
			"commitName": "4694d5a982413a12bce4ce0e5570404b8cc7b1f7",
			"commitAuthor": "Henri Yandell",
			"subchanges": [
				{
					"type": "Ymovefromfile",
					"commitMessage": "merged WildcardUtils into FilenameUtils; thought the test case is still a separate file\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140639 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2004-10-30, 9:17 PM",
					"commitName": "4694d5a982413a12bce4ce0e5570404b8cc7b1f7",
					"commitAuthor": "Henri Yandell",
					"commitDateOld": "2004-10-30, 5:03 PM",
					"commitNameOld": "4a61d8cf150c561fe24477350eb6de2bb41ef750",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 0.18,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,62 +1,62 @@\n-    public static boolean match(String text, String wildcard) {\n+    public static boolean wildcardMatch(String text, String wildcard) {\n         String[] wcs = splitOnTokens(wildcard);\n   \n         int textIdx = 0;\n         int wcsIdx = 0;\n         boolean anyChars = false;\n   \n         // loop whilst tokens and text left to process\n         while (wcsIdx < wcs.length && textIdx < text.length()) {\n   \n             // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n             } else\n             if (!wcs[wcsIdx].equals(\"*\")) {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n                     textIdx = text.indexOf(wcs[wcsIdx], textIdx);\n   \n                     if (textIdx == -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n                     if (!text.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx += wcs[wcsIdx].length();\n             }\n   \n             // set any chars status\n             anyChars = wcs[wcsIdx].equals(\"*\");\n   \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx < wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 != wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n         if (textIdx > text.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n         if (textIdx < text.length() && !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldPath": "src/java/org/apache/commons/io/WildcardUtils.java",
						"newPath": "src/java/org/apache/commons/io/FilenameUtils.java",
						"oldMethodName": "match",
						"newMethodName": "wildcardMatch"
					}
				},
				{
					"type": "Yrename",
					"commitMessage": "merged WildcardUtils into FilenameUtils; thought the test case is still a separate file\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140639 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2004-10-30, 9:17 PM",
					"commitName": "4694d5a982413a12bce4ce0e5570404b8cc7b1f7",
					"commitAuthor": "Henri Yandell",
					"commitDateOld": "2004-10-30, 5:03 PM",
					"commitNameOld": "4a61d8cf150c561fe24477350eb6de2bb41ef750",
					"commitAuthorOld": "Stephen Colebourne",
					"daysBetweenCommits": 0.18,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,62 +1,62 @@\n-    public static boolean match(String text, String wildcard) {\n+    public static boolean wildcardMatch(String text, String wildcard) {\n         String[] wcs = splitOnTokens(wildcard);\n   \n         int textIdx = 0;\n         int wcsIdx = 0;\n         boolean anyChars = false;\n   \n         // loop whilst tokens and text left to process\n         while (wcsIdx < wcs.length && textIdx < text.length()) {\n   \n             // ? so move to next text char\n             if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n             } else\n             if (!wcs[wcsIdx].equals(\"*\")) {\n                 // matching text token\n                 if (anyChars) {\n                     // any chars then try to locate text token\n                     textIdx = text.indexOf(wcs[wcsIdx], textIdx);\n   \n                     if (textIdx == -1) {\n                         // token not found\n                         return false;\n                     }\n                 } else {\n                     // matching from current position\n                     if (!text.startsWith(wcs[wcsIdx], textIdx)) {\n                         // couldnt match token\n                         return false;\n                     }\n                 }\n   \n                 // matched text token, move text index to end of matched token\n                 textIdx += wcs[wcsIdx].length();\n             }\n   \n             // set any chars status\n             anyChars = wcs[wcsIdx].equals(\"*\");\n   \n             wcsIdx++;\n         }\n \n         // didnt match all wildcards\n         if (wcsIdx < wcs.length) {\n             // ok if one remaining and wildcard or empty\n             if (wcsIdx + 1 != wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n                 return false;\n             }\n         }\n   \n         // ran out of text chars\n         if (textIdx > text.length()) {\n            return false;\n         }\n   \n         // didnt match all text chars, only ok if any chars set\n         if (textIdx < text.length() && !anyChars) {\n             return false;\n         }\n   \n         return true;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "match",
						"newValue": "wildcardMatch"
					}
				}
			]
		},
		"fe44f3401d6d2b6c66eca32058de5bcd1f6facb9": {
			"type": "Yfilerename",
			"commitMessage": "moved WildcardUtils up a directory as it is used in two sub-packages of IO\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140620 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2004-10-25, 3:55 PM",
			"commitName": "fe44f3401d6d2b6c66eca32058de5bcd1f6facb9",
			"commitAuthor": "Henri Yandell",
			"commitDateOld": "2004-10-25, 3:53 PM",
			"commitNameOld": "dfb79b3263d2a1f2c77e4d307e7af4e4341e604a",
			"commitAuthorOld": "Stephen Colebourne",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/java/org/apache/commons/io/find/WildcardUtils.java",
				"newPath": "src/java/org/apache/commons/io/WildcardUtils.java"
			}
		},
		"400e99de58edf0d46a2b22818c37384a3ec9d122": {
			"type": "Ybodychange",
			"commitMessage": "More tests for WildcardUtils.match and a new implementation of the match method.\nMostly the same as Bugzilla #31115, though the old tests were kept and they\nshowed a bug.\n\nSubmitted by:\tJason Anderson\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140606 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2004-09-21, 9:12 PM",
			"commitName": "400e99de58edf0d46a2b22818c37384a3ec9d122",
			"commitAuthor": "Henri Yandell",
			"commitDateOld": "2004-09-16, 5:14 PM",
			"commitNameOld": "4fbac940f62e0e5196498c3b7cb4ab909ce1a337",
			"commitAuthorOld": "Henri Yandell",
			"daysBetweenCommits": 5.16,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,39 +1,62 @@\n     public static boolean match(String text, String wildcard) {\n-        // split wildcard on ? and *\n-        // for each element of the array, find a matching block in text\n-        // earliest matching block counts\n         String[] wcs = splitOnTokens(wildcard);\n+  \n         int textIdx = 0;\n-        for(int i=0; i<wcs.length; i++) {\n-            if(textIdx == text.length()) {\n-                if(\"*\".equals(wcs[i])) {\n-                    return true;\n-                }\n-                return wcs[i].length() == 0;\n-            }\n-\n-            if(\"?\".equals(wcs[i])) {\n+        int wcsIdx = 0;\n+        boolean anyChars = false;\n+  \n+        // loop whilst tokens and text left to process\n+        while (wcsIdx < wcs.length && textIdx < text.length()) {\n+  \n+            // ? so move to next text char\n+            if (wcs[wcsIdx].equals(\"?\")) {\n                 textIdx++;\n             } else\n-            if(\"*\".equals(wcs[i])) {\n-                int nextIdx = i+1;\n-                if(nextIdx == wcs.length) {\n-                    return true;\n-                }\n-                int restartIdx = text.indexOf(wcs[nextIdx], textIdx);\n-                if(restartIdx == -1) {\n-                    return false;\n+            if (!wcs[wcsIdx].equals(\"*\")) {\n+                // matching text token\n+                if (anyChars) {\n+                    // any chars then try to locate text token\n+                    textIdx = text.indexOf(wcs[wcsIdx], textIdx);\n+  \n+                    if (textIdx == -1) {\n+                        // token not found\n+                        return false;\n+                    }\n                 } else {\n-                    textIdx = restartIdx;\n+                    // matching from current position\n+                    if (!text.startsWith(wcs[wcsIdx], textIdx)) {\n+                        // couldnt match token\n+                        return false;\n+                    }\n                 }\n-            } else {\n-                if(!text.startsWith(wcs[i], textIdx)) {\n-                    return false;\n-                } else {\n-                    textIdx += wcs[i].length();\n-                }\n+  \n+                // matched text token, move text index to end of matched token\n+                textIdx += wcs[wcsIdx].length();\n             }\n+  \n+            // set any chars status\n+            anyChars = wcs[wcsIdx].equals(\"*\");\n+  \n+            wcsIdx++;\n         }\n \n+        // didnt match all wildcards\n+        if (wcsIdx < wcs.length) {\n+            // ok if one remaining and wildcard or empty\n+            if (wcsIdx + 1 != wcs.length || !(wcs[wcsIdx].equals(\"*\") || wcs[wcsIdx].equals(\"\")) ) {\n+                return false;\n+            }\n+        }\n+  \n+        // ran out of text chars\n+        if (textIdx > text.length()) {\n+           return false;\n+        }\n+  \n+        // didnt match all text chars, only ok if any chars set\n+        if (textIdx < text.length() && !anyChars) {\n+            return false;\n+        }\n+  \n         return true;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"4fbac940f62e0e5196498c3b7cb4ab909ce1a337": {
			"type": "Yintroduced",
			"commitMessage": "added finding subsystem to IO along with WildcardUtils\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@140602 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2004-09-16, 5:14 PM",
			"commitName": "4fbac940f62e0e5196498c3b7cb4ab909ce1a337",
			"commitAuthor": "Henri Yandell",
			"diff": "@@ -0,0 +1,39 @@\n+    public static boolean match(String text, String wildcard) {\n+        // split wildcard on ? and *\n+        // for each element of the array, find a matching block in text\n+        // earliest matching block counts\n+        String[] wcs = splitOnTokens(wildcard);\n+        int textIdx = 0;\n+        for(int i=0; i<wcs.length; i++) {\n+            if(textIdx == text.length()) {\n+                if(\"*\".equals(wcs[i])) {\n+                    return true;\n+                }\n+                return wcs[i].length() == 0;\n+            }\n+\n+            if(\"?\".equals(wcs[i])) {\n+                textIdx++;\n+            } else\n+            if(\"*\".equals(wcs[i])) {\n+                int nextIdx = i+1;\n+                if(nextIdx == wcs.length) {\n+                    return true;\n+                }\n+                int restartIdx = text.indexOf(wcs[nextIdx], textIdx);\n+                if(restartIdx == -1) {\n+                    return false;\n+                } else {\n+                    textIdx = restartIdx;\n+                }\n+            } else {\n+                if(!text.startsWith(wcs[i], textIdx)) {\n+                    return false;\n+                } else {\n+                    textIdx += wcs[i].length();\n+                }\n+            }\n+        }\n+\n+        return true;\n+    }\n\\ No newline at end of file\n"
		}
	},
	"sha": "559de2c461e94ab636c959149c775bb27111fb48"
}