{
	"repo": "https://github.com/pmd/pmd.git",
	"file": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symboltable/SourceFileScope.java",
	"method": {
		"longName": "private Map<String, Node> getSubTypes(String qualifyingName, Scope subType);",
		"startLine": 150,
		"methodName": "getSubTypes",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "private"
	},
	"history": {
		"932ad7dd2b82feeeada8eaff815430b47de47795": {
			"type": "Ybodychange",
			"commitMessage": "Reduce memory allocations during symbol table\n",
			"commitDate": "2017-01-03, 3:07 AM",
			"commitName": "932ad7dd2b82feeeada8eaff815430b47de47795",
			"commitAuthor": "Juan Martín Sotuyo Dodero",
			"commitDateOld": "2017-01-03, 2:22 AM",
			"commitNameOld": "b950929b7cd224c32eef1b2d3afc32d4c6b53ab4",
			"commitAuthorOld": "Juan Martín Sotuyo Dodero",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,17 @@\n     private Map<String, Node> getSubTypes(String qualifyingName, Scope subType) {\n-        Map<String, Node> types = new HashMap<>();\n-        for (ClassNameDeclaration c : subType.getDeclarations(ClassNameDeclaration.class).keySet()) {\n+        Set<ClassNameDeclaration> classDeclarations = subType.getDeclarations(ClassNameDeclaration.class).keySet();\n+        if (classDeclarations.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        Map<String, Node> types = new HashMap<>((int) (classDeclarations.size() / 0.75f) + 1);\n+        for (ClassNameDeclaration c : classDeclarations) {\n             String typeName = c.getName();\n             if (qualifyingName != null) {\n                 typeName = qualifyingName + \".\" + typeName;\n             }\n             types.put(typeName, c.getNode());\n             types.putAll(getSubTypes(typeName, c.getScope()));\n         }\n         return types;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"fd2dcddc447c8ae88fe5b1df9fca0326017309f8": {
			"type": "Ybodychange",
			"commitMessage": "Java 7 changes and some compiler warnings fixed\n",
			"commitDate": "2015-11-25, 1:06 PM",
			"commitName": "fd2dcddc447c8ae88fe5b1df9fca0326017309f8",
			"commitAuthor": "Andreas Dangel",
			"commitDateOld": "2015-09-22, 12:55 PM",
			"commitNameOld": "b965cf45b3c1d5c165514144d24fae132ed4cc7b",
			"commitAuthorOld": "Andreas Dangel",
			"daysBetweenCommits": 64.05,
			"commitsBetweenForRepo": 68,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n     private Map<String, Node> getSubTypes(String qualifyingName, Scope subType) {\n-        Map<String, Node> types = new HashMap<String, Node>();\n+        Map<String, Node> types = new HashMap<>();\n         for (ClassNameDeclaration c : subType.getDeclarations(ClassNameDeclaration.class).keySet()) {\n             String typeName = c.getName();\n             if (qualifyingName != null) {\n                 typeName = qualifyingName + \".\" + typeName;\n             }\n             types.put(typeName, c.getNode());\n             types.putAll(getSubTypes(typeName, c.getScope()));\n         }\n         return types;\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"55a912e731236fc79025fd031734cc06d4c78aa5": {
			"type": "Ymultichange(Yreturntypechange,Ybodychange)",
			"commitMessage": "#1281 UnusedPrivateMethod incorrectly flagged for methods nested private classes\n",
			"commitDate": "2014-11-15, 7:51 AM",
			"commitName": "55a912e731236fc79025fd031734cc06d4c78aa5",
			"commitAuthor": "Andreas Dangel",
			"subchanges": [
				{
					"type": "Yreturntypechange",
					"commitMessage": "#1281 UnusedPrivateMethod incorrectly flagged for methods nested private classes\n",
					"commitDate": "2014-11-15, 7:51 AM",
					"commitName": "55a912e731236fc79025fd031734cc06d4c78aa5",
					"commitAuthor": "Andreas Dangel",
					"commitDateOld": "2014-11-15, 3:55 AM",
					"commitNameOld": "a8d7b594ab8ee3afbcf3390be2aa5c8dee1f06c7",
					"commitAuthorOld": "Andreas Dangel",
					"daysBetweenCommits": 0.16,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,12 @@\n-    private Set<String> getSubTypes(String qualifyingName, Scope subType) {\n-        Set<String> types = new HashSet<String>();\n+    private Map<String, Node> getSubTypes(String qualifyingName, Scope subType) {\n+        Map<String, Node> types = new HashMap<String, Node>();\n         for (ClassNameDeclaration c : subType.getDeclarations(ClassNameDeclaration.class).keySet()) {\n             String typeName = c.getName();\n             if (qualifyingName != null) {\n                 typeName = qualifyingName + \".\" + typeName;\n             }\n-            types.add(typeName);\n-            types.addAll(getSubTypes(typeName, c.getScope()));\n+            types.put(typeName, c.getNode());\n+            types.putAll(getSubTypes(typeName, c.getScope()));\n         }\n         return types;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "Set<String>",
						"newValue": "Map<String,Node>"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "#1281 UnusedPrivateMethod incorrectly flagged for methods nested private classes\n",
					"commitDate": "2014-11-15, 7:51 AM",
					"commitName": "55a912e731236fc79025fd031734cc06d4c78aa5",
					"commitAuthor": "Andreas Dangel",
					"commitDateOld": "2014-11-15, 3:55 AM",
					"commitNameOld": "a8d7b594ab8ee3afbcf3390be2aa5c8dee1f06c7",
					"commitAuthorOld": "Andreas Dangel",
					"daysBetweenCommits": 0.16,
					"commitsBetweenForRepo": 2,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,12 @@\n-    private Set<String> getSubTypes(String qualifyingName, Scope subType) {\n-        Set<String> types = new HashSet<String>();\n+    private Map<String, Node> getSubTypes(String qualifyingName, Scope subType) {\n+        Map<String, Node> types = new HashMap<String, Node>();\n         for (ClassNameDeclaration c : subType.getDeclarations(ClassNameDeclaration.class).keySet()) {\n             String typeName = c.getName();\n             if (qualifyingName != null) {\n                 typeName = qualifyingName + \".\" + typeName;\n             }\n-            types.add(typeName);\n-            types.addAll(getSubTypes(typeName, c.getScope()));\n+            types.put(typeName, c.getNode());\n+            types.putAll(getSubTypes(typeName, c.getScope()));\n         }\n         return types;\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"a8d7b594ab8ee3afbcf3390be2aa5c8dee1f06c7": {
			"type": "Yintroduced",
			"commitMessage": "#1276 False positive in UnusedPrivateMethod with inner enum\n",
			"commitDate": "2014-11-15, 3:55 AM",
			"commitName": "a8d7b594ab8ee3afbcf3390be2aa5c8dee1f06c7",
			"commitAuthor": "Andreas Dangel",
			"diff": "@@ -0,0 +1,12 @@\n+    private Set<String> getSubTypes(String qualifyingName, Scope subType) {\n+        Set<String> types = new HashSet<String>();\n+        for (ClassNameDeclaration c : subType.getDeclarations(ClassNameDeclaration.class).keySet()) {\n+            String typeName = c.getName();\n+            if (qualifyingName != null) {\n+                typeName = qualifyingName + \".\" + typeName;\n+            }\n+            types.add(typeName);\n+            types.addAll(getSubTypes(typeName, c.getScope()));\n+        }\n+        return types;\n+    }\n\\ No newline at end of file\n"
		}
	},
	"sha": "d528dcd5d45582229ab3410deb7c40b2143d015d"
}