{
	"repo": "https://github.com/apache/commons-lang.git",
	"file": "src/main/java/org/apache/commons/lang3/LocaleUtils.java",
	"method": {
		"longName": "public Locale toLocale(String str);",
		"startLine": 90,
		"methodName": "toLocale",
		"isStatic": true,
		"isAbstract": false,
		"visibility": "public"
	},
	"history": {
		"d3146a545612422d3f8078f10afa00342b327199": {
			"type": "Ybodychange",
			"commitMessage": "Extract some helper methods to make the code better readable\n",
			"commitDate": "2017-04-17, 3:29 AM",
			"commitName": "d3146a545612422d3f8078f10afa00342b327199",
			"commitAuthor": "Benedikt Ritter",
			"commitDateOld": "2017-04-17, 3:09 AM",
			"commitNameOld": "d547412bbd2a1ca56769a2bfa13b7ed9547310ca",
			"commitAuthorOld": "Benedikt Ritter",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,38 +1,38 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n         if (str.isEmpty()) { // LANG-941 - JDK 8 introduced an empty locale where all fields are blank\n             return new Locale(StringUtils.EMPTY, StringUtils.EMPTY);\n         }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(StringUtils.EMPTY, str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(StringUtils.EMPTY, str.substring(1, 3), str.substring(4));\n         }\n \n-        return parseLocale(str, len);\n+        return parseLocale(str);\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d547412bbd2a1ca56769a2bfa13b7ed9547310ca": {
			"type": "Ybodychange",
			"commitMessage": "Extract method for parsing locales from string\n",
			"commitDate": "2017-04-17, 3:09 AM",
			"commitName": "d547412bbd2a1ca56769a2bfa13b7ed9547310ca",
			"commitAuthor": "Benedikt Ritter",
			"commitDateOld": "2017-04-17, 3:01 AM",
			"commitNameOld": "3c89994355f3574078c832b2dcacba0e65e87ed1",
			"commitAuthorOld": "Benedikt Ritter",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,68 +1,38 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n         if (str.isEmpty()) { // LANG-941 - JDK 8 introduced an empty locale where all fields are blank\n             return new Locale(StringUtils.EMPTY, StringUtils.EMPTY);\n         }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(StringUtils.EMPTY, str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(StringUtils.EMPTY, str.substring(1, 3), str.substring(4));\n         }\n \n-        final String[] segments = str.split(\"_\", -1);\n-        final int segmentCount = segments.length -1;\n-        final String country = segments[0];\n-        switch (segmentCount) {\n-            case 0:\n-                if (StringUtils.isAllLowerCase(str) && (len == 2 || len == 3)) {\n-                    return new Locale(str);\n-                }\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-\n-            case 1:\n-                if (StringUtils.isAllLowerCase(country) &&\n-                    (country.length() == 2 || country.length() == 3) &&\n-                     (segments[1].length() == 2 && StringUtils.isAllUpperCase(segments[1])) ||\n-                      (segments[1].length() == 3 && StringUtils.isNumeric(segments[1]))) {\n-                    return new Locale(country, segments[1]);\n-                }\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-\n-            case 2:\n-                if (StringUtils.isAllLowerCase(country) &&\n-                    (country.length() == 2 || country.length() == 3) &&\n-                    (segments[1].length() == 0 || segments[1].length() == 2 && StringUtils.isAllUpperCase(segments[1])) &&\n-                     segments[2].length() > 0) {\n-                    return new Locale(country, segments[1], segments[2]);\n-                }\n-\n-            //$FALL-THROUGH$\n-            default:\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n+        return parseLocale(str, len);\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3c89994355f3574078c832b2dcacba0e65e87ed1": {
			"type": "Ybodychange",
			"commitMessage": "Better local variable names\n",
			"commitDate": "2017-04-17, 3:01 AM",
			"commitName": "3c89994355f3574078c832b2dcacba0e65e87ed1",
			"commitAuthor": "Benedikt Ritter",
			"commitDateOld": "2017-02-21, 12:13 PM",
			"commitNameOld": "4bd982d1a1df87724682c17c39bf27b5cbe389be",
			"commitAuthorOld": "pascalschumacher",
			"daysBetweenCommits": 54.58,
			"commitsBetweenForRepo": 67,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,67 +1,68 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n         if (str.isEmpty()) { // LANG-941 - JDK 8 introduced an empty locale where all fields are blank\n             return new Locale(StringUtils.EMPTY, StringUtils.EMPTY);\n         }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(StringUtils.EMPTY, str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(StringUtils.EMPTY, str.substring(1, 3), str.substring(4));\n         }\n-        \n-        final String[] split = str.split(\"_\", -1);\n-        final int occurrences = split.length -1;\n-        switch (occurrences) {\n+\n+        final String[] segments = str.split(\"_\", -1);\n+        final int segmentCount = segments.length -1;\n+        final String country = segments[0];\n+        switch (segmentCount) {\n             case 0:\n                 if (StringUtils.isAllLowerCase(str) && (len == 2 || len == 3)) {\n                     return new Locale(str);\n                 }\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-                \n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+\n             case 1:\n-                if (StringUtils.isAllLowerCase(split[0]) &&\n-                    (split[0].length() == 2 || split[0].length() == 3) &&\n-                     (split[1].length() == 2 && StringUtils.isAllUpperCase(split[1])) ||\n-                      (split[1].length() == 3 && StringUtils.isNumeric(split[1]))) {\n-                    return new Locale(split[0], split[1]);\n+                if (StringUtils.isAllLowerCase(country) &&\n+                    (country.length() == 2 || country.length() == 3) &&\n+                     (segments[1].length() == 2 && StringUtils.isAllUpperCase(segments[1])) ||\n+                      (segments[1].length() == 3 && StringUtils.isNumeric(segments[1]))) {\n+                    return new Locale(country, segments[1]);\n                 }\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n \n             case 2:\n-                if (StringUtils.isAllLowerCase(split[0]) && \n-                    (split[0].length() == 2 || split[0].length() == 3) &&\n-                    (split[1].length() == 0 || split[1].length() == 2 && StringUtils.isAllUpperCase(split[1])) &&\n-                     split[2].length() > 0) {\n-                    return new Locale(split[0], split[1], split[2]);\n+                if (StringUtils.isAllLowerCase(country) &&\n+                    (country.length() == 2 || country.length() == 3) &&\n+                    (segments[1].length() == 0 || segments[1].length() == 2 && StringUtils.isAllUpperCase(segments[1])) &&\n+                     segments[2].length() > 0) {\n+                    return new Locale(country, segments[1], segments[2]);\n                 }\n \n-                //$FALL-THROUGH$\n+            //$FALL-THROUGH$\n             default:\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"4bd982d1a1df87724682c17c39bf27b5cbe389be": {
			"type": "Ybodychange",
			"commitMessage": "LANG-1312: LocaleUtils#toLocale does not support language followed by UN M.49 numeric-3 area code (closes #239)\n",
			"commitDate": "2017-02-21, 12:13 PM",
			"commitName": "4bd982d1a1df87724682c17c39bf27b5cbe389be",
			"commitAuthor": "pascalschumacher",
			"commitDateOld": "2016-10-23, 10:52 AM",
			"commitNameOld": "4f82195afdc4279c05826fc20f8642bfdaaafec3",
			"commitAuthorOld": "Gary Gregory",
			"daysBetweenCommits": 121.1,
			"commitsBetweenForRepo": 127,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,66 +1,67 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n         if (str.isEmpty()) { // LANG-941 - JDK 8 introduced an empty locale where all fields are blank\n             return new Locale(StringUtils.EMPTY, StringUtils.EMPTY);\n         }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(StringUtils.EMPTY, str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(StringUtils.EMPTY, str.substring(1, 3), str.substring(4));\n         }\n         \n         final String[] split = str.split(\"_\", -1);\n         final int occurrences = split.length -1;\n         switch (occurrences) {\n             case 0:\n                 if (StringUtils.isAllLowerCase(str) && (len == 2 || len == 3)) {\n                     return new Locale(str);\n                 }\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 \n             case 1:\n                 if (StringUtils.isAllLowerCase(split[0]) &&\n                     (split[0].length() == 2 || split[0].length() == 3) &&\n-                     split[1].length() == 2 && StringUtils.isAllUpperCase(split[1])) {\n+                     (split[1].length() == 2 && StringUtils.isAllUpperCase(split[1])) ||\n+                      (split[1].length() == 3 && StringUtils.isNumeric(split[1]))) {\n                     return new Locale(split[0], split[1]);\n                 }\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n \n             case 2:\n                 if (StringUtils.isAllLowerCase(split[0]) && \n                     (split[0].length() == 2 || split[0].length() == 3) &&\n                     (split[1].length() == 0 || split[1].length() == 2 && StringUtils.isAllUpperCase(split[1])) &&\n                      split[2].length() > 0) {\n                     return new Locale(split[0], split[1], split[2]);\n                 }\n \n                 //$FALL-THROUGH$\n             default:\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9c5b6cdc7108eb071785b0c4edd205650cdf1ca4": {
			"type": "Ybodychange",
			"commitMessage": "PMD: Remove useless parentheses\n",
			"commitDate": "2016-09-19, 4:56 AM",
			"commitName": "9c5b6cdc7108eb071785b0c4edd205650cdf1ca4",
			"commitAuthor": "Benedikt Ritter",
			"commitDateOld": "2016-04-13, 1:57 PM",
			"commitNameOld": "15b80753a6e8f481ea5029bc278e362994cb7bee",
			"commitAuthorOld": "ggregory",
			"daysBetweenCommits": 158.62,
			"commitsBetweenForRepo": 166,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,66 +1,66 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n         if (str.isEmpty()) { // LANG-941 - JDK 8 introduced an empty locale where all fields are blank\n             return new Locale(StringUtils.EMPTY, StringUtils.EMPTY);\n         }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(StringUtils.EMPTY, str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(StringUtils.EMPTY, str.substring(1, 3), str.substring(4));\n         }\n         \n         final String[] split = str.split(\"_\", -1);\n         final int occurrences = split.length -1;\n         switch (occurrences) {\n             case 0:\n                 if (StringUtils.isAllLowerCase(str) && (len == 2 || len == 3)) {\n                     return new Locale(str);\n                 }\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 \n             case 1:\n                 if (StringUtils.isAllLowerCase(split[0]) &&\n                     (split[0].length() == 2 || split[0].length() == 3) &&\n                      split[1].length() == 2 && StringUtils.isAllUpperCase(split[1])) {\n                     return new Locale(split[0], split[1]);\n                 }\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n \n             case 2:\n                 if (StringUtils.isAllLowerCase(split[0]) && \n                     (split[0].length() == 2 || split[0].length() == 3) &&\n-                    (split[1].length() == 0 || (split[1].length() == 2 && StringUtils.isAllUpperCase(split[1]))) &&\n+                    (split[1].length() == 0 || split[1].length() == 2 && StringUtils.isAllUpperCase(split[1])) &&\n                      split[2].length() > 0) {\n                     return new Locale(split[0], split[1], split[2]);\n                 }\n \n                 //$FALL-THROUGH$\n             default:\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"15b80753a6e8f481ea5029bc278e362994cb7bee": {
			"type": "Ybodychange",
			"commitMessage": "Reuse",
			"commitDate": "2016-04-13, 1:57 PM",
			"commitName": "15b80753a6e8f481ea5029bc278e362994cb7bee",
			"commitAuthor": "ggregory",
			"commitDateOld": "2015-05-05, 12:12 PM",
			"commitNameOld": "740c0f95fbd99cb7c07bcf7c54bc077c3ab27bd1",
			"commitAuthorOld": "Henri Yandell",
			"daysBetweenCommits": 344.07,
			"commitsBetweenForRepo": 148,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,66 +1,66 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n         if (str.isEmpty()) { // LANG-941 - JDK 8 introduced an empty locale where all fields are blank\n-            return new Locale(\"\", \"\");\n+            return new Locale(StringUtils.EMPTY, StringUtils.EMPTY);\n         }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n-                return new Locale(\"\", str.substring(1, 3));\n+                return new Locale(StringUtils.EMPTY, str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n+            return new Locale(StringUtils.EMPTY, str.substring(1, 3), str.substring(4));\n         }\n         \n         final String[] split = str.split(\"_\", -1);\n         final int occurrences = split.length -1;\n         switch (occurrences) {\n             case 0:\n                 if (StringUtils.isAllLowerCase(str) && (len == 2 || len == 3)) {\n                     return new Locale(str);\n                 }\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 \n             case 1:\n                 if (StringUtils.isAllLowerCase(split[0]) &&\n                     (split[0].length() == 2 || split[0].length() == 3) &&\n                      split[1].length() == 2 && StringUtils.isAllUpperCase(split[1])) {\n                     return new Locale(split[0], split[1]);\n                 }\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n \n             case 2:\n                 if (StringUtils.isAllLowerCase(split[0]) && \n                     (split[0].length() == 2 || split[0].length() == 3) &&\n                     (split[1].length() == 0 || (split[1].length() == 2 && StringUtils.isAllUpperCase(split[1]))) &&\n                      split[2].length() > 0) {\n                     return new Locale(split[0], split[1], split[2]);\n                 }\n \n                 //$FALL-THROUGH$\n             default:\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"71966110f7918a6366f97ded3bab25c7b5864cb8": {
			"type": "Ybodychange",
			"commitMessage": "Statement unnecessarily nested within else clause.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1606089 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2014-06-27, 6:18 AM",
			"commitName": "71966110f7918a6366f97ded3bab25c7b5864cb8",
			"commitAuthor": "Gary D. Gregory",
			"commitDateOld": "2014-06-27, 5:36 AM",
			"commitNameOld": "f7e5f2c877a07c31010db8554125e77db6a605cc",
			"commitAuthorOld": "Gary D. Gregory",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 12,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,67 +1,66 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n         if (str.isEmpty()) { // LANG-941 - JDK 8 introduced an empty locale where all fields are blank\n             return new Locale(\"\", \"\");\n         }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(\"\", str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(\"\", str.substring(1, 3), str.substring(4));\n         }\n         \n         final String[] split = str.split(\"_\", -1);\n         final int occurrences = split.length -1;\n         switch (occurrences) {\n             case 0:\n                 if (StringUtils.isAllLowerCase(str) && (len == 2 || len == 3)) {\n                     return new Locale(str);\n-                } else {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 }\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 \n             case 1:\n                 if (StringUtils.isAllLowerCase(split[0]) &&\n                     (split[0].length() == 2 || split[0].length() == 3) &&\n                      split[1].length() == 2 && StringUtils.isAllUpperCase(split[1])) {\n                     return new Locale(split[0], split[1]);\n                 }\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n \n             case 2:\n                 if (StringUtils.isAllLowerCase(split[0]) && \n                     (split[0].length() == 2 || split[0].length() == 3) &&\n                     (split[1].length() == 0 || (split[1].length() == 2 && StringUtils.isAllUpperCase(split[1]))) &&\n                      split[2].length() > 0) {\n                     return new Locale(split[0], split[1], split[2]);\n                 }\n \n                 //$FALL-THROUGH$\n             default:\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f7e5f2c877a07c31010db8554125e77db6a605cc": {
			"type": "Ybodychange",
			"commitMessage": "Statement unnecessarily nested within else clause.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1606066 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2014-06-27, 5:36 AM",
			"commitName": "f7e5f2c877a07c31010db8554125e77db6a605cc",
			"commitAuthor": "Gary D. Gregory",
			"commitDateOld": "2014-06-27, 5:22 AM",
			"commitNameOld": "96c30e248d6d27a1df8e26be14aa10c633168cdb",
			"commitAuthorOld": "Gary D. Gregory",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 9,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,68 +1,67 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n         if (str.isEmpty()) { // LANG-941 - JDK 8 introduced an empty locale where all fields are blank\n             return new Locale(\"\", \"\");\n         }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(\"\", str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(\"\", str.substring(1, 3), str.substring(4));\n         }\n         \n         final String[] split = str.split(\"_\", -1);\n         final int occurrences = split.length -1;\n         switch (occurrences) {\n             case 0:\n                 if (StringUtils.isAllLowerCase(str) && (len == 2 || len == 3)) {\n                     return new Locale(str);\n                 } else {\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 }\n                 \n             case 1:\n                 if (StringUtils.isAllLowerCase(split[0]) &&\n                     (split[0].length() == 2 || split[0].length() == 3) &&\n                      split[1].length() == 2 && StringUtils.isAllUpperCase(split[1])) {\n                     return new Locale(split[0], split[1]);\n-                } else {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 }\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n \n             case 2:\n                 if (StringUtils.isAllLowerCase(split[0]) && \n                     (split[0].length() == 2 || split[0].length() == 3) &&\n                     (split[1].length() == 0 || (split[1].length() == 2 && StringUtils.isAllUpperCase(split[1]))) &&\n                      split[2].length() > 0) {\n                     return new Locale(split[0], split[1], split[2]);\n                 }\n \n                 //$FALL-THROUGH$\n             default:\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"96c30e248d6d27a1df8e26be14aa10c633168cdb": {
			"type": "Ybodychange",
			"commitMessage": "Use final consistently. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1606051 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2014-06-27, 5:22 AM",
			"commitName": "96c30e248d6d27a1df8e26be14aa10c633168cdb",
			"commitAuthor": "Gary D. Gregory",
			"commitDateOld": "2014-02-06, 5:31 AM",
			"commitNameOld": "f27c439c8d8818e61c11019d1d58b311a831c301",
			"commitAuthorOld": "Sebastian Bazley",
			"daysBetweenCommits": 140.95,
			"commitsBetweenForRepo": 169,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,68 +1,68 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n         if (str.isEmpty()) { // LANG-941 - JDK 8 introduced an empty locale where all fields are blank\n             return new Locale(\"\", \"\");\n         }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(\"\", str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(\"\", str.substring(1, 3), str.substring(4));\n         }\n         \n-        String[] split = str.split(\"_\", -1);\n-        int occurrences = split.length -1;\n+        final String[] split = str.split(\"_\", -1);\n+        final int occurrences = split.length -1;\n         switch (occurrences) {\n             case 0:\n                 if (StringUtils.isAllLowerCase(str) && (len == 2 || len == 3)) {\n                     return new Locale(str);\n                 } else {\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 }\n                 \n             case 1:\n                 if (StringUtils.isAllLowerCase(split[0]) &&\n                     (split[0].length() == 2 || split[0].length() == 3) &&\n                      split[1].length() == 2 && StringUtils.isAllUpperCase(split[1])) {\n                     return new Locale(split[0], split[1]);\n                 } else {\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 }\n \n             case 2:\n                 if (StringUtils.isAllLowerCase(split[0]) && \n                     (split[0].length() == 2 || split[0].length() == 3) &&\n                     (split[1].length() == 0 || (split[1].length() == 2 && StringUtils.isAllUpperCase(split[1]))) &&\n                      split[2].length() > 0) {\n                     return new Locale(split[0], split[1], split[2]);\n                 }\n \n                 //$FALL-THROUGH$\n             default:\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f27c439c8d8818e61c11019d1d58b311a831c301": {
			"type": "Ybodychange",
			"commitMessage": "Fall through is intentional\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1565235 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2014-02-06, 5:31 AM",
			"commitName": "f27c439c8d8818e61c11019d1d58b311a831c301",
			"commitAuthor": "Sebastian Bazley",
			"commitDateOld": "2014-01-11, 5:06 AM",
			"commitNameOld": "8ea0c0284810bd6ec00f608be31abd20dbd4b72b",
			"commitAuthorOld": "Benedikt Ritter",
			"daysBetweenCommits": 26.02,
			"commitsBetweenForRepo": 89,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,67 +1,68 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n         if (str.isEmpty()) { // LANG-941 - JDK 8 introduced an empty locale where all fields are blank\n             return new Locale(\"\", \"\");\n         }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(\"\", str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(\"\", str.substring(1, 3), str.substring(4));\n         }\n         \n         String[] split = str.split(\"_\", -1);\n         int occurrences = split.length -1;\n         switch (occurrences) {\n             case 0:\n                 if (StringUtils.isAllLowerCase(str) && (len == 2 || len == 3)) {\n                     return new Locale(str);\n                 } else {\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 }\n                 \n             case 1:\n                 if (StringUtils.isAllLowerCase(split[0]) &&\n                     (split[0].length() == 2 || split[0].length() == 3) &&\n                      split[1].length() == 2 && StringUtils.isAllUpperCase(split[1])) {\n                     return new Locale(split[0], split[1]);\n                 } else {\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 }\n \n             case 2:\n                 if (StringUtils.isAllLowerCase(split[0]) && \n                     (split[0].length() == 2 || split[0].length() == 3) &&\n                     (split[1].length() == 0 || (split[1].length() == 2 && StringUtils.isAllUpperCase(split[1]))) &&\n                      split[2].length() > 0) {\n                     return new Locale(split[0], split[1], split[2]);\n                 }\n \n+                //$FALL-THROUGH$\n             default:\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"8ea0c0284810bd6ec00f608be31abd20dbd4b72b": {
			"type": "Ybodychange",
			"commitMessage": "LANG-915: Wrong locale handling in LocaleUtils.toLocale(). Thanks to Sergio Fernández\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1557378 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2014-01-11, 5:06 AM",
			"commitName": "8ea0c0284810bd6ec00f608be31abd20dbd4b72b",
			"commitAuthor": "Benedikt Ritter",
			"commitDateOld": "2014-01-03, 2:26 AM",
			"commitNameOld": "24b6a468ae6ba138c4f4a1f4793fed4e73bf3c15",
			"commitAuthorOld": "Benedikt Ritter",
			"daysBetweenCommits": 8.11,
			"commitsBetweenForRepo": 25,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,67 +1,67 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n         if (str.isEmpty()) { // LANG-941 - JDK 8 introduced an empty locale where all fields are blank\n             return new Locale(\"\", \"\");\n         }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(\"\", str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(\"\", str.substring(1, 3), str.substring(4));\n         }\n-        final char ch1 = str.charAt(1);\n-        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        \n+        String[] split = str.split(\"_\", -1);\n+        int occurrences = split.length -1;\n+        switch (occurrences) {\n+            case 0:\n+                if (StringUtils.isAllLowerCase(str) && (len == 2 || len == 3)) {\n+                    return new Locale(str);\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                }\n+                \n+            case 1:\n+                if (StringUtils.isAllLowerCase(split[0]) &&\n+                    (split[0].length() == 2 || split[0].length() == 3) &&\n+                     split[1].length() == 2 && StringUtils.isAllUpperCase(split[1])) {\n+                    return new Locale(split[0], split[1]);\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                }\n+\n+            case 2:\n+                if (StringUtils.isAllLowerCase(split[0]) && \n+                    (split[0].length() == 2 || split[0].length() == 3) &&\n+                    (split[1].length() == 0 || (split[1].length() == 2 && StringUtils.isAllUpperCase(split[1]))) &&\n+                     split[2].length() > 0) {\n+                    return new Locale(split[0], split[1], split[2]);\n+                }\n+\n+            default:\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        if (len == 2) {\n-            return new Locale(str);\n-        }\n-        if (len < 5) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        if (str.charAt(2) != '_') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        final char ch3 = str.charAt(3);\n-        if (ch3 == '_') {\n-            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-        }\n-        final char ch4 = str.charAt(4);\n-        if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        if (len == 5) {\n-            return new Locale(str.substring(0, 2), str.substring(3, 5));\n-        }\n-        if (len < 7) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        if (str.charAt(5) != '_') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"24b6a468ae6ba138c4f4a1f4793fed4e73bf3c15": {
			"type": "Ybodychange",
			"commitMessage": "LANG-941: Test failure in LocaleUtilsTest when building with JDK 8\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1555043 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2014-01-03, 2:26 AM",
			"commitName": "24b6a468ae6ba138c4f4a1f4793fed4e73bf3c15",
			"commitAuthor": "Benedikt Ritter",
			"commitDateOld": "2014-01-03, 1:43 AM",
			"commitNameOld": "c99a4a3ee24758ae6e2271752d91b58c116e81e9",
			"commitAuthorOld": "Benedikt Ritter",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,67 +1,67 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n-        if (str.isEmpty()) {\n-            throw new IllegalArgumentException(\"Cannot create locale from empty string\");\n+        if (str.isEmpty()) { // LANG-941 - JDK 8 introduced an empty locale where all fields are blank\n+            return new Locale(\"\", \"\");\n         }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(\"\", str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(\"\", str.substring(1, 3), str.substring(4));\n         }\n         final char ch1 = str.charAt(1);\n         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         if (len == 2) {\n             return new Locale(str);\n         }\n         if (len < 5) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         if (str.charAt(2) != '_') {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch3 = str.charAt(3);\n         if (ch3 == '_') {\n             return new Locale(str.substring(0, 2), \"\", str.substring(4));\n         }\n         final char ch4 = str.charAt(4);\n         if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         if (len == 5) {\n             return new Locale(str.substring(0, 2), str.substring(3, 5));\n         }\n         if (len < 7) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         if (str.charAt(5) != '_') {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c99a4a3ee24758ae6e2271752d91b58c116e81e9": {
			"type": "Ybodychange",
			"commitMessage": "LANG-941: Test failure in LocaleUtilsTest when building with JDK 8 - make problem more explicit by checking for empty strings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1555040 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2014-01-03, 1:43 AM",
			"commitName": "c99a4a3ee24758ae6e2271752d91b58c116e81e9",
			"commitAuthor": "Benedikt Ritter",
			"commitDateOld": "2013-12-18, 1:58 PM",
			"commitNameOld": "8303f1efa3141509441c9268f292941e3b161355",
			"commitAuthorOld": "Gary D. Gregory",
			"daysBetweenCommits": 15.49,
			"commitsBetweenForRepo": 42,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,64 +1,67 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n+        if (str.isEmpty()) {\n+            throw new IllegalArgumentException(\"Cannot create locale from empty string\");\n+        }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(\"\", str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(\"\", str.substring(1, 3), str.substring(4));\n         }\n         final char ch1 = str.charAt(1);\n         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         if (len == 2) {\n             return new Locale(str);\n         }\n         if (len < 5) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         if (str.charAt(2) != '_') {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch3 = str.charAt(3);\n         if (ch3 == '_') {\n             return new Locale(str.substring(0, 2), \"\", str.substring(4));\n         }\n         final char ch4 = str.charAt(4);\n         if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         if (len == 5) {\n             return new Locale(str.substring(0, 2), str.substring(3, 5));\n         }\n         if (len < 7) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         if (str.charAt(5) != '_') {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d77fe491fd4e5bed5319379c23893d92ed7fc9da": {
			"type": "Ybodychange",
			"commitMessage": "Statement unnecessarily nested within else clause.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1489693 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2013-06-04, 8:37 PM",
			"commitName": "d77fe491fd4e5bed5319379c23893d92ed7fc9da",
			"commitAuthor": "Gary D. Gregory",
			"commitDateOld": "2013-05-30, 3:12 PM",
			"commitNameOld": "dcde57852a97a9ac8021d2440b3de5be4870ecf6",
			"commitAuthorOld": "Sebastian Bazley",
			"daysBetweenCommits": 5.23,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,65 +1,64 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n         if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(\"\", str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(\"\", str.substring(1, 3), str.substring(4));\n-        } else {\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n         }\n+        final char ch1 = str.charAt(1);\n+        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (len == 2) {\n+            return new Locale(str);\n+        }\n+        if (len < 5) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (str.charAt(2) != '_') {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        final char ch3 = str.charAt(3);\n+        if (ch3 == '_') {\n+            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n+        }\n+        final char ch4 = str.charAt(4);\n+        if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (len == 5) {\n+            return new Locale(str.substring(0, 2), str.substring(3, 5));\n+        }\n+        if (len < 7) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (str.charAt(5) != '_') {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"dcde57852a97a9ac8021d2440b3de5be4870ecf6": {
			"type": "Ybodychange",
			"commitMessage": "LANG-879 LocaleUtils test fails with new Locale \"ja_JP_JP_#u-ca-japanese\" of JDK7\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1488038 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2013-05-30, 3:12 PM",
			"commitName": "dcde57852a97a9ac8021d2440b3de5be4870ecf6",
			"commitAuthor": "Sebastian Bazley",
			"commitDateOld": "2013-01-21, 11:09 PM",
			"commitNameOld": "5292526e476ffbb19c6613a98464054236c86ace",
			"commitAuthorOld": "Gary D. Gregory",
			"daysBetweenCommits": 128.63,
			"commitsBetweenForRepo": 77,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,62 +1,65 @@\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n+        if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n         if (ch0 == '_') {\n             if (len < 3) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch1 = str.charAt(1);\n             final char ch2 = str.charAt(2);\n             if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 3) {\n                 return new Locale(\"\", str.substring(1, 3));\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(3) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(\"\", str.substring(1, 3), str.substring(4));\n         } else {\n             final char ch1 = str.charAt(1);\n             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 2) {\n                 return new Locale(str);\n             }\n             if (len < 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(2) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             final char ch3 = str.charAt(3);\n             if (ch3 == '_') {\n                 return new Locale(str.substring(0, 2), \"\", str.substring(4));\n             }\n             final char ch4 = str.charAt(4);\n             if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 5) {\n                 return new Locale(str.substring(0, 2), str.substring(3, 5));\n             }\n             if (len < 7) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (str.charAt(5) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"4d46f014fb8ee44386feb5fec52509f35d0e36ea": {
			"type": "Ymultichange(Ybodychange,Yparametermetachange)",
			"commitMessage": "[LANG-865] LocaleUtils.toLocale does not parse strings starting with an underscore.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1428174 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2013-01-02, 10:19 PM",
			"commitName": "4d46f014fb8ee44386feb5fec52509f35d0e36ea",
			"commitAuthor": "Gary D. Gregory",
			"subchanges": [
				{
					"type": "Ybodychange",
					"commitMessage": "[LANG-865] LocaleUtils.toLocale does not parse strings starting with an underscore.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1428174 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2013-01-02, 10:19 PM",
					"commitName": "4d46f014fb8ee44386feb5fec52509f35d0e36ea",
					"commitAuthor": "Gary D. Gregory",
					"commitDateOld": "2012-05-25, 7:39 AM",
					"commitNameOld": "4c2e69797f8262cc0546131352c1c5ef6dfdc985",
					"commitAuthorOld": "Sebastian Bazley",
					"daysBetweenCommits": 222.65,
					"commitsBetweenForRepo": 160,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,37 +1,62 @@\n-    public static Locale toLocale(String str) {\n+    public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n-        int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n+        final int len = str.length();\n+        if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        char ch0 = str.charAt(0);\n-        char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        if (len == 2) {\n-            return new Locale(str, \"\");\n+        final char ch0 = str.charAt(0);\n+        if (ch0 == '_') {\n+            if (len < 3) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            final char ch1 = str.charAt(1);\n+            final char ch2 = str.charAt(2);\n+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (len == 3) {\n+                return new Locale(\"\", str.substring(1, 3));\n+            }\n+            if (len < 5) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (str.charAt(3) != '_') {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n         } else {\n+            final char ch1 = str.charAt(1);\n+            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (len == 2) {\n+                return new Locale(str);\n+            }\n+            if (len < 5) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n             if (str.charAt(2) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            char ch3 = str.charAt(3);\n+            final char ch3 = str.charAt(3);\n             if (ch3 == '_') {\n                 return new Locale(str.substring(0, 2), \"\", str.substring(4));\n             }\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n+            final char ch4 = str.charAt(4);\n+            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 5) {\n                 return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            } else {\n-                if (str.charAt(5) != '_') {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-                }\n-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n             }\n+            if (len < 7) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (str.charAt(5) != '_') {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n         }\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {}
				},
				{
					"type": "Yparametermetachange",
					"commitMessage": "[LANG-865] LocaleUtils.toLocale does not parse strings starting with an underscore.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1428174 13f79535-47bb-0310-9956-ffa450edef68\n",
					"commitDate": "2013-01-02, 10:19 PM",
					"commitName": "4d46f014fb8ee44386feb5fec52509f35d0e36ea",
					"commitAuthor": "Gary D. Gregory",
					"commitDateOld": "2012-05-25, 7:39 AM",
					"commitNameOld": "4c2e69797f8262cc0546131352c1c5ef6dfdc985",
					"commitAuthorOld": "Sebastian Bazley",
					"daysBetweenCommits": 222.65,
					"commitsBetweenForRepo": 160,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,37 +1,62 @@\n-    public static Locale toLocale(String str) {\n+    public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n-        int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n+        final int len = str.length();\n+        if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        char ch0 = str.charAt(0);\n-        char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        if (len == 2) {\n-            return new Locale(str, \"\");\n+        final char ch0 = str.charAt(0);\n+        if (ch0 == '_') {\n+            if (len < 3) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            final char ch1 = str.charAt(1);\n+            final char ch2 = str.charAt(2);\n+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (len == 3) {\n+                return new Locale(\"\", str.substring(1, 3));\n+            }\n+            if (len < 5) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (str.charAt(3) != '_') {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n         } else {\n+            final char ch1 = str.charAt(1);\n+            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (len == 2) {\n+                return new Locale(str);\n+            }\n+            if (len < 5) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n             if (str.charAt(2) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            char ch3 = str.charAt(3);\n+            final char ch3 = str.charAt(3);\n             if (ch3 == '_') {\n                 return new Locale(str.substring(0, 2), \"\", str.substring(4));\n             }\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n+            final char ch4 = str.charAt(4);\n+            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 5) {\n                 return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            } else {\n-                if (str.charAt(5) != '_') {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-                }\n-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n             }\n+            if (len < 7) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (str.charAt(5) != '_') {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n         }\n     }\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[str-String]",
						"newValue": "[str-String(modifiers-final)]"
					}
				}
			]
		},
		"fc5c081e22a61bb5a6810af302be3f22f7966df4": {
			"type": "Yfilerename",
			"commitMessage": "Move main source to src/main/java\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@895322 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2010-01-02, 6:11 PM",
			"commitName": "fc5c081e22a61bb5a6810af302be3f22f7966df4",
			"commitAuthor": "Paul C. Benedict Jr",
			"commitDateOld": "2010-01-02, 6:09 PM",
			"commitNameOld": "6b32246f5f9f77c74b32a5290cdbdd4e0f5c71c6",
			"commitAuthorOld": "Paul C. Benedict Jr",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/java/org/apache/commons/lang3/LocaleUtils.java",
				"newPath": "src/main/java/org/apache/commons/lang3/LocaleUtils.java"
			}
		},
		"debc02c6d9b94c717b4182ae4dd7a97d47293a52": {
			"type": "Yfilerename",
			"commitMessage": "Changing directory name from lang to lang3. Build will fail (probably) until Java code is changed in subsequent commit. LANG-563\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@889202 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2009-12-10, 3:33 AM",
			"commitName": "debc02c6d9b94c717b4182ae4dd7a97d47293a52",
			"commitAuthor": "Henri Yandell",
			"commitDateOld": "2009-12-10, 3:31 AM",
			"commitNameOld": "375d7d0954cae60c4c7292cc65abbc972178857c",
			"commitAuthorOld": "Henri Yandell",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/java/org/apache/commons/lang/LocaleUtils.java",
				"newPath": "src/java/org/apache/commons/lang3/LocaleUtils.java"
			}
		},
		"75d931a3264b73caa9cdd7d3373375cc33008ddf": {
			"type": "Ybodychange",
			"commitMessage": "Applying unit test/fix for LANG-328\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@534277 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2007-05-01, 4:50 PM",
			"commitName": "75d931a3264b73caa9cdd7d3373375cc33008ddf",
			"commitAuthor": "Henri Yandell",
			"commitDateOld": "2006-12-22, 12:34 PM",
			"commitNameOld": "cf20d13c64da51becd1351befe02a06144fd6fc1",
			"commitAuthorOld": "Henri Yandell",
			"daysBetweenCommits": 130.14,
			"commitsBetweenForRepo": 86,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,34 +1,37 @@\n     public static Locale toLocale(String str) {\n         if (str == null) {\n             return null;\n         }\n         int len = str.length();\n         if (len != 2 && len != 5 && len < 7) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         char ch0 = str.charAt(0);\n         char ch1 = str.charAt(1);\n         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         if (len == 2) {\n             return new Locale(str, \"\");\n         } else {\n             if (str.charAt(2) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             char ch3 = str.charAt(3);\n+            if (ch3 == '_') {\n+                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n+            }\n             char ch4 = str.charAt(4);\n             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             if (len == 5) {\n                 return new Locale(str.substring(0, 2), str.substring(3, 5));\n             } else {\n                 if (str.charAt(5) != '_') {\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 }\n                 return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n             }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d1f5ebf4122aaf0675ef5547c2a6733f52a892d4": {
			"type": "Ybodychange",
			"commitMessage": "Test LocaleUtils\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@291219 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2005-09-23, 4:17 PM",
			"commitName": "d1f5ebf4122aaf0675ef5547c2a6733f52a892d4",
			"commitAuthor": "Stephen Colebourne",
			"commitDateOld": "2005-08-21, 12:32 PM",
			"commitNameOld": "3196dafff093c126f8fd26729334d935fe08a5e1",
			"commitAuthorOld": "Gary D. Gregory",
			"daysBetweenCommits": 33.16,
			"commitsBetweenForRepo": 41,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,27 +1,34 @@\n     public static Locale toLocale(String str) {\n         if (str == null) {\n             return null;\n         }\n-        if (str.length() != 2 &&\n-            str.length() != 5 &&\n-            str.length() < 7) {\n+        int len = str.length();\n+        if (len != 2 && len != 5 && len < 7) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        if (Character.isLowerCase(str.charAt(0)) == false ||\n-            Character.isLowerCase(str.charAt(1)) == false) {\n+        char ch0 = str.charAt(0);\n+        char ch1 = str.charAt(1);\n+        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        if (str.length() == 2) {\n+        if (len == 2) {\n             return new Locale(str, \"\");\n         } else {\n-            if (Character.isUpperCase(str.charAt(3)) == false ||\n-                Character.isUpperCase(str.charAt(4)) == false) {\n+            if (str.charAt(2) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            if (str.length() == 5) {\n+            char ch3 = str.charAt(3);\n+            char ch4 = str.charAt(4);\n+            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (len == 5) {\n                 return new Locale(str.substring(0, 2), str.substring(3, 5));\n             } else {\n+                if (str.charAt(5) != '_') {\n+                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                }\n                 return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n             }\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"04e1537d3c41646fdb56b60fae70a630ae177796": {
			"type": "Yintroduced",
			"commitMessage": "Initial version of LocaleUtils for review of concept\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@233061 13f79535-47bb-0310-9956-ffa450edef68\n",
			"commitDate": "2005-08-16, 2:41 PM",
			"commitName": "04e1537d3c41646fdb56b60fae70a630ae177796",
			"commitAuthor": "Stephen Colebourne",
			"diff": "@@ -0,0 +1,27 @@\n+    public static Locale toLocale(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        if (str.length() != 2 &&\n+            str.length() != 5 &&\n+            str.length() < 7) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (Character.isLowerCase(str.charAt(0)) == false ||\n+            Character.isLowerCase(str.charAt(1)) == false) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (str.length() == 2) {\n+            return new Locale(str, \"\");\n+        } else {\n+            if (Character.isUpperCase(str.charAt(3)) == false ||\n+                Character.isUpperCase(str.charAt(4)) == false) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (str.length() == 5) {\n+                return new Locale(str.substring(0, 2), str.substring(3, 5));\n+            } else {\n+                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+            }\n+        }\n+    }\n\\ No newline at end of file\n"
		}
	},
	"sha": "a36c903d4f1065bc59f5e6d2bb0f9d92a5e71d83"
}