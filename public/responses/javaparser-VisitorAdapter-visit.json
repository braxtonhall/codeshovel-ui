{
	"repo": "https://github.com/javaparser/javaparser.git",
	"file": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
	"method": {
		"longName": "VoidVisitorAdapter::visit(MethodDeclaration n, A arg)",
		"startLine": 409,
		"methodName": "visit",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "public"
	},
	"history": {
		"13dacb72ff79db384dd5a93b769d36957911ebc7": {
			"type": "Ybodychange",
			"commitMessage": "Run core generators\n",
			"commitDate": "2017-11-04, 6:42 PM",
			"commitName": "13dacb72ff79db384dd5a93b769d36957911ebc7",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2017-10-17, 11:57 AM",
			"commitNameOld": "27a1a23d96cf8a1d4b34cdd28f10730d517673e2",
			"commitAuthorOld": "Danny van Bruggen",
			"daysBetweenCommits": 18.28,
			"commitsBetweenForRepo": 33,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,11 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         n.getBody().ifPresent(l -> l.accept(this, arg));\n-        n.getReceiverParameter().ifPresent(l -> l.accept(this, arg));\n         n.getType().accept(this, arg);\n         n.getName().accept(this, arg);\n         n.getParameters().forEach(p -> p.accept(this, arg));\n+        n.getReceiverParameter().ifPresent(l -> l.accept(this, arg));\n         n.getThrownExceptions().forEach(p -> p.accept(this, arg));\n         n.getTypeParameters().forEach(p -> p.accept(this, arg));\n         n.getAnnotations().forEach(p -> p.accept(this, arg));\n         n.getComment().ifPresent(l -> l.accept(this, arg));\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"27a1a23d96cf8a1d4b34cdd28f10730d517673e2": {
			"type": "Ybodychange",
			"commitMessage": "Put receiver parameter only in method declarations\n",
			"commitDate": "2017-10-17, 11:57 AM",
			"commitName": "27a1a23d96cf8a1d4b34cdd28f10730d517673e2",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2017-10-16, 4:54 PM",
			"commitNameOld": "255d26470311d9624b12bac2301d589fa2eefb99",
			"commitAuthorOld": "Danny van Bruggen",
			"daysBetweenCommits": 0.79,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,11 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         n.getBody().ifPresent(l -> l.accept(this, arg));\n+        n.getReceiverParameter().ifPresent(l -> l.accept(this, arg));\n         n.getType().accept(this, arg);\n         n.getName().accept(this, arg);\n         n.getParameters().forEach(p -> p.accept(this, arg));\n-        n.getReceiverParameter().ifPresent(l -> l.accept(this, arg));\n         n.getThrownExceptions().forEach(p -> p.accept(this, arg));\n         n.getTypeParameters().forEach(p -> p.accept(this, arg));\n         n.getAnnotations().forEach(p -> p.accept(this, arg));\n         n.getComment().ifPresent(l -> l.accept(this, arg));\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"255d26470311d9624b12bac2301d589fa2eefb99": {
			"type": "Ybodychange",
			"commitMessage": "Regenerate code\n",
			"commitDate": "2017-10-16, 4:54 PM",
			"commitName": "255d26470311d9624b12bac2301d589fa2eefb99",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2017-08-15, 1:58 PM",
			"commitNameOld": "c6e5c0162a5c693e08b7e112bf74e3514a585238",
			"commitAuthorOld": "Danny van Bruggen",
			"daysBetweenCommits": 62.12,
			"commitsBetweenForRepo": 181,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,11 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         n.getBody().ifPresent(l -> l.accept(this, arg));\n         n.getType().accept(this, arg);\n         n.getName().accept(this, arg);\n         n.getParameters().forEach(p -> p.accept(this, arg));\n+        n.getReceiverParameter().ifPresent(l -> l.accept(this, arg));\n         n.getThrownExceptions().forEach(p -> p.accept(this, arg));\n         n.getTypeParameters().forEach(p -> p.accept(this, arg));\n         n.getAnnotations().forEach(p -> p.accept(this, arg));\n         n.getComment().ifPresent(l -> l.accept(this, arg));\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"6084184a80dcf7651411157cc0f40fa4b7e750eb": {
			"type": "Ybodychange",
			"commitMessage": "Struggle with CallableDeclaration merge\n",
			"commitDate": "2017-02-07, 1:41 PM",
			"commitName": "6084184a80dcf7651411157cc0f40fa4b7e750eb",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2017-01-27, 1:57 PM",
			"commitNameOld": "b2ec99c5db4346ca336247d1396461d825a3bd15",
			"commitAuthorOld": "Danny van Bruggen",
			"daysBetweenCommits": 10.99,
			"commitsBetweenForRepo": 67,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,10 +1,10 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         n.getBody().ifPresent( l -> l.accept(this, arg));\n+        n.getType().accept(this, arg);\n         n.getName().accept(this, arg);\n         n.getParameters().forEach( p -> p.accept(this, arg));\n         n.getThrownExceptions().forEach( p -> p.accept(this, arg));\n-        n.getType().accept(this, arg);\n         n.getTypeParameters().forEach( p -> p.accept(this, arg));\n         n.getAnnotations().forEach( p -> p.accept(this, arg));\n         n.getComment().ifPresent( l -> l.accept(this, arg));\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f70eef166e4afd92471079a75ba5828049fca500": {
			"type": "Ybodychange",
			"commitMessage": "Generate VoidVisitorAdapter\n",
			"commitDate": "2017-01-27, 1:43 PM",
			"commitName": "f70eef166e4afd92471079a75ba5828049fca500",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2017-01-21, 4:23 PM",
			"commitNameOld": "764aa68aee62304b40b7d09903b492e240d637b2",
			"commitAuthorOld": "Danny van Bruggen",
			"daysBetweenCommits": 5.89,
			"commitsBetweenForRepo": 7,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,10 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n-        visitComment(n.getComment(), arg);\n-        visitAnnotations(n, arg);\n-        if (n.getTypeParameters() != null) {\n-            for (final TypeParameter t : n.getTypeParameters()) {\n-                t.accept(this, arg);\n-            }\n-        }\n-        n.getType().accept(this, arg);\n+        n.getBody().ifPresent( l -> l.accept(this, arg));\n         n.getName().accept(this, arg);\n-        if (n.getParameters() != null) {\n-            for (final Parameter p : n.getParameters()) {\n-                p.accept(this, arg);\n-            }\n-        }\n-        if (n.getThrownExceptions() != null) {\n-            for (final ReferenceType name : n.getThrownExceptions()) {\n-                name.accept(this, arg);\n-            }\n-        }\n-        if (n.getBody().isPresent()) {\n-            n.getBody().get().accept(this, arg);\n-        }\n+        n.getParameters().forEach( p -> p.accept(this, arg));\n+        n.getThrownExceptions().forEach( p -> p.accept(this, arg));\n+        n.getType().accept(this, arg);\n+        n.getTypeParameters().forEach( p -> p.accept(this, arg));\n+        n.getAnnotations().forEach( p -> p.accept(this, arg));\n+        n.getComment().ifPresent( l -> l.accept(this, arg));\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a8f6c6d62fcbdc3506f19f11a7b89307cbf4c515": {
			"type": "Ybodychange",
			"commitMessage": "Get rid of infuriating useless <?> on Type\n",
			"commitDate": "2016-12-15, 2:58 AM",
			"commitName": "a8f6c6d62fcbdc3506f19f11a7b89307cbf4c515",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2016-12-10, 6:09 AM",
			"commitNameOld": "0b43f836abee5fcdb15adbcff4619f76780b74ac",
			"commitAuthorOld": "Danny van Bruggen",
			"daysBetweenCommits": 4.87,
			"commitsBetweenForRepo": 22,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         visitComment(n.getComment(), arg);\n         visitAnnotations(n, arg);\n         if (n.getTypeParameters() != null) {\n             for (final TypeParameter t : n.getTypeParameters()) {\n                 t.accept(this, arg);\n             }\n         }\n         n.getType().accept(this, arg);\n         n.getName().accept(this, arg);\n         if (n.getParameters() != null) {\n             for (final Parameter p : n.getParameters()) {\n                 p.accept(this, arg);\n             }\n         }\n         if (n.getThrownExceptions() != null) {\n-            for (final ReferenceType<?> name : n.getThrownExceptions()) {\n+            for (final ReferenceType name : n.getThrownExceptions()) {\n                 name.accept(this, arg);\n             }\n         }\n         if (n.getBody().isPresent()) {\n             n.getBody().get().accept(this, arg);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"d7828ee5f27be2f10dda026372898126aeae24b7": {
			"type": "Ybodychange",
			"commitMessage": "Well on my way to remove bracket info everywhere\n",
			"commitDate": "2016-12-06, 3:19 PM",
			"commitName": "d7828ee5f27be2f10dda026372898126aeae24b7",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2016-11-30, 2:53 PM",
			"commitNameOld": "694464c8e552a3960707dbd58965866989e02a2b",
			"commitAuthorOld": "Danny van Bruggen",
			"daysBetweenCommits": 6.02,
			"commitsBetweenForRepo": 13,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         visitComment(n.getComment(), arg);\n         visitAnnotations(n, arg);\n         if (n.getTypeParameters() != null) {\n             for (final TypeParameter t : n.getTypeParameters()) {\n                 t.accept(this, arg);\n             }\n         }\n-        n.getElementType().accept(this, arg);\n+        n.getType().accept(this, arg);\n         n.getName().accept(this, arg);\n         if (n.getParameters() != null) {\n             for (final Parameter p : n.getParameters()) {\n                 p.accept(this, arg);\n             }\n         }\n         if (n.getThrownExceptions() != null) {\n             for (final ReferenceType<?> name : n.getThrownExceptions()) {\n                 name.accept(this, arg);\n             }\n         }\n         if (n.getBody().isPresent()) {\n             n.getBody().get().accept(this, arg);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"e394062ae2f12c47b357c59884113862c82a21fb": {
			"type": "Ybodychange",
			"commitMessage": "Feedback from github\n",
			"commitDate": "2016-11-28, 3:29 PM",
			"commitName": "e394062ae2f12c47b357c59884113862c82a21fb",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2016-11-28, 1:09 PM",
			"commitNameOld": "69c6a76c1b3b7936f35e64f61702a91b2a7b0a57",
			"commitAuthorOld": "Danny van Bruggen",
			"daysBetweenCommits": 0.1,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         visitComment(n.getComment(), arg);\n         visitAnnotations(n, arg);\n         if (n.getTypeParameters() != null) {\n             for (final TypeParameter t : n.getTypeParameters()) {\n                 t.accept(this, arg);\n             }\n         }\n         n.getElementType().accept(this, arg);\n         n.getName().accept(this, arg);\n         if (n.getParameters() != null) {\n             for (final Parameter p : n.getParameters()) {\n                 p.accept(this, arg);\n             }\n         }\n-        if (n.getThrownTypes() != null) {\n-            for (final ReferenceType<?> name : n.getThrownTypes()) {\n+        if (n.getThrownExceptions() != null) {\n+            for (final ReferenceType<?> name : n.getThrownExceptions()) {\n                 name.accept(this, arg);\n             }\n         }\n         if (n.getBody().isPresent()) {\n             n.getBody().get().accept(this, arg);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"69c6a76c1b3b7936f35e64f61702a91b2a7b0a57": {
			"type": "Ybodychange",
			"commitMessage": "Make a first attempt at better naming\n",
			"commitDate": "2016-11-28, 1:09 PM",
			"commitName": "69c6a76c1b3b7936f35e64f61702a91b2a7b0a57",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2016-11-10, 1:59 PM",
			"commitNameOld": "008b82d149685d6702a060fbecafc8fc2e10b459",
			"commitAuthorOld": "Cruz Maximilien",
			"daysBetweenCommits": 17.97,
			"commitsBetweenForRepo": 72,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         visitComment(n.getComment(), arg);\n         visitAnnotations(n, arg);\n         if (n.getTypeParameters() != null) {\n             for (final TypeParameter t : n.getTypeParameters()) {\n                 t.accept(this, arg);\n             }\n         }\n         n.getElementType().accept(this, arg);\n         n.getName().accept(this, arg);\n         if (n.getParameters() != null) {\n             for (final Parameter p : n.getParameters()) {\n                 p.accept(this, arg);\n             }\n         }\n-        if (n.getThrows() != null) {\n-            for (final ReferenceType<?> name : n.getThrows()) {\n+        if (n.getThrownTypes() != null) {\n+            for (final ReferenceType<?> name : n.getThrownTypes()) {\n                 name.accept(this, arg);\n             }\n         }\n         if (n.getBody().isPresent()) {\n             n.getBody().get().accept(this, arg);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"008b82d149685d6702a060fbecafc8fc2e10b459": {
			"type": "Ybodychange",
			"commitMessage": "#516 some optionals (#536)\n\n* #516 some optionals",
			"commitDate": "2016-11-10, 1:59 PM",
			"commitName": "008b82d149685d6702a060fbecafc8fc2e10b459",
			"commitAuthor": "Cruz Maximilien",
			"commitDateOld": "2016-11-10, 2:33 AM",
			"commitNameOld": "02b3c5e03c44a9373c3a9d323c3425bdffade688",
			"commitAuthorOld": "Danny van Bruggen",
			"daysBetweenCommits": 0.48,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n-\t@Override public void visit(final MethodDeclaration n, final A arg) {\n-\t\tvisitComment(n.getComment(), arg);\n-\t\tvisitAnnotations(n, arg);\n-\t\tif (n.getTypeParameters() != null) {\n-\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n-\t\t\t\tt.accept(this, arg);\n-\t\t\t}\n-\t\t}\n-\t\tn.getElementType().accept(this, arg);\n-\t\tn.getName().accept(this, arg);\n-\t\tif (n.getParameters() != null) {\n-\t\t\tfor (final Parameter p : n.getParameters()) {\n-\t\t\t\tp.accept(this, arg);\n-\t\t\t}\n-\t\t}\n-\t\tif (n.getThrows() != null) {\n-\t\t\tfor (final ReferenceType name : n.getThrows()) {\n-\t\t\t\tname.accept(this, arg);\n-\t\t\t}\n-\t\t}\n-\t\tif (n.getBody() != null) {\n-\t\t\tn.getBody().accept(this, arg);\n-\t\t}\n-\t}\n\\ No newline at end of file\n+    public void visit(final MethodDeclaration n, final A arg) {\n+        visitComment(n.getComment(), arg);\n+        visitAnnotations(n, arg);\n+        if (n.getTypeParameters() != null) {\n+            for (final TypeParameter t : n.getTypeParameters()) {\n+                t.accept(this, arg);\n+            }\n+        }\n+        n.getElementType().accept(this, arg);\n+        n.getName().accept(this, arg);\n+        if (n.getParameters() != null) {\n+            for (final Parameter p : n.getParameters()) {\n+                p.accept(this, arg);\n+            }\n+        }\n+        if (n.getThrows() != null) {\n+            for (final ReferenceType<?> name : n.getThrows()) {\n+                name.accept(this, arg);\n+            }\n+        }\n+        if (n.getBody().isPresent()) {\n+            n.getBody().get().accept(this, arg);\n+        }\n+    }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"02b3c5e03c44a9373c3a9d323c3425bdffade688": {
			"type": "Ybodychange",
			"commitMessage": "Fix naming (#549)\n\nFixes #358 and #403.",
			"commitDate": "2016-11-10, 2:33 AM",
			"commitName": "02b3c5e03c44a9373c3a9d323c3425bdffade688",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2016-10-26, 10:57 AM",
			"commitNameOld": "9f1113b029cf7fcb6f468a85a7eae0e894415a4d",
			"commitAuthorOld": "matozoid",
			"daysBetweenCommits": 14.69,
			"commitsBetweenForRepo": 21,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tvisitAnnotations(n, arg);\n \t\tif (n.getTypeParameters() != null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getElementType().accept(this, arg);\n-\t\tn.getNameExpr().accept(this, arg);\n+\t\tn.getName().accept(this, arg);\n \t\tif (n.getParameters() != null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() != null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getBody() != null) {\n \t\t\tn.getBody().accept(this, arg);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9f1113b029cf7fcb6f468a85a7eae0e894415a4d": {
			"type": "Ybodychange",
			"commitMessage": "Roll back Optional usage, awaiting #516\n",
			"commitDate": "2016-10-26, 10:57 AM",
			"commitName": "9f1113b029cf7fcb6f468a85a7eae0e894415a4d",
			"commitAuthor": "matozoid",
			"commitDateOld": "2016-10-16, 1:56 PM",
			"commitNameOld": "515a9392928c14a60dc9dfa42a98198a4d877534",
			"commitAuthorOld": "Danny van Bruggen",
			"daysBetweenCommits": 9.88,
			"commitsBetweenForRepo": 9,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,22 +1,24 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tvisitAnnotations(n, arg);\n \t\tif (n.getTypeParameters() != null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getElementType().accept(this, arg);\n \t\tn.getNameExpr().accept(this, arg);\n \t\tif (n.getParameters() != null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() != null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n-        n.getBody().ifPresent(b -> b.accept(this, arg));\n+\t\tif (n.getBody() != null) {\n+\t\t\tn.getBody().accept(this, arg);\n+\t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"515a9392928c14a60dc9dfa42a98198a4d877534": {
			"type": "Ybodychange",
			"commitMessage": "Issue 421 parenting of collections (#501)\n\n* Migrate from List to NodeList\r\n* Disallow usage of null in the AST\r\n* Use Optional where fields are optional (previously nullable)\r\n",
			"commitDate": "2016-10-16, 1:56 PM",
			"commitName": "515a9392928c14a60dc9dfa42a98198a4d877534",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2016-10-08, 11:45 AM",
			"commitNameOld": "731c46d3bd61cc1e3e4733570dd80ab00cd63c87",
			"commitAuthorOld": "Danny van Bruggen",
			"daysBetweenCommits": 8.09,
			"commitsBetweenForRepo": 6,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,22 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tvisitAnnotations(n, arg);\n \t\tif (n.getTypeParameters() != null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getElementType().accept(this, arg);\n \t\tn.getNameExpr().accept(this, arg);\n \t\tif (n.getParameters() != null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() != null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n-\t\tif (n.getBody() != null) {\n-\t\t\tn.getBody().accept(this, arg);\n-\t\t}\n+        n.getBody().ifPresent(b -> b.accept(this, arg));\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"95245a501059ef998be5052adb5930d744533731": {
			"type": "Ybodychange",
			"commitMessage": "Issue 237 arraytype (#459)\n\n* Change from \"type.arrayinfo\" to \"ArrayType(info, ArrayType(info, type))\r\n* Make ReferenceType just a base class for the actual reference types: ArrayType and ClassOrInterfaceType\r\n* Make TypeParameter a ReferenceType as suggested by ptitjes\r\n* Add ArrayBracketPair class\r\n* Add getElementType and remove getType where required\r\n* Use EOL constant for end of line\r\n",
			"commitDate": "2016-09-30, 5:57 AM",
			"commitName": "95245a501059ef998be5052adb5930d744533731",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2016-09-04, 1:35 PM",
			"commitNameOld": "a9080cf8b1b3d6b3bdf1f3a6e68b044ffc035153",
			"commitAuthorOld": "Danny van Bruggen",
			"daysBetweenCommits": 25.68,
			"commitsBetweenForRepo": 6,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,24 +1,24 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tvisitAnnotations(n, arg);\n \t\tif (n.getTypeParameters() != null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n-\t\tn.getType().accept(this, arg);\n+\t\tn.getElementType().accept(this, arg);\n \t\tn.getNameExpr().accept(this, arg);\n \t\tif (n.getParameters() != null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() != null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getBody() != null) {\n \t\t\tn.getBody().accept(this, arg);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ea6d17cb087d5b7b0b0a8a2ad4dad35fce4ae144": {
			"type": "Ybodychange",
			"commitMessage": "Visitor improvements (#444)\n\n* Visit comments everywhere\r\n* Implement lambda portion of the visitors",
			"commitDate": "2016-09-04, 12:44 PM",
			"commitName": "ea6d17cb087d5b7b0b0a8a2ad4dad35fce4ae144",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2016-09-04, 12:17 PM",
			"commitNameOld": "bb5ff94cff01665ddf58e3ca9a1369492340fe4b",
			"commitAuthorOld": "Danny van Bruggen",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,27 +1,24 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n-\t\tif (n.getJavaDoc() != null) {\n-\t\t\tn.getJavaDoc().accept(this, arg);\n-\t\t}\n \t\tvisitAnnotations(n, arg);\n \t\tif (n.getTypeParameters() != null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getType().accept(this, arg);\n \t\tn.getNameExpr().accept(this, arg);\n \t\tif (n.getParameters() != null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() != null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getBody() != null) {\n \t\t\tn.getBody().accept(this, arg);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"bb5ff94cff01665ddf58e3ca9a1369492340fe4b": {
			"type": "Ybodychange",
			"commitMessage": "Issue 430 clean up annotation handling (#440)\n\n* Add missing scenario line\r\n* Give PrimitiveType a \"complete constructor\" with all fields\r\n* Finish fixing annotations in CloneVisitor\r\n* Move wiki samples out of the main junit dir\r\n* Fix DumpVisitor\r\n* Fix annotations for EqualsVisitor\r\n* Fix annotations for GenericVisitorAdapter\r\n* Fix annotations for ModifierVisitorAdapter\r\n* Let PackageDeclaration use the NodeWithAnnotations interface too\r\n* Visit annotations everywhere\r\n* Visit array index annotations everywhere",
			"commitDate": "2016-09-04, 12:17 PM",
			"commitName": "bb5ff94cff01665ddf58e3ca9a1369492340fe4b",
			"commitAuthor": "Danny van Bruggen",
			"commitDateOld": "2016-08-19, 1:39 PM",
			"commitNameOld": "9985c47e3b2a6ce9b434e787a2a035e2a7aadb4a",
			"commitAuthorOld": "matozoid",
			"daysBetweenCommits": 15.94,
			"commitsBetweenForRepo": 33,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,31 +1,27 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tif (n.getJavaDoc() != null) {\n \t\t\tn.getJavaDoc().accept(this, arg);\n \t\t}\n-\t\tif (n.getAnnotations() != null) {\n-\t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n-\t\t\t\ta.accept(this, arg);\n-\t\t\t}\n-\t\t}\n+\t\tvisitAnnotations(n, arg);\n \t\tif (n.getTypeParameters() != null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getType().accept(this, arg);\n \t\tn.getNameExpr().accept(this, arg);\n \t\tif (n.getParameters() != null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() != null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getBody() != null) {\n \t\t\tn.getBody().accept(this, arg);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ef5f06ebff5e0beeb05f611a5f107452afb51457": {
			"type": "Ybodychange",
			"commitMessage": "Visit child NameExprs\n",
			"commitDate": "2016-04-13, 1:17 AM",
			"commitName": "ef5f06ebff5e0beeb05f611a5f107452afb51457",
			"commitAuthor": "James Clause",
			"commitDateOld": "2016-04-07, 10:53 AM",
			"commitNameOld": "be7603e190dfbbb7e4985b5d0ff560fc979dbdc6",
			"commitAuthorOld": "JaviRpo",
			"daysBetweenCommits": 5.6,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,30 +1,31 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tif (n.getJavaDoc() != null) {\n \t\t\tn.getJavaDoc().accept(this, arg);\n \t\t}\n \t\tif (n.getAnnotations() != null) {\n \t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n \t\t\t\ta.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getTypeParameters() != null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getType().accept(this, arg);\n+\t\tn.getNameExpr().accept(this, arg);\n \t\tif (n.getParameters() != null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() != null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getBody() != null) {\n \t\t\tn.getBody().accept(this, arg);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"55af70e70d0124b8319f3e1d1809fafbebc68e7d": {
			"type": "Ybodychange",
			"commitMessage": "adapt all the codebase to the change of type of MethodDeclaration.throws\n",
			"commitDate": "2015-11-30, 2:04 AM",
			"commitName": "55af70e70d0124b8319f3e1d1809fafbebc68e7d",
			"commitAuthor": "Federico Tomassetti",
			"commitDateOld": "2015-11-30, 1:09 AM",
			"commitNameOld": "97a48fb7ea63b76ec41420a91c5b697ffeb82504",
			"commitAuthorOld": "Federico Tomassetti",
			"daysBetweenCommits": 0.04,
			"commitsBetweenForRepo": 4,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,30 +1,30 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tif (n.getJavaDoc() != null) {\n \t\t\tn.getJavaDoc().accept(this, arg);\n \t\t}\n \t\tif (n.getAnnotations() != null) {\n \t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n \t\t\t\ta.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getTypeParameters() != null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getType().accept(this, arg);\n \t\tif (n.getParameters() != null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() != null) {\n-\t\t\tfor (final NameExpr name : n.getThrows()) {\n+\t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getBody() != null) {\n \t\t\tn.getBody().accept(this, arg);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"df6c84c0a13f505da7fd0f64626fb5d18fd49619": {
			"type": "Yfilerename",
			"commitMessage": "#74 Change package name and maven co-ordinates\n",
			"commitDate": "2014-12-10, 7:37 AM",
			"commitName": "df6c84c0a13f505da7fd0f64626fb5d18fd49619",
			"commitAuthor": "Nicholas Smith",
			"commitDateOld": "2014-11-28, 7:49 AM",
			"commitNameOld": "7cb02747c0e6d0a701b5cdb7ecd22c05e00f6da4",
			"commitAuthorOld": "Nicholas Smith",
			"daysBetweenCommits": 11.99,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "javaparser-core/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
				"newPath": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java"
			}
		},
		"c992b2206b0882195e8cc68ae9d55c43ec015111": {
			"type": "Yfilerename",
			"commitMessage": "#71 use ratified module names\n",
			"commitDate": "2014-11-26, 7:29 AM",
			"commitName": "c992b2206b0882195e8cc68ae9d55c43ec015111",
			"commitAuthor": "Nicholas Smith",
			"commitDateOld": "2014-11-26, 4:35 AM",
			"commitNameOld": "614a666fc0f7649c7053d22d9da1ae7864d0bf80",
			"commitAuthorOld": "Nicholas Smith",
			"daysBetweenCommits": 0.12,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "japa/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
				"newPath": "javaparser-core/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java"
			}
		},
		"0bf897c19251e2d4ada7611e47176fbbef1750ad": {
			"type": "Yfilerename",
			"commitMessage": "Revised prototype #71\n",
			"commitDate": "2014-10-01, 3:31 AM",
			"commitName": "0bf897c19251e2d4ada7611e47176fbbef1750ad",
			"commitAuthor": "Nicholas Smith",
			"commitDateOld": "2014-09-24, 6:23 AM",
			"commitNameOld": "13430511004f1deead30b60a4fbd3c538081d5e9",
			"commitAuthorOld": "Nicholas Smith",
			"daysBetweenCommits": 6.88,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
				"newPath": "japa/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java"
			}
		},
		"40dc8d37c07dc624780d215bd1ff3e00878fe9c5": {
			"type": "Ymultichange(Ybodychange,Yparametermetachange)",
			"commitMessage": "* Remove lots of non-utf8 characters from source\n* Add Reader support to JavaParser\n",
			"commitDate": "2011-10-31, 2:55 PM",
			"commitName": "40dc8d37c07dc624780d215bd1ff3e00878fe9c5",
			"commitAuthor": "matozoid",
			"subchanges": [
				{
					"type": "Ybodychange",
					"commitMessage": "* Remove lots of non-utf8 characters from source\n* Add Reader support to JavaParser\n",
					"commitDate": "2011-10-31, 2:55 PM",
					"commitName": "40dc8d37c07dc624780d215bd1ff3e00878fe9c5",
					"commitAuthor": "matozoid",
					"commitDateOld": "2011-10-30, 12:55 PM",
					"commitNameOld": "5202f0f5f664b45b792d4910882cec2580e9045c",
					"commitAuthorOld": "matozoid",
					"daysBetweenCommits": 1.08,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,30 +1,30 @@\n-    @Override public void visit(MethodDeclaration n, A arg) {\n-    \tvisitComment(n.getComment(), arg);\n-        if (n.getJavaDoc() != null) {\n-            n.getJavaDoc().accept(this, arg);\n-        }\n-        if (n.getAnnotations() != null) {\n-            for (AnnotationExpr a : n.getAnnotations()) {\n-                a.accept(this, arg);\n-            }\n-        }\n-        if (n.getTypeParameters() != null) {\n-            for (TypeParameter t : n.getTypeParameters()) {\n-                t.accept(this, arg);\n-            }\n-        }\n-        n.getType().accept(this, arg);\n-        if (n.getParameters() != null) {\n-            for (Parameter p : n.getParameters()) {\n-                p.accept(this, arg);\n-            }\n-        }\n-        if (n.getThrows() != null) {\n-            for (NameExpr name : n.getThrows()) {\n-                name.accept(this, arg);\n-            }\n-        }\n-        if (n.getBody() != null) {\n-            n.getBody().accept(this, arg);\n-        }\n-    }\n\\ No newline at end of file\n+\t@Override public void visit(final MethodDeclaration n, final A arg) {\n+\t\tvisitComment(n.getComment(), arg);\n+\t\tif (n.getJavaDoc() != null) {\n+\t\t\tn.getJavaDoc().accept(this, arg);\n+\t\t}\n+\t\tif (n.getAnnotations() != null) {\n+\t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n+\t\t\t\ta.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tif (n.getTypeParameters() != null) {\n+\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n+\t\t\t\tt.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tn.getType().accept(this, arg);\n+\t\tif (n.getParameters() != null) {\n+\t\t\tfor (final Parameter p : n.getParameters()) {\n+\t\t\t\tp.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tif (n.getThrows() != null) {\n+\t\t\tfor (final NameExpr name : n.getThrows()) {\n+\t\t\t\tname.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tif (n.getBody() != null) {\n+\t\t\tn.getBody().accept(this, arg);\n+\t\t}\n+\t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				},
				{
					"type": "Yparametermetachange",
					"commitMessage": "* Remove lots of non-utf8 characters from source\n* Add Reader support to JavaParser\n",
					"commitDate": "2011-10-31, 2:55 PM",
					"commitName": "40dc8d37c07dc624780d215bd1ff3e00878fe9c5",
					"commitAuthor": "matozoid",
					"commitDateOld": "2011-10-30, 12:55 PM",
					"commitNameOld": "5202f0f5f664b45b792d4910882cec2580e9045c",
					"commitAuthorOld": "matozoid",
					"daysBetweenCommits": 1.08,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,30 +1,30 @@\n-    @Override public void visit(MethodDeclaration n, A arg) {\n-    \tvisitComment(n.getComment(), arg);\n-        if (n.getJavaDoc() != null) {\n-            n.getJavaDoc().accept(this, arg);\n-        }\n-        if (n.getAnnotations() != null) {\n-            for (AnnotationExpr a : n.getAnnotations()) {\n-                a.accept(this, arg);\n-            }\n-        }\n-        if (n.getTypeParameters() != null) {\n-            for (TypeParameter t : n.getTypeParameters()) {\n-                t.accept(this, arg);\n-            }\n-        }\n-        n.getType().accept(this, arg);\n-        if (n.getParameters() != null) {\n-            for (Parameter p : n.getParameters()) {\n-                p.accept(this, arg);\n-            }\n-        }\n-        if (n.getThrows() != null) {\n-            for (NameExpr name : n.getThrows()) {\n-                name.accept(this, arg);\n-            }\n-        }\n-        if (n.getBody() != null) {\n-            n.getBody().accept(this, arg);\n-        }\n-    }\n\\ No newline at end of file\n+\t@Override public void visit(final MethodDeclaration n, final A arg) {\n+\t\tvisitComment(n.getComment(), arg);\n+\t\tif (n.getJavaDoc() != null) {\n+\t\t\tn.getJavaDoc().accept(this, arg);\n+\t\t}\n+\t\tif (n.getAnnotations() != null) {\n+\t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n+\t\t\t\ta.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tif (n.getTypeParameters() != null) {\n+\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n+\t\t\t\tt.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tn.getType().accept(this, arg);\n+\t\tif (n.getParameters() != null) {\n+\t\t\tfor (final Parameter p : n.getParameters()) {\n+\t\t\t\tp.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tif (n.getThrows() != null) {\n+\t\t\tfor (final NameExpr name : n.getThrows()) {\n+\t\t\t\tname.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tif (n.getBody() != null) {\n+\t\t\tn.getBody().accept(this, arg);\n+\t\t}\n+\t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[n-MethodDeclaration, arg-A]",
						"newValue": "[n-MethodDeclaration(modifiers-final), arg-A(modifiers-final)]"
					}
				}
			]
		},
		"d3db3f06220a1d0091a5cda602f13dcdc8db3040": {
			"type": "Ybodychange",
			"commitMessage": "* http://code.google.com/p/javaparser/issues/detail?id=9#c23: Here are the corresponding changes for using Shelby's solution with the VoidVisitorAdapter. Alternatively, users can extend & override every public visit() method of the VoidVisitorAdapter class to also accept() the node's comment.\n",
			"commitDate": "2011-10-30, 11:32 AM",
			"commitName": "d3db3f06220a1d0091a5cda602f13dcdc8db3040",
			"commitAuthor": "matozoid",
			"commitDateOld": "2011-10-30, 7:40 AM",
			"commitNameOld": "43e6f7bfbcd77b61232cc9f3e166795e47bad04b",
			"commitAuthorOld": "matozoid",
			"daysBetweenCommits": 0.16,
			"commitsBetweenForRepo": 3,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,29 +1,30 @@\n     public void visit(MethodDeclaration n, A arg) {\n+    \tvisitComment(n.getComment(), arg);\n         if (n.getJavaDoc() != null) {\n             n.getJavaDoc().accept(this, arg);\n         }\n         if (n.getAnnotations() != null) {\n             for (AnnotationExpr a : n.getAnnotations()) {\n                 a.accept(this, arg);\n             }\n         }\n         if (n.getTypeParameters() != null) {\n             for (TypeParameter t : n.getTypeParameters()) {\n                 t.accept(this, arg);\n             }\n         }\n         n.getType().accept(this, arg);\n         if (n.getParameters() != null) {\n             for (Parameter p : n.getParameters()) {\n                 p.accept(this, arg);\n             }\n         }\n         if (n.getThrows() != null) {\n             for (NameExpr name : n.getThrows()) {\n                 name.accept(this, arg);\n             }\n         }\n         if (n.getBody() != null) {\n             n.getBody().accept(this, arg);\n         }\n     }\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"43e6f7bfbcd77b61232cc9f3e166795e47bad04b": {
			"type": "Yfilerename",
			"commitMessage": "* Add latest code from \"mavenized\" branch.\n",
			"commitDate": "2011-10-30, 7:40 AM",
			"commitName": "43e6f7bfbcd77b61232cc9f3e166795e47bad04b",
			"commitAuthor": "matozoid",
			"commitDateOld": "2011-10-30, 7:37 AM",
			"commitNameOld": "5e5a850b946252906db421cafec7b1e3e03ba3fa",
			"commitAuthorOld": "matozoid",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "src/japa/parser/ast/visitor/VoidVisitorAdapter.java",
				"newPath": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java"
			}
		},
		"2d4decafdf373c4d1cabd9c6f8a97707c72069ff": {
			"type": "Yintroduced",
			"commitMessage": "* Version 1.0.6\n",
			"commitDate": "2011-10-30, 7:35 AM",
			"commitName": "2d4decafdf373c4d1cabd9c6f8a97707c72069ff",
			"commitAuthor": "matozoid"
		}
	},
	"sha": "97555053af3025556efe1a168fd7943dac28a2a6"
}