{
	"repo": "https://github.com/junit-team/junit5.git",
	"file": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java",
	"method": {
		"longName": "protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor);",
		"startLine": 163,
		"methodName": "invokeTestMethod",
		"isStatic": false,
		"isAbstract": false,
		"visibility": "protected"
	},
	"history": {
		"b2cc5f49d5f892dbf022c62ec48f4e4bd95cf7cd": {
			"type": "Yfilerename",
			"commitMessage": "Rename MethodTestDescriptor to TestMethodTestDescriptor\n\nThis commit renames MethodTestDescriptor in order to align with the\nnaming convention for other test descriptors in Jupiter that pertain\nto methods.\n",
			"commitDate": "2017-07-16, 12:30 PM",
			"commitName": "b2cc5f49d5f892dbf022c62ec48f4e4bd95cf7cd",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-07-16, 12:18 PM",
			"commitNameOld": "1ffeb82ee94582720e9928c5868d180acd589d4d",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
				"newPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java"
			}
		},
		"bef03b5ce4c2385a99b13ac1a3354ac2ca8acc96": {
			"type": "Ybodychange",
			"commitMessage": "Introduce getRequired*() methods in the ExtensionContext API\n\nThis commit introduces new getRequiredTestClass(),\ngetRequiredTestInstance(), and getRequiredTestMethod() convenience\nmethods in the ExtensionContext API which provide extension authors\nshortcuts for retrieving the test class, test instance, and test method\nin use cases for which such elements are required to be present.\n\nIssue: #913\n",
			"commitDate": "2017-07-10, 9:34 AM",
			"commitName": "bef03b5ce4c2385a99b13ac1a3354ac2ca8acc96",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-07-04, 4:30 AM",
			"commitNameOld": "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 6.21,
			"commitsBetweenForRepo": 35,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,15 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tExtensionContext extensionContext = context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod testMethod = getTestMethod();\n-\t\t\t\tObject instance = getRequiredTestInstance(extensionContext);\n+\t\t\t\tObject instance = extensionContext.getRequiredTestInstance();\n \t\t\t\texecutableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"7b9267e3665c8550f4d2c9fda4cc6ce24e054cff": {
			"type": "Ybodychange",
			"commitMessage": "Introduce getRequiredTestInstance() in JupiterTestDescriptor\n\nIssue: #419\n",
			"commitDate": "2017-07-04, 4:30 AM",
			"commitName": "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-07-04, 4:00 AM",
			"commitNameOld": "fa7f25613bf60f2fd724c0c41fb413801bca53df",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,16 +1,15 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tExtensionContext extensionContext = context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod testMethod = getTestMethod();\n-\t\t\t\tObject instance = extensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\n-\t\t\t\t\t\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n+\t\t\t\tObject instance = getRequiredTestInstance(extensionContext);\n \t\t\t\texecutableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a97e4d3088f97b58031b139c006a98c8e0f49422": {
			"type": "Ybodychange",
			"commitMessage": "Revert \"Introduce getRequiredTestInstance() in AbstractExtensionContext\"\n\nThis reverts commit 0836f8f28601d1d27d07ad302c6aa1ef9f2ab023.\n",
			"commitDate": "2017-07-04, 4:00 AM",
			"commitName": "a97e4d3088f97b58031b139c006a98c8e0f49422",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-07-04, 3:36 AM",
			"commitNameOld": "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,16 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n-\t\tAbstractExtensionContext<?> extensionContext = context.getExtensionContext();\n+\t\tExtensionContext extensionContext = context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod testMethod = getTestMethod();\n-\t\t\t\tObject instance = extensionContext.getRequiredTestInstance();\n+\t\t\t\tObject instance = extensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\n+\t\t\t\t\t\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n \t\t\t\texecutableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"0836f8f28601d1d27d07ad302c6aa1ef9f2ab023": {
			"type": "Ybodychange",
			"commitMessage": "Introduce getRequiredTestInstance() in AbstractExtensionContext\n\nIssue: #910\n",
			"commitDate": "2017-07-04, 3:36 AM",
			"commitName": "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-07-03, 5:21 AM",
			"commitNameOld": "46e83ca98b5e11760f6995076c277f1af445826a",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.93,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,16 +1,15 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n-\t\tExtensionContext extensionContext = context.getExtensionContext();\n+\t\tAbstractExtensionContext<?> extensionContext = context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod testMethod = getTestMethod();\n-\t\t\t\tObject instance = extensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\n-\t\t\t\t\t\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n+\t\t\t\tObject instance = extensionContext.getRequiredTestInstance();\n \t\t\t\texecutableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7": {
			"type": "Ybodychange",
			"commitMessage": "Remove TestExtensionContext and ContainerExtensionContext\n\nIssue: #901\n",
			"commitDate": "2017-07-01, 4:45 AM",
			"commitName": "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-06-30, 9:16 AM",
			"commitNameOld": "fdadf905479b4cd63f1987d08940eddfbf89d088",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.81,
			"commitsBetweenForRepo": 16,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,16 +1,16 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n-\t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n+\t\tExtensionContext extensionContext = context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod testMethod = getTestMethod();\n-\t\t\t\tObject instance = testExtensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\n+\t\t\t\tObject instance = extensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\n \t\t\t\t\t\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n-\t\t\t\texecutableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n+\t\t\t\texecutableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n-\t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n+\t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"fdadf905479b4cd63f1987d08940eddfbf89d088": {
			"type": "Ybodychange",
			"commitMessage": "Avoid NoSuchElementException when retrieving test instance\n\nIssue: #419\n",
			"commitDate": "2017-06-30, 9:16 AM",
			"commitName": "fdadf905479b4cd63f1987d08940eddfbf89d088",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-06-30, 9:16 AM",
			"commitNameOld": "ee8cb2e44a92c511bc73553f2005ecc890bec141",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,16 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod testMethod = getTestMethod();\n-\t\t\t\tObject instance = testExtensionContext.getTestInstance().get();\n+\t\t\t\tObject instance = testExtensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\n+\t\t\t\t\t\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n \t\t\t\texecutableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ee8cb2e44a92c511bc73553f2005ecc890bec141": {
			"type": "Ybodychange",
			"commitMessage": "Move getTestInstance() to ExtensionContext\n\nIssue: #419\n",
			"commitDate": "2017-06-30, 9:16 AM",
			"commitName": "ee8cb2e44a92c511bc73553f2005ecc890bec141",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2017-05-04, 8:02 AM",
			"commitNameOld": "21cb383011c9f55e8d8da8afbeaadbf3fb400c1e",
			"commitAuthorOld": "Christian Stein",
			"daysBetweenCommits": 57.05,
			"commitsBetweenForRepo": 95,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,15 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod testMethod = getTestMethod();\n-\t\t\t\tObject instance = testExtensionContext.getTestInstance();\n+\t\t\t\tObject instance = testExtensionContext.getTestInstance().get();\n \t\t\t\texecutableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"21cb383011c9f55e8d8da8afbeaadbf3fb400c1e": {
			"type": "Ybodychange",
			"commitMessage": "Remove logging from test method execution\n\nSee #834 for details\n",
			"commitDate": "2017-05-04, 8:02 AM",
			"commitName": "21cb383011c9f55e8d8da8afbeaadbf3fb400c1e",
			"commitAuthor": "Christian Stein",
			"commitDateOld": "2017-05-04, 3:25 AM",
			"commitNameOld": "9a5ddb30bb206026eb7b209e98d809c1bedd887e",
			"commitAuthorOld": "Christian Stein",
			"daysBetweenCommits": 0.19,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,18 +1,15 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod testMethod = getTestMethod();\n-\t\t\t\tif (ReflectionUtils.isPublic(testMethod) && !testMethod.isDefault()) {\n-\t\t\t\t\tLOG.config(() -> \"Modifier `public` is not necessary at \" + testMethod);\n-\t\t\t\t}\n \t\t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\t\texecutableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9a5ddb30bb206026eb7b209e98d809c1bedd887e": {
			"type": "Ybodychange",
			"commitMessage": "Remove unnecessary public modifiers\n\nThis batch commit applies Jupiter feature supporting package private\ntest classes and methods to our Jupiter tests.\n\nCloses #679\n",
			"commitDate": "2017-05-04, 3:25 AM",
			"commitName": "9a5ddb30bb206026eb7b209e98d809c1bedd887e",
			"commitAuthor": "Christian Stein",
			"commitDateOld": "2017-03-25, 9:43 AM",
			"commitNameOld": "18b27c341bc156f4a11cd90723ae241516980f9e",
			"commitAuthorOld": "codecholeric",
			"daysBetweenCommits": 39.74,
			"commitsBetweenForRepo": 146,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,18 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n+\t\t\t\tMethod testMethod = getTestMethod();\n+\t\t\t\tif (ReflectionUtils.isPublic(testMethod) && !testMethod.isDefault()) {\n+\t\t\t\t\tLOG.config(() -> \"Modifier `public` is not necessary at \" + testMethod);\n+\t\t\t\t}\n \t\t\t\tObject instance = testExtensionContext.getTestInstance();\n-\t\t\t\texecutableInvoker.invoke(getTestMethod(), instance, testExtensionContext,\n-\t\t\t\t\tcontext.getExtensionRegistry());\n+\t\t\t\texecutableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9838fabf19e19b0e6cc80da85aeac94b427867d5": {
			"type": "Ybodychange",
			"commitMessage": "Introduce CollectionUtils.toStream to remove duplication\n",
			"commitDate": "2017-03-11, 1:41 PM",
			"commitName": "9838fabf19e19b0e6cc80da85aeac94b427867d5",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-02-24, 12:20 PM",
			"commitNameOld": "5489da0069a57e14eb2651df628fcc80c29f520d",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 15.06,
			"commitsBetweenForRepo": 74,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,15 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n-\t\t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\t\tObject instance = testExtensionContext.getTestInstance();\n-\t\t\t\texecutableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n+\t\t\t\texecutableInvoker.invoke(getTestMethod(), instance, testExtensionContext,\n+\t\t\t\t\tcontext.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"fc3c61b41f014a2500f176e23fe8ad2989d20565": {
			"type": "Yparameterchange",
			"commitMessage": "Replace Consumer<TestDescriptor> with custom interface\n\nIssue: #14\n",
			"commitDate": "2017-02-24, 12:20 PM",
			"commitName": "fc3c61b41f014a2500f176e23fe8ad2989d20565",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-02-24, 12:20 PM",
			"commitNameOld": "74fb7c6ff29566e28b9b04b9bbcc50c0a8632ec7",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0,
			"commitsBetweenForRepo": 12,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,16 +1,15 @@\n-\tprotected void invokeTestMethod(JupiterEngineExecutionContext context,\n-\t\t\tConsumer<TestDescriptor> dynamicTestExecutor) {\n+\tprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\t\texecutableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-Consumer<TestDescriptor>]",
				"newValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-DynamicTestExecutor]"
			}
		},
		"4b41518fa052b28a953e99b087d505603a22c175": {
			"type": "Yparameterchange",
			"commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
			"commitDate": "2017-02-24, 12:20 PM",
			"commitName": "4b41518fa052b28a953e99b087d505603a22c175",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2017-01-18, 9:17 PM",
			"commitNameOld": "2f49071dfc9005f556543e34ca41027c63fde927",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 36.63,
			"commitsBetweenForRepo": 48,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,16 @@\n-\tprotected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+\tprotected void invokeTestMethod(JupiterEngineExecutionContext context,\n+\t\t\tConsumer<TestDescriptor> dynamicTestExecutor) {\n \t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\t\texecutableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[context-JupiterEngineExecutionContext]",
				"newValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-Consumer<TestDescriptor>]"
			}
		},
		"da4a05ba9572191b3600a79ec616ea47fe8a3fd3": {
			"type": "Ybodychange",
			"commitMessage": "Polishing\n",
			"commitDate": "2016-06-26, 10:40 AM",
			"commitName": "da4a05ba9572191b3600a79ec616ea47fe8a3fd3",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-06-26, 9:04 AM",
			"commitNameOld": "c95005adbe2f754997a43009a47124f725496530",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.07,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,15 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context) {\n-\t\tMethodBasedTestExtensionContext testExtensionContext = (MethodBasedTestExtensionContext) context.getExtensionContext();\n+\t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\t\texecutableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c95005adbe2f754997a43009a47124f725496530": {
			"type": "Ybodychange",
			"commitMessage": "Share ThrowableCollector b/t ExecutionContexts & ExtensionContexts\n",
			"commitDate": "2016-06-26, 9:04 AM",
			"commitName": "c95005adbe2f754997a43009a47124f725496530",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-06-26, 8:25 AM",
			"commitNameOld": "41e5e579821975c222850105c911aeecb67af8cf",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.03,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,16 +1,15 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context) {\n \t\tMethodBasedTestExtensionContext testExtensionContext = (MethodBasedTestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\t\texecutableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n-\t\ttestExtensionContext.setTestException(throwableCollector.getThrowable());\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"2397538bc17fe9c105c8a2ef6955c13ba45e4628": {
			"type": "Ybodychange",
			"commitMessage": "Supply test exceptions to extensions via the TestExtensionContext\n\nCloses: #92\n",
			"commitDate": "2016-06-26, 7:53 AM",
			"commitName": "2397538bc17fe9c105c8a2ef6955c13ba45e4628",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-06-25, 1:02 PM",
			"commitNameOld": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.79,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,16 @@\n \tprotected void invokeTestMethod(JupiterEngineExecutionContext context) {\n-\t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n+\t\tMethodBasedTestExtensionContext testExtensionContext = (MethodBasedTestExtensionContext) context.getExtensionContext();\n \t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\t\texecutableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n+\t\ttestExtensionContext.setTestException(throwableCollector.getThrowable());\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"3e3b402131a99f01480c57dd82c2e81ad6d9a4ea": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Polish Jupiter TestDescriptor implementations\n",
			"commitDate": "2016-06-25, 1:02 PM",
			"commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
			"commitAuthor": "Sam Brannen",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Polish Jupiter TestDescriptor implementations\n",
					"commitDate": "2016-06-25, 1:02 PM",
					"commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
					"commitAuthor": "Sam Brannen",
					"commitDateOld": "2016-06-25, 10:30 AM",
					"commitNameOld": "6d2e88689252202ceb2efcdc54f78631f65752c5",
					"commitAuthorOld": "Sam Brannen",
					"daysBetweenCommits": 0.11,
					"commitsBetweenForRepo": 3,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,14 +1,15 @@\n-\tprotected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext,\n-\t\t\tThrowableCollector throwableCollector) {\n+\tprotected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+\t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n+\t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\t\texecutableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[context-JupiterEngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]",
						"newValue": "[context-JupiterEngineExecutionContext]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Polish Jupiter TestDescriptor implementations\n",
					"commitDate": "2016-06-25, 1:02 PM",
					"commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
					"commitAuthor": "Sam Brannen",
					"commitDateOld": "2016-06-25, 10:30 AM",
					"commitNameOld": "6d2e88689252202ceb2efcdc54f78631f65752c5",
					"commitAuthorOld": "Sam Brannen",
					"daysBetweenCommits": 0.11,
					"commitsBetweenForRepo": 3,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,14 +1,15 @@\n-\tprotected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext,\n-\t\t\tThrowableCollector throwableCollector) {\n+\tprotected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+\t\tTestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n+\t\tThrowableCollector throwableCollector = context.getThrowableCollector();\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\t\texecutableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"babcc661bd906b38a272f287ac8779669268fc58": {
			"type": "Yparameterchange",
			"commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
			"commitDate": "2016-06-20, 6:08 AM",
			"commitName": "babcc661bd906b38a272f287ac8779669268fc58",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2016-06-20, 1:59 AM",
			"commitNameOld": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
			"commitAuthorOld": "JUnit Team",
			"daysBetweenCommits": 0.17,
			"commitsBetweenForRepo": 7,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,14 +1,14 @@\n-\tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n+\tprotected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\t\tObject instance = testExtensionContext.getTestInstance();\n \t\t\t\texecutableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {
				"oldValue": "[context-JUnit5EngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]",
				"newValue": "[context-JupiterEngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]"
			}
		},
		"4972eb58d680a30e8fbd1ffb6cdc6477bef83374": {
			"type": "Yfilerename",
			"commitMessage": "Rename all JUnit 5 artifacts to platform, jupiter, & vintage\n\nIssue: #286\n",
			"commitDate": "2016-06-20, 1:59 AM",
			"commitName": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2016-06-19, 11:04 AM",
			"commitNameOld": "e5b7300ba40a0420e310d463a63ea4c10cc8d9b9",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.62,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
				"newPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java"
			}
		},
		"507e50872c6df8a66c32f45cb2153555f510c4b1": {
			"type": "Yfilerename",
			"commitMessage": "Rename base package of junit5-api and junit5-engine to org.junit.jupiter\n",
			"commitDate": "2016-06-18, 1:50 PM",
			"commitName": "507e50872c6df8a66c32f45cb2153555f510c4b1",
			"commitAuthor": "JUnit Team",
			"commitDateOld": "2016-06-18, 12:31 PM",
			"commitNameOld": "f7741ec30a0578d2ffaf76bca83d4fa31eb666a5",
			"commitAuthorOld": "JUnit Team",
			"daysBetweenCommits": 0.06,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "",
			"extendedDetails": {
				"oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
				"newPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java"
			}
		},
		"e0e131335d2117a2a1630db22260a258e47d8c4d": {
			"type": "Ybodychange",
			"commitMessage": "Make ExecutableInvoker stateless\n",
			"commitDate": "2016-05-28, 10:02 AM",
			"commitName": "e0e131335d2117a2a1630db22260a258e47d8c4d",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-26, 5:42 AM",
			"commitNameOld": "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 2.18,
			"commitsBetweenForRepo": 21,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,14 +1,14 @@\n \tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\ttry {\n \t\t\t\tMethod method = testExtensionContext.getTestMethod().get();\n \t\t\t\tObject instance = testExtensionContext.getTestInstance();\n-\t\t\t\tnew ExecutableInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(method, instance);\n+\t\t\t\texecutableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"9eacc9c2d51557bffa003ca24fa125b8cbe69bbb": {
			"type": "Ybodychange",
			"commitMessage": "Convert MethodInvoker to generic ExecutableInvoker\n\nPrior to this commit, MethodInvoker was limited to method invocations.\nWith the recent generalization of the ParameterResolver API, it is now\npossible to convert MethodInvoker to a generic ExecutableInvoker that\ncan be applied to constructors or methods, serving as a building block\nfor possible constructor injection support.\n\nThis commit converts MethodInvoker to a generic ExecutableInvoker that\ncan be used to invoke both methods and constructors with dynamic\nparameter resolution via registered ParameterResolvers.\n\nSpecifically, this commit includes the following changes.\n\n - Renamed MethodInvoker to ExecutableInvoker\n - Refactored ExecutableInvoker to support parameter resolution for any\n   java.lang.reflect.Executable\n - Introduced newInstance(Constructor<T>, Object...) in ReflectionUtils\n - Introduced invoke(Constructor), invoke(Method), and\n   invoke(Method, Object) in ExecutableInvoker\n - Removed MethodInvocationContext and MethodInvocationContextFactory\n - Removed ConstructorInvoker proof of concept\n\nIssue: #267\n",
			"commitDate": "2016-05-26, 5:42 AM",
			"commitName": "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-25, 12:50 PM",
			"commitNameOld": "067620c65061755653ee09f11c2ecaac17b206d1",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.7,
			"commitsBetweenForRepo": 5,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,14 +1,14 @@\n \tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n-\t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n-\t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n \t\t\ttry {\n-\t\t\t\tnew MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n+\t\t\t\tMethod method = testExtensionContext.getTestMethod().get();\n+\t\t\t\tObject instance = testExtensionContext.getTestInstance();\n+\t\t\t\tnew ExecutableInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(method, instance);\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"c7c0d24a3b6b46868d732e6358834c2ddf81ad48": {
			"type": "Ybodychange",
			"commitMessage": "Rename ExceptionHandler to TestExecutionExceptionHandler\n\nIssue: #249\n",
			"commitDate": "2016-05-24, 3:18 PM",
			"commitName": "c7c0d24a3b6b46868d732e6358834c2ddf81ad48",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-24, 2:49 PM",
			"commitNameOld": "3a08070f0f5255c2a058ef9912484364a57af3a8",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.02,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,14 +1,14 @@\n \tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n \t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n \t\t\ttry {\n \t\t\t\tnew MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n-\t\t\t\tinvokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n+\t\t\t\tinvokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a409b27b1fca748a504a8bbcf7a914eeadeebdab": {
			"type": "Ybodychange",
			"commitMessage": "Introduce getTest[Class|Method]() in TestInfo & ExtensionContext\n\nThis commit introduces Optional<Class<?>> getTestClass() and\nOptional<Method> getTestMethod() methods in TestInfo and\nExtensionContext.\n\nThe existing `Class<?> getTestClass()` method in ExtensionContext has\nsimply been replaced, and the existing `Method getTestMethod()` method\nin TestExtensionContext has been removed.\n\nIssue: #153\n",
			"commitDate": "2016-05-24, 2:32 PM",
			"commitName": "a409b27b1fca748a504a8bbcf7a914eeadeebdab",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-05-23, 12:21 PM",
			"commitNameOld": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 1.09,
			"commitsBetweenForRepo": 8,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,14 +1,14 @@\n \tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n-\t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n+\t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n \t\t\ttry {\n \t\t\t\tnew MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n \t\t\t\tinvokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"ac7bb522519cd8a600324aa909a5c17a110cb97f": {
			"type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
			"commitMessage": "Execution of simple dynamic tests (#58)\n\n- HierarchicalTestExecutor only executes children from containers\n- Unique IDs for dynamic tests are created using index\n- Add tests for discovery of dynamic test by method selector (#58)\n",
			"commitDate": "2016-05-23, 12:21 PM",
			"commitName": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
			"commitAuthor": "Johannes Link",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Execution of simple dynamic tests (#58)\n\n- HierarchicalTestExecutor only executes children from containers\n- Unique IDs for dynamic tests are created using index\n- Add tests for discovery of dynamic test by method selector (#58)\n",
					"commitDate": "2016-05-23, 12:21 PM",
					"commitName": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
					"commitAuthor": "Johannes Link",
					"commitDateOld": "2016-05-15, 12:09 PM",
					"commitNameOld": "ff6c3f635a444ccc92039420616402e32d3506a9",
					"commitAuthorOld": "Sam Brannen",
					"daysBetweenCommits": 8.01,
					"commitsBetweenForRepo": 42,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,14 +1,14 @@\n-\tprivate void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext,\n+\tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n \t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n \t\t\ttry {\n-\t\t\t\tnew MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n+\t\t\t\tnew MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n-\t\t\t\tinvokeExceptionHandlers(ExtensionRegistry, testExtensionContext, throwable);\n+\t\t\t\tinvokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[ExtensionRegistry-ExtensionRegistry, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]",
						"newValue": "[context-JUnit5EngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]"
					}
				},
				{
					"type": "Ymodifierchange",
					"commitMessage": "Execution of simple dynamic tests (#58)\n\n- HierarchicalTestExecutor only executes children from containers\n- Unique IDs for dynamic tests are created using index\n- Add tests for discovery of dynamic test by method selector (#58)\n",
					"commitDate": "2016-05-23, 12:21 PM",
					"commitName": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
					"commitAuthor": "Johannes Link",
					"commitDateOld": "2016-05-15, 12:09 PM",
					"commitNameOld": "ff6c3f635a444ccc92039420616402e32d3506a9",
					"commitAuthorOld": "Sam Brannen",
					"daysBetweenCommits": 8.01,
					"commitsBetweenForRepo": 42,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,14 +1,14 @@\n-\tprivate void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext,\n+\tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n \t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n \t\t\ttry {\n-\t\t\t\tnew MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n+\t\t\t\tnew MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n-\t\t\t\tinvokeExceptionHandlers(ExtensionRegistry, testExtensionContext, throwable);\n+\t\t\t\tinvokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[private]",
						"newValue": "[protected]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Execution of simple dynamic tests (#58)\n\n- HierarchicalTestExecutor only executes children from containers\n- Unique IDs for dynamic tests are created using index\n- Add tests for discovery of dynamic test by method selector (#58)\n",
					"commitDate": "2016-05-23, 12:21 PM",
					"commitName": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
					"commitAuthor": "Johannes Link",
					"commitDateOld": "2016-05-15, 12:09 PM",
					"commitNameOld": "ff6c3f635a444ccc92039420616402e32d3506a9",
					"commitAuthorOld": "Sam Brannen",
					"daysBetweenCommits": 8.01,
					"commitsBetweenForRepo": 42,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,14 +1,14 @@\n-\tprivate void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext,\n+\tprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n \t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n \t\t\ttry {\n-\t\t\t\tnew MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n+\t\t\t\tnew MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n-\t\t\t\tinvokeExceptionHandlers(ExtensionRegistry, testExtensionContext, throwable);\n+\t\t\t\tinvokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n \t\t\t}\n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"23c20e541adffed56fcb34ad297d843081eaa796": {
			"type": "Ybodychange",
			"commitMessage": "Rename ExceptionHandlerExtensionPoint to ExceptionHandler\n\nIssue: #232\n",
			"commitDate": "2016-05-02, 8:30 AM",
			"commitName": "23c20e541adffed56fcb34ad297d843081eaa796",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-03-11, 2:52 AM",
			"commitNameOld": "5382b682db28f81e71737cec46b9883bfff73800",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 52.19,
			"commitsBetweenForRepo": 142,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,15 +1,15 @@\n \tprivate void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n \t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n \t\t\ttry {\n \t\t\t\tnew MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n \t\t\t}\n \t\t\tcatch (Throwable throwable) {\n-\t\t\t\tinvokeExceptionHandlerExtensionPoints(ExtensionRegistry, testExtensionContext, throwable);\n+\t\t\t\tinvokeExceptionHandlers(ExtensionRegistry, testExtensionContext, throwable);\n \t\t\t}\n \n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"f250792f7f2a6a40cdec82f3090ce88d99aad152": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "#103 ExceptionHandlerExtensionPoint now called. Chaining does not work yet.\n",
			"commitDate": "2016-01-21, 6:16 AM",
			"commitName": "f250792f7f2a6a40cdec82f3090ce88d99aad152",
			"commitAuthor": "Johannes Link",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "#103 ExceptionHandlerExtensionPoint now called. Chaining does not work yet.\n",
					"commitDate": "2016-01-21, 6:16 AM",
					"commitName": "f250792f7f2a6a40cdec82f3090ce88d99aad152",
					"commitAuthor": "Johannes Link",
					"commitDateOld": "2016-01-21, 5:03 AM",
					"commitNameOld": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
					"commitAuthorOld": "Sam Brannen",
					"daysBetweenCommits": 0.05,
					"commitsBetweenForRepo": 4,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,9 +1,15 @@\n-\tprivate void invokeTestMethod(TestExtensionContext testExtensionContext, ExtensionRegistry extensionRegistry,\n+\tprivate void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n \t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n-\t\t\tnew MethodInvoker(testExtensionContext, extensionRegistry).invoke(methodInvocationContext);\n+\t\t\ttry {\n+\t\t\t\tnew MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n+\t\t\t}\n+\t\t\tcatch (Throwable throwable) {\n+\t\t\t\tinvokeExceptionHandlerExtensionPoints(ExtensionRegistry, testExtensionContext, throwable);\n+\t\t\t}\n+\n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[testExtensionContext-TestExtensionContext, extensionRegistry-ExtensionRegistry, throwableCollector-ThrowableCollector]",
						"newValue": "[ExtensionRegistry-ExtensionRegistry, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "#103 ExceptionHandlerExtensionPoint now called. Chaining does not work yet.\n",
					"commitDate": "2016-01-21, 6:16 AM",
					"commitName": "f250792f7f2a6a40cdec82f3090ce88d99aad152",
					"commitAuthor": "Johannes Link",
					"commitDateOld": "2016-01-21, 5:03 AM",
					"commitNameOld": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
					"commitAuthorOld": "Sam Brannen",
					"daysBetweenCommits": 0.05,
					"commitsBetweenForRepo": 4,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,9 +1,15 @@\n-\tprivate void invokeTestMethod(TestExtensionContext testExtensionContext, ExtensionRegistry extensionRegistry,\n+\tprivate void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext,\n \t\t\tThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n \t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n-\t\t\tnew MethodInvoker(testExtensionContext, extensionRegistry).invoke(methodInvocationContext);\n+\t\t\ttry {\n+\t\t\t\tnew MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n+\t\t\t}\n+\t\t\tcatch (Throwable throwable) {\n+\t\t\t\tinvokeExceptionHandlerExtensionPoints(ExtensionRegistry, testExtensionContext, throwable);\n+\t\t\t}\n+\n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"c0a0e14d2c11bb77bfe25aee9594b04e793b04aa": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Rename TestExtensionRegistry to ExtensionRegistry\n\nIssue: #112\n",
			"commitDate": "2016-01-21, 5:03 AM",
			"commitName": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
			"commitAuthor": "Sam Brannen",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Rename TestExtensionRegistry to ExtensionRegistry\n\nIssue: #112\n",
					"commitDate": "2016-01-21, 5:03 AM",
					"commitName": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
					"commitAuthor": "Sam Brannen",
					"commitDateOld": "2016-01-18, 6:34 AM",
					"commitNameOld": "763cf502451c5053cd72248aac3561cd1530b719",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 2.94,
					"commitsBetweenForRepo": 84,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,9 +1,9 @@\n-\tprivate void invokeTestMethod(TestExtensionContext testExtensionContext,\n-\t\t\tTestExtensionRegistry testExtensionRegistry, ThrowableCollector throwableCollector) {\n+\tprivate void invokeTestMethod(TestExtensionContext testExtensionContext, ExtensionRegistry extensionRegistry,\n+\t\t\tThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n \t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n-\t\t\tnew MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodInvocationContext);\n+\t\t\tnew MethodInvoker(testExtensionContext, extensionRegistry).invoke(methodInvocationContext);\n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[testExtensionContext-TestExtensionContext, testExtensionRegistry-TestExtensionRegistry, throwableCollector-ThrowableCollector]",
						"newValue": "[testExtensionContext-TestExtensionContext, extensionRegistry-ExtensionRegistry, throwableCollector-ThrowableCollector]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Rename TestExtensionRegistry to ExtensionRegistry\n\nIssue: #112\n",
					"commitDate": "2016-01-21, 5:03 AM",
					"commitName": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
					"commitAuthor": "Sam Brannen",
					"commitDateOld": "2016-01-18, 6:34 AM",
					"commitNameOld": "763cf502451c5053cd72248aac3561cd1530b719",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 2.94,
					"commitsBetweenForRepo": 84,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,9 +1,9 @@\n-\tprivate void invokeTestMethod(TestExtensionContext testExtensionContext,\n-\t\t\tTestExtensionRegistry testExtensionRegistry, ThrowableCollector throwableCollector) {\n+\tprivate void invokeTestMethod(TestExtensionContext testExtensionContext, ExtensionRegistry extensionRegistry,\n+\t\t\tThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n \t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n \t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n-\t\t\tnew MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodInvocationContext);\n+\t\t\tnew MethodInvoker(testExtensionContext, extensionRegistry).invoke(methodInvocationContext);\n \t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"0fd76305d40d56ca9377d8d64bfc160cc834c134": {
			"type": "Ybodychange",
			"commitMessage": "Rename MethodContext to MethodInvocationContext\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks msg systems ag\n(http://www.msg-systems.com) for supporting the JUnit crowdfunding\ncampaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2016-01-03, 8:12 AM",
			"commitName": "0fd76305d40d56ca9377d8d64bfc160cc834c134",
			"commitAuthor": "Sam Brannen",
			"commitDateOld": "2016-01-02, 1:24 PM",
			"commitNameOld": "eb4d6401bb646f5c77b89149aeb6648f0b3ab478",
			"commitAuthorOld": "Sam Brannen",
			"daysBetweenCommits": 0.78,
			"commitsBetweenForRepo": 15,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,9 +1,9 @@\n \tprivate void invokeTestMethod(TestExtensionContext testExtensionContext,\n \t\t\tTestExtensionRegistry testExtensionRegistry, ThrowableCollector throwableCollector) {\n \n \t\tthrowableCollector.execute(() -> {\n-\t\t\tMethodContext methodContext = methodContext(testExtensionContext.getTestInstance(),\n-\t\t\t\ttestExtensionContext.getTestMethod());\n-\t\t\tnew MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n+\t\t\tMethodInvocationContext methodInvocationContext = methodInvocationContext(\n+\t\t\t\ttestExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n+\t\t\tnew MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodInvocationContext);\n \t\t});\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Mask checked exceptions as unchecked exceptions in ReflectionUtils\n\nPrior to this commit, ReflectionUtils.handleException() wrapped checked\nexceptions in a TargetExceptionWrapper (a subclass of RuntimeException).\nThis forced clients of ReflectionUtils to manually handle unwrapping of\nchecked exceptions.\n\nThis commit introduces a new throwAsRuntimeException() method in\nReflectionUtils which uses a reflective hack (based on generics and type\nerasure) that tricks the Java compiler into believing that the thrown\nexception is an unchecked exception. This approach allows both checked\nand unchecked exceptions to transparently propagate up the call stack\nwithout forcing callers to explicitly handle checked exceptions. In\naddition, this approach avoids the need to wrap/unwrap checked\nexceptions via the TargetExceptionWrapper.\n\nFurthermore, this commit refactors exception handling code within the\nJUnit 5 engine to use the newly introduced ThrowableCollector API for\nconsistent, simplified tracking of exceptions.\n\nIssue: #64\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nSamuraism, Inc. (http://samuraism.com/) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2016-01-02, 9:37 AM",
			"commitName": "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab",
			"commitAuthor": "Sam Brannen",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Mask checked exceptions as unchecked exceptions in ReflectionUtils\n\nPrior to this commit, ReflectionUtils.handleException() wrapped checked\nexceptions in a TargetExceptionWrapper (a subclass of RuntimeException).\nThis forced clients of ReflectionUtils to manually handle unwrapping of\nchecked exceptions.\n\nThis commit introduces a new throwAsRuntimeException() method in\nReflectionUtils which uses a reflective hack (based on generics and type\nerasure) that tricks the Java compiler into believing that the thrown\nexception is an unchecked exception. This approach allows both checked\nand unchecked exceptions to transparently propagate up the call stack\nwithout forcing callers to explicitly handle checked exceptions. In\naddition, this approach avoids the need to wrap/unwrap checked\nexceptions via the TargetExceptionWrapper.\n\nFurthermore, this commit refactors exception handling code within the\nJUnit 5 engine to use the newly introduced ThrowableCollector API for\nconsistent, simplified tracking of exceptions.\n\nIssue: #64\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nSamuraism, Inc. (http://samuraism.com/) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
					"commitDate": "2016-01-02, 9:37 AM",
					"commitName": "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab",
					"commitAuthor": "Sam Brannen",
					"commitDateOld": "2016-01-02, 9:23 AM",
					"commitNameOld": "355d64b574c534f35b4faeae1339b458a0787579",
					"commitAuthorOld": "Sam Brannen",
					"daysBetweenCommits": 0.01,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,8 +1,9 @@\n \tprivate void invokeTestMethod(TestExtensionContext testExtensionContext,\n-\t\t\tTestExtensionRegistry testExtensionRegistry, List<Throwable> throwablesCollector) {\n-\t\texecuteAndCollectThrowables(() -> {\n+\t\t\tTestExtensionRegistry testExtensionRegistry, ThrowableCollector throwableCollector) {\n+\n+\t\tthrowableCollector.execute(() -> {\n \t\t\tMethodContext methodContext = methodContext(testExtensionContext.getTestInstance(),\n \t\t\t\ttestExtensionContext.getTestMethod());\n \t\t\tnew MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n-\t\t}, throwablesCollector);\n+\t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[testExtensionContext-TestExtensionContext, testExtensionRegistry-TestExtensionRegistry, throwablesCollector-List<Throwable>]",
						"newValue": "[testExtensionContext-TestExtensionContext, testExtensionRegistry-TestExtensionRegistry, throwableCollector-ThrowableCollector]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Mask checked exceptions as unchecked exceptions in ReflectionUtils\n\nPrior to this commit, ReflectionUtils.handleException() wrapped checked\nexceptions in a TargetExceptionWrapper (a subclass of RuntimeException).\nThis forced clients of ReflectionUtils to manually handle unwrapping of\nchecked exceptions.\n\nThis commit introduces a new throwAsRuntimeException() method in\nReflectionUtils which uses a reflective hack (based on generics and type\nerasure) that tricks the Java compiler into believing that the thrown\nexception is an unchecked exception. This approach allows both checked\nand unchecked exceptions to transparently propagate up the call stack\nwithout forcing callers to explicitly handle checked exceptions. In\naddition, this approach avoids the need to wrap/unwrap checked\nexceptions via the TargetExceptionWrapper.\n\nFurthermore, this commit refactors exception handling code within the\nJUnit 5 engine to use the newly introduced ThrowableCollector API for\nconsistent, simplified tracking of exceptions.\n\nIssue: #64\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nSamuraism, Inc. (http://samuraism.com/) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
					"commitDate": "2016-01-02, 9:37 AM",
					"commitName": "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab",
					"commitAuthor": "Sam Brannen",
					"commitDateOld": "2016-01-02, 9:23 AM",
					"commitNameOld": "355d64b574c534f35b4faeae1339b458a0787579",
					"commitAuthorOld": "Sam Brannen",
					"daysBetweenCommits": 0.01,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,8 +1,9 @@\n \tprivate void invokeTestMethod(TestExtensionContext testExtensionContext,\n-\t\t\tTestExtensionRegistry testExtensionRegistry, List<Throwable> throwablesCollector) {\n-\t\texecuteAndCollectThrowables(() -> {\n+\t\t\tTestExtensionRegistry testExtensionRegistry, ThrowableCollector throwableCollector) {\n+\n+\t\tthrowableCollector.execute(() -> {\n \t\t\tMethodContext methodContext = methodContext(testExtensionContext.getTestInstance(),\n \t\t\t\ttestExtensionContext.getTestMethod());\n \t\t\tnew MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n-\t\t}, throwablesCollector);\n+\t\t});\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"e45c3250aaedd8e80f854b6cd99c24f7f99f145b": {
			"type": "Ybodychange",
			"commitMessage": "Consolidated exception handling for subclasses of JUnit5TestDescriptor.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nGradleware (https://gradle.org) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-22, 8:25 AM",
			"commitName": "e45c3250aaedd8e80f854b6cd99c24f7f99f145b",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-12-22, 7:15 AM",
			"commitNameOld": "255e91bbfa74234afffffe2d393ad6a43091cfd2",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 0.05,
			"commitsBetweenForRepo": 1,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,14 +1,8 @@\n \tprivate void invokeTestMethod(TestExtensionContext testExtensionContext,\n \t\t\tTestExtensionRegistry testExtensionRegistry, List<Throwable> throwablesCollector) {\n-\t\ttry {\n+\t\texecuteAndCollectThrowables(() -> {\n \t\t\tMethodContext methodContext = methodContext(testExtensionContext.getTestInstance(),\n \t\t\t\ttestExtensionContext.getTestMethod());\n \t\t\tnew MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n-\t\t}\n-\t\tcatch (ReflectionUtils.TargetExceptionWrapper wrapper) {\n-\t\t\tthrowablesCollector.add(wrapper.getTargetException());\n-\t\t}\n-\t\tcatch (Throwable t) {\n-\t\t\tthrowablesCollector.add(t);\n-\t\t}\n+\t\t}, throwablesCollector);\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"12bbe5afc72f457e5bba4bbcf68c49d6e4b77a4e": {
			"type": "Ybodychange",
			"commitMessage": "Checked and unchecked exceptions in test cases now properly reported.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-18, 6:47 AM",
			"commitName": "12bbe5afc72f457e5bba4bbcf68c49d6e4b77a4e",
			"commitAuthor": "Johannes Link",
			"commitDateOld": "2015-12-17, 11:54 AM",
			"commitNameOld": "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
			"commitAuthorOld": "Johannes Link",
			"daysBetweenCommits": 0.79,
			"commitsBetweenForRepo": 10,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,11 +1,14 @@\n \tprivate void invokeTestMethod(TestExtensionContext testExtensionContext,\n \t\t\tTestExtensionRegistry testExtensionRegistry, List<Throwable> throwablesCollector) {\n \t\ttry {\n \t\t\tMethodContext methodContext = methodContext(testExtensionContext.getTestInstance(),\n \t\t\t\ttestExtensionContext.getTestMethod());\n \t\t\tnew MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n \t\t}\n+\t\tcatch (ReflectionUtils.TargetExceptionWrapper wrapper) {\n+\t\t\tthrowablesCollector.add(wrapper.getTargetException());\n+\t\t}\n \t\tcatch (Throwable t) {\n \t\t\tthrowablesCollector.add(t);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8": {
			"type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
			"commitMessage": "Fixed double invocation of before/after each extensions in nested tests.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
			"commitDate": "2015-12-14, 8:45 PM",
			"commitName": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
			"commitAuthor": "Johannes Link",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Fixed double invocation of before/after each extensions in nested tests.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
					"commitDate": "2015-12-14, 8:45 PM",
					"commitName": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
					"commitAuthor": "Johannes Link",
					"commitDateOld": "2015-12-14, 2:56 PM",
					"commitNameOld": "30aa4cfa124dd4d987dcc3cb3aa482ed60108cee",
					"commitAuthorOld": "Johannes Link",
					"daysBetweenCommits": 0.24,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,11 @@\n-\tprivate Optional<Throwable> invokeTestMethod(TestExtensionContext testExtensionContext,\n-\t\t\tTestExtensionRegistry testExtensionRegistry) {\n+\tprivate void invokeTestMethod(TestExtensionContext testExtensionContext,\n+\t\t\tTestExtensionRegistry testExtensionRegistry, List<Throwable> throwablesCollector) {\n \t\ttry {\n \t\t\tMethodContext methodContext = methodContext(testExtensionContext.getTestInstance(),\n \t\t\t\ttestExtensionContext.getTestMethod());\n \t\t\tnew MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n-\t\t\treturn Optional.empty();\n \t\t}\n \t\tcatch (Throwable t) {\n-\t\t\treturn Optional.of(t);\n+\t\t\tthrowablesCollector.add(t);\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[testExtensionContext-TestExtensionContext, testExtensionRegistry-TestExtensionRegistry]",
						"newValue": "[testExtensionContext-TestExtensionContext, testExtensionRegistry-TestExtensionRegistry, throwablesCollector-List<Throwable>]"
					}
				},
				{
					"type": "Yreturntypechange",
					"commitMessage": "Fixed double invocation of before/after each extensions in nested tests.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
					"commitDate": "2015-12-14, 8:45 PM",
					"commitName": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
					"commitAuthor": "Johannes Link",
					"commitDateOld": "2015-12-14, 2:56 PM",
					"commitNameOld": "30aa4cfa124dd4d987dcc3cb3aa482ed60108cee",
					"commitAuthorOld": "Johannes Link",
					"daysBetweenCommits": 0.24,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,11 @@\n-\tprivate Optional<Throwable> invokeTestMethod(TestExtensionContext testExtensionContext,\n-\t\t\tTestExtensionRegistry testExtensionRegistry) {\n+\tprivate void invokeTestMethod(TestExtensionContext testExtensionContext,\n+\t\t\tTestExtensionRegistry testExtensionRegistry, List<Throwable> throwablesCollector) {\n \t\ttry {\n \t\t\tMethodContext methodContext = methodContext(testExtensionContext.getTestInstance(),\n \t\t\t\ttestExtensionContext.getTestMethod());\n \t\t\tnew MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n-\t\t\treturn Optional.empty();\n \t\t}\n \t\tcatch (Throwable t) {\n-\t\t\treturn Optional.of(t);\n+\t\t\tthrowablesCollector.add(t);\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "Optional<Throwable>",
						"newValue": "void"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Fixed double invocation of before/after each extensions in nested tests.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
					"commitDate": "2015-12-14, 8:45 PM",
					"commitName": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
					"commitAuthor": "Johannes Link",
					"commitDateOld": "2015-12-14, 2:56 PM",
					"commitNameOld": "30aa4cfa124dd4d987dcc3cb3aa482ed60108cee",
					"commitAuthorOld": "Johannes Link",
					"daysBetweenCommits": 0.24,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,12 +1,11 @@\n-\tprivate Optional<Throwable> invokeTestMethod(TestExtensionContext testExtensionContext,\n-\t\t\tTestExtensionRegistry testExtensionRegistry) {\n+\tprivate void invokeTestMethod(TestExtensionContext testExtensionContext,\n+\t\t\tTestExtensionRegistry testExtensionRegistry, List<Throwable> throwablesCollector) {\n \t\ttry {\n \t\t\tMethodContext methodContext = methodContext(testExtensionContext.getTestInstance(),\n \t\t\t\ttestExtensionContext.getTestMethod());\n \t\t\tnew MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n-\t\t\treturn Optional.empty();\n \t\t}\n \t\tcatch (Throwable t) {\n-\t\t\treturn Optional.of(t);\n+\t\t\tthrowablesCollector.add(t);\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"b67bd2e32f8274fb0972e3a98157e2398140dcbf": {
			"type": "Ybodychange",
			"commitMessage": "MethodInvoker invokes using MethodContext\n",
			"commitDate": "2015-12-09, 2:00 PM",
			"commitName": "b67bd2e32f8274fb0972e3a98157e2398140dcbf",
			"commitAuthor": "Marc Philipp",
			"commitDateOld": "2015-12-09, 1:51 PM",
			"commitNameOld": "11ece8b11085a01a95a10e7bf26e4eb51034ac00",
			"commitAuthorOld": "Marc Philipp",
			"daysBetweenCommits": 0.01,
			"commitsBetweenForRepo": 2,
			"commitsBetweenForFile": 1,
			"diff": "@@ -1,12 +1,12 @@\n \tprivate Optional<Throwable> invokeTestMethod(TestExtensionContext testExtensionContext,\n \t\t\tTestExtensionRegistry testExtensionRegistry) {\n \t\ttry {\n \t\t\tMethodContext methodContext = methodContext(testExtensionContext.getTestInstance(),\n \t\t\t\ttestExtensionContext.getTestMethod());\n-\t\t\tnew MethodInvoker(methodContext, testExtensionContext, testExtensionRegistry).invoke();\n+\t\t\tnew MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n \t\t\treturn Optional.empty();\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\treturn Optional.of(t);\n \t\t}\n \t}\n\\ No newline at end of file\n",
			"extendedDetails": {}
		},
		"11ece8b11085a01a95a10e7bf26e4eb51034ac00": {
			"type": "Ymultichange(Yparameterchange,Ybodychange)",
			"commitMessage": "Inject parameters into @BeforeEach and @AfterEach\n",
			"commitDate": "2015-12-09, 1:51 PM",
			"commitName": "11ece8b11085a01a95a10e7bf26e4eb51034ac00",
			"commitAuthor": "Marc Philipp",
			"subchanges": [
				{
					"type": "Yparameterchange",
					"commitMessage": "Inject parameters into @BeforeEach and @AfterEach\n",
					"commitDate": "2015-12-09, 1:51 PM",
					"commitName": "11ece8b11085a01a95a10e7bf26e4eb51034ac00",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-09, 1:37 PM",
					"commitNameOld": "fc5ff8d87c124e43601f64da76668e516758a74a",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.01,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,11 +1,12 @@\n-\tprivate Optional<Throwable> invokeTestMethod(JUnit5Context myContext, TestExtensionContext testExtensionContext) {\n+\tprivate Optional<Throwable> invokeTestMethod(TestExtensionContext testExtensionContext,\n+\t\t\tTestExtensionRegistry testExtensionRegistry) {\n \t\ttry {\n-\t\t\tMethodContext methodContext = new MethodContextImpl(testExtensionContext.getTestInstance(),\n+\t\t\tMethodContext methodContext = methodContext(testExtensionContext.getTestInstance(),\n \t\t\t\ttestExtensionContext.getTestMethod());\n-\t\t\tnew MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n+\t\t\tnew MethodInvoker(methodContext, testExtensionContext, testExtensionRegistry).invoke();\n \t\t\treturn Optional.empty();\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\treturn Optional.of(t);\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {
						"oldValue": "[myContext-JUnit5Context, testExtensionContext-TestExtensionContext]",
						"newValue": "[testExtensionContext-TestExtensionContext, testExtensionRegistry-TestExtensionRegistry]"
					}
				},
				{
					"type": "Ybodychange",
					"commitMessage": "Inject parameters into @BeforeEach and @AfterEach\n",
					"commitDate": "2015-12-09, 1:51 PM",
					"commitName": "11ece8b11085a01a95a10e7bf26e4eb51034ac00",
					"commitAuthor": "Marc Philipp",
					"commitDateOld": "2015-12-09, 1:37 PM",
					"commitNameOld": "fc5ff8d87c124e43601f64da76668e516758a74a",
					"commitAuthorOld": "Marc Philipp",
					"daysBetweenCommits": 0.01,
					"commitsBetweenForRepo": 1,
					"commitsBetweenForFile": 1,
					"diff": "@@ -1,11 +1,12 @@\n-\tprivate Optional<Throwable> invokeTestMethod(JUnit5Context myContext, TestExtensionContext testExtensionContext) {\n+\tprivate Optional<Throwable> invokeTestMethod(TestExtensionContext testExtensionContext,\n+\t\t\tTestExtensionRegistry testExtensionRegistry) {\n \t\ttry {\n-\t\t\tMethodContext methodContext = new MethodContextImpl(testExtensionContext.getTestInstance(),\n+\t\t\tMethodContext methodContext = methodContext(testExtensionContext.getTestInstance(),\n \t\t\t\ttestExtensionContext.getTestMethod());\n-\t\t\tnew MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n+\t\t\tnew MethodInvoker(methodContext, testExtensionContext, testExtensionRegistry).invoke();\n \t\t\treturn Optional.empty();\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\treturn Optional.of(t);\n \t\t}\n \t}\n\\ No newline at end of file\n",
					"extendedDetails": {}
				}
			]
		},
		"fc5ff8d87c124e43601f64da76668e516758a74a": {
			"type": "Yintroduced",
			"commitMessage": "Execute @AfterEach methods in AfterEachCallback\n",
			"commitDate": "2015-12-09, 1:37 PM",
			"commitName": "fc5ff8d87c124e43601f64da76668e516758a74a",
			"commitAuthor": "Marc Philipp",
			"diff": "@@ -0,0 +1,11 @@\n+\tprivate Optional<Throwable> invokeTestMethod(JUnit5Context myContext, TestExtensionContext testExtensionContext) {\n+\t\ttry {\n+\t\t\tMethodContext methodContext = new MethodContextImpl(testExtensionContext.getTestInstance(),\n+\t\t\t\ttestExtensionContext.getTestMethod());\n+\t\t\tnew MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\tcatch (Throwable t) {\n+\t\t\treturn Optional.of(t);\n+\t\t}\n+\t}\n\\ No newline at end of file\n"
		}
	},
	"sha": "77cfe71e7f787c59626198e25350545f41e968bd"
}